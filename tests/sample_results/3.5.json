{
    "executing.py": [
        [
            "LOAD_ATTR",
            "sys.version_info"
        ],
        [
            "BINARY_SUBSCR",
            "sys.version_info[0]"
        ],
        [
            "LOAD_ATTR",
            "dis.get_instructions"
        ],
        [
            "LOAD_ATTR",
            "ast.NodeVisitor"
        ],
        [
            "LOAD_ATTR",
            "__future__.all_feature_names"
        ],
        [
            "LOAD_ATTR",
            "functools.wraps"
        ],
        [
            "BINARY_SUBSCR",
            "d[args]"
        ],
        [
            "LOAD_ATTR",
            "co.co_code"
        ],
        [
            "BINARY_SUBSCR",
            "code[i]"
        ],
        [
            "BINARY_ADD",
            "i + 1"
        ],
        [
            "BINARY_SUBSCR",
            "code[i]"
        ],
        [
            "BINARY_ADD",
            "i + 1"
        ],
        [
            "BINARY_SUBSCR",
            "code[i + 1]"
        ],
        [
            "BINARY_MULTIPLY",
            "ord(code[i + 1]) * 256"
        ],
        [
            "BINARY_ADD",
            "ord(code[i]) + ord(code[i + 1]) * 256"
        ],
        [
            "BINARY_ADD",
            "ord(code[i]) + ord(code[i + 1]) * 256 + extended_arg"
        ],
        [
            "BINARY_ADD",
            "i + 2"
        ],
        [
            "BINARY_MULTIPLY",
            "oparg * 65536"
        ],
        [
            "LOAD_ATTR",
            "co.co_consts"
        ],
        [
            "BINARY_SUBSCR",
            "co.co_consts[oparg]"
        ],
        [
            "BINARY_SUBSCR",
            "opname[op]"
        ],
        [
            "BINARY_MODULO",
            "'Expected one value, found %s' % len(it)"
        ],
        [
            "BINARY_SUBSCR",
            "list(it)[0]"
        ],
        [
            "BINARY_SUBSCR",
            "lst[0]"
        ],
        [
            "LOAD_ATTR",
            "self.decode_source"
        ],
        [
            "LOAD_ATTR",
            "''.join"
        ],
        [
            "LOAD_ATTR",
            "text.splitlines"
        ],
        [
            "LOAD_ATTR",
            "ast.parse"
        ],
        [
            "LOAD_ATTR",
            "ast.walk"
        ],
        [
            "LOAD_ATTR",
            "self.tree"
        ],
        [
            "LOAD_ATTR",
            "ast.iter_child_nodes"
        ],
        [
            "LOAD_ATTR",
            "self._nodes_by_line"
        ],
        [
            "LOAD_ATTR",
            "node.lineno"
        ],
        [
            "BINARY_SUBSCR",
            "self._nodes_by_line[node.lineno]"
        ],
        [
            "LOAD_ATTR",
            "self._nodes_by_line[node.lineno].append"
        ],
        [
            "LOAD_ATTR",
            "visitor.visit"
        ],
        [
            "LOAD_ATTR",
            "self.tree"
        ],
        [
            "LOAD_ATTR",
            "visitor.qualnames"
        ],
        [
            "LOAD_ATTR",
            "encoding_pattern.match"
        ],
        [
            "LOAD_ATTR",
            "cls.for_filename"
        ],
        [
            "LOAD_ATTR",
            "frame.f_code"
        ],
        [
            "LOAD_ATTR",
            "frame.f_code.co_filename"
        ],
        [
            "LOAD_ATTR",
            "frame.f_globals"
        ],
        [
            "LOAD_ATTR",
            "cls._class_local"
        ],
        [
            "BINARY_SUBSCR",
            "source_cache[filename]"
        ],
        [
            "LOAD_ATTR",
            "linecache.getlines"
        ],
        [
            "LOAD_ATTR",
            "''.join"
        ],
        [
            "LOAD_ATTR",
            "linecache.lazycache"
        ],
        [
            "LOAD_ATTR",
            "frame.f_code"
        ],
        [
            "LOAD_ATTR",
            "frame.f_code.co_filename"
        ],
        [
            "LOAD_ATTR",
            "frame.f_globals"
        ],
        [
            "LOAD_ATTR",
            "frame.f_code"
        ],
        [
            "LOAD_ATTR",
            "frame.f_lasti"
        ],
        [
            "LOAD_ATTR",
            "cls._class_local"
        ],
        [
            "BINARY_SUBSCR",
            "executing_cache[key]"
        ],
        [
            "LOAD_ATTR",
            "cls.for_frame"
        ],
        [
            "LOAD_ATTR",
            "source.tree"
        ],
        [
            "LOAD_ATTR",
            "source.statements_at_line"
        ],
        [
            "LOAD_ATTR",
            "frame.f_lineno"
        ],
        [
            "LOAD_ATTR",
            "source.tree"
        ],
        [
            "LOAD_ATTR",
            "NodeFinder(frame, stmts, source.tree).result"
        ],
        [
            "LOAD_ATTR",
            "cls.__dict__"
        ],
        [
            "LOAD_ATTR",
            "cls.__dict__.get"
        ],
        [
            "LOAD_ATTR",
            "self._nodes_by_line"
        ],
        [
            "BINARY_SUBSCR",
            "self._nodes_by_line[lineno]"
        ],
        [
            "LOAD_ATTR",
            "self.text"
        ],
        [
            "LOAD_ATTR",
            "self.tree"
        ],
        [
            "LOAD_ATTR",
            "self.filename"
        ],
        [
            "LOAD_ATTR",
            "io.BytesIO"
        ],
        [
            "LOAD_ATTR",
            "io.BytesIO(source).readline"
        ],
        [
            "LOAD_ATTR",
            "source.decode"
        ],
        [
            "LOAD_ATTR",
            "code.co_filename"
        ],
        [
            "LOAD_ATTR",
            "self.filename"
        ],
        [
            "LOAD_ATTR",
            "self._qualnames"
        ],
        [
            "LOAD_ATTR",
            "self._qualnames.get"
        ],
        [
            "LOAD_ATTR",
            "code.co_name"
        ],
        [
            "LOAD_ATTR",
            "code.co_firstlineno"
        ],
        [
            "LOAD_ATTR",
            "code.co_name"
        ],
        [
            "LOAD_ATTR",
            "self.source"
        ],
        [
            "LOAD_ATTR",
            "self.source.code_qualname"
        ],
        [
            "LOAD_ATTR",
            "self.frame"
        ],
        [
            "LOAD_ATTR",
            "self.frame.f_code"
        ],
        [
            "LOAD_ATTR",
            "self.source"
        ],
        [
            "LOAD_ATTR",
            "self.source.asttokens"
        ],
        [
            "LOAD_ATTR",
            "self.source.asttokens().get_text"
        ],
        [
            "LOAD_ATTR",
            "self.node"
        ],
        [
            "LOAD_ATTR",
            "self.source"
        ],
        [
            "LOAD_ATTR",
            "self.source.asttokens"
        ],
        [
            "LOAD_ATTR",
            "self.source.asttokens().get_text_range"
        ],
        [
            "LOAD_ATTR",
            "self.node"
        ],
        [
            "LOAD_ATTR",
            "super(QualnameVisitor, self).__init__"
        ],
        [
            "LOAD_ATTR",
            "node.name"
        ],
        [
            "LOAD_ATTR",
            "self.stack"
        ],
        [
            "LOAD_ATTR",
            "self.stack.append"
        ],
        [
            "LOAD_ATTR",
            "self.qualnames"
        ],
        [
            "LOAD_ATTR",
            "self.qualnames.setdefault"
        ],
        [
            "LOAD_ATTR",
            "node.lineno"
        ],
        [
            "LOAD_ATTR",
            "\".\".join"
        ],
        [
            "LOAD_ATTR",
            "self.stack"
        ],
        [
            "LOAD_ATTR",
            "self.stack"
        ],
        [
            "LOAD_ATTR",
            "self.stack.append"
        ],
        [
            "LOAD_ATTR",
            "ast.Lambda"
        ],
        [
            "LOAD_ATTR",
            "node.body"
        ],
        [
            "LOAD_ATTR",
            "node.body"
        ],
        [
            "LOAD_ATTR",
            "self.visit"
        ],
        [
            "LOAD_ATTR",
            "self.stack"
        ],
        [
            "LOAD_ATTR",
            "self.stack.pop"
        ],
        [
            "LOAD_ATTR",
            "self.stack"
        ],
        [
            "LOAD_ATTR",
            "self.stack.pop"
        ],
        [
            "LOAD_ATTR",
            "ast.iter_fields"
        ],
        [
            "LOAD_ATTR",
            "ast.AST"
        ],
        [
            "LOAD_ATTR",
            "self.visit"
        ],
        [
            "LOAD_ATTR",
            "ast.AST"
        ],
        [
            "LOAD_ATTR",
            "self.visit"
        ],
        [
            "LOAD_ATTR",
            "self.visit_FunctionDef"
        ],
        [
            "LOAD_ATTR",
            "self.stack"
        ],
        [
            "LOAD_ATTR",
            "self.stack.append"
        ],
        [
            "LOAD_ATTR",
            "node.name"
        ],
        [
            "LOAD_ATTR",
            "self.generic_visit"
        ],
        [
            "LOAD_ATTR",
            "self.stack"
        ],
        [
            "LOAD_ATTR",
            "self.stack.pop"
        ],
        [
            "LOAD_ATTR",
            "getattr(__future__, fname).compiler_flag"
        ],
        [
            "LOAD_ATTR",
            "matching_code.co_filename"
        ],
        [
            "LOAD_ATTR",
            "matching_code.co_flags"
        ],
        [
            "BINARY_AND",
            "future_flags & matching_code.co_flags"
        ],
        [
            "LOAD_ATTR",
            "frame.f_code"
        ],
        [
            "LOAD_ATTR",
            "frame.f_code.co_code"
        ],
        [
            "LOAD_ATTR",
            "frame.f_lasti"
        ],
        [
            "BINARY_SUBSCR",
            "frame.f_code.co_code[frame.f_lasti]"
        ],
        [
            "LOAD_ATTR",
            "dis.opname"
        ],
        [
            "BINARY_SUBSCR",
            "dis.opname[b]"
        ],
        [
            "LOAD_ATTR",
            "op_name.startswith"
        ],
        [
            "LOAD_ATTR",
            "ast.Call"
        ],
        [
            "LOAD_ATTR",
            "ast.Subscript"
        ],
        [
            "LOAD_ATTR",
            "op_name.startswith"
        ],
        [
            "LOAD_ATTR",
            "ast.BinOp"
        ],
        [
            "LOAD_ATTR",
            "op_name.startswith"
        ],
        [
            "LOAD_ATTR",
            "ast.UnaryOp"
        ],
        [
            "LOAD_ATTR",
            "ast.Attribute"
        ],
        [
            "LOAD_ATTR",
            "ast.Compare"
        ],
        [
            "LOAD_ATTR",
            "self.matching_nodes"
        ],
        [
            "LOAD_ATTR",
            "ast.walk"
        ],
        [
            "LOAD_ATTR",
            "node.ctx"
        ],
        [
            "LOAD_ATTR",
            "ast.Load"
        ],
        [
            "UNARY_NOT",
            "not isinstance(node.ctx, ast.Load)"
        ],
        [
            "LOAD_ATTR",
            "ast.BinOp"
        ],
        [
            "LOAD_ATTR",
            "ast.Pow"
        ],
        [
            "LOAD_ATTR",
            "ast.Str"
        ],
        [
            "LOAD_ATTR",
            "ast.fix_missing_locations"
        ],
        [
            "LOAD_ATTR",
            "self.compile_instructions"
        ],
        [
            "BINARY_SUBTRACT",
            "only(indices) - 1"
        ],
        [
            "BINARY_SUBSCR",
            "instructions[arg_index]"
        ],
        [
            "LOAD_ATTR",
            "instructions[arg_index].opname"
        ],
        [
            "BINARY_SUBSCR",
            "instructions[arg_index]"
        ],
        [
            "LOAD_ATTR",
            "instructions[arg_index].offset"
        ],
        [
            "LOAD_ATTR",
            "self.frame"
        ],
        [
            "LOAD_ATTR",
            "self.frame.f_lasti"
        ],
        [
            "LOAD_ATTR",
            "instruction.argval"
        ],
        [
            "LOAD_ATTR",
            "self.tree"
        ],
        [
            "LOAD_ATTR",
            "self.frame"
        ],
        [
            "LOAD_ATTR",
            "self.frame.f_code"
        ],
        [
            "LOAD_ATTR",
            "self.frame"
        ],
        [
            "LOAD_ATTR",
            "self.frame.f_code"
        ],
        [
            "LOAD_ATTR",
            "node.parent"
        ],
        [
            "LOAD_ATTR",
            "ast.iter_fields"
        ],
        [
            "LOAD_ATTR",
            "code_options.append"
        ],
        [
            "LOAD_ATTR",
            "code.co_consts"
        ],
        [
            "LOAD_ATTR",
            "inspect.iscode"
        ],
        [
            "LOAD_ATTR",
            "code_options.append"
        ],
        [
            "LOAD_ATTR",
            "frozenset().union"
        ],
        [
            "LOAD_ATTR",
            "code.co_names"
        ],
        [
            "LOAD_ATTR",
            "code.co_varnames"
        ],
        [
            "LOAD_ATTR",
            "code.co_freevars"
        ],
        [
            "LOAD_ATTR",
            "code.co_cellvars"
        ],
        [
            "LOAD_ATTR",
            "ast.stmt"
        ],
        [
            "LOAD_ATTR",
            "node.parent"
        ]
    ],
    "tests.py": [
        [
            "LOAD_ATTR",
            "unittest.TestCase"
        ],
        [
            "LOAD_ATTR",
            "unittest.TestCase"
        ],
        [
            "LOAD_ATTR",
            "TestFile().test_file"
        ],
        [
            "LOAD_ATTR",
            "tester.asd"
        ],
        [
            "BINARY_SUBSCR",
            "tester[19]"
        ],
        [
            "BINARY_POWER",
            "tester ** 4"
        ],
        [
            "BINARY_MULTIPLY",
            "tester * 3"
        ],
        [
            "BINARY_SUBTRACT",
            "tester - 2"
        ],
        [
            "BINARY_ADD",
            "tester + 1"
        ],
        [
            "UNARY_NEGATIVE",
            "-tester"
        ],
        [
            "UNARY_POSITIVE",
            "+tester"
        ],
        [
            "UNARY_INVERT",
            "~tester"
        ],
        [
            "LOAD_ATTR",
            "tester.foo"
        ],
        [
            "LOAD_ATTR",
            "unittest.main"
        ],
        [
            "LOAD_ATTR",
            "self.assertEqual"
        ],
        [
            "LOAD_ATTR",
            "self.assertEqual"
        ],
        [
            "BINARY_ADD",
            "a+x"
        ],
        [
            "BINARY_ADD",
            "b+x"
        ],
        [
            "BINARY_ADD",
            "c+x"
        ],
        [
            "BINARY_ADD",
            "a+x"
        ],
        [
            "BINARY_ADD",
            "b+x"
        ],
        [
            "BINARY_ADD",
            "c+x"
        ],
        [
            "BINARY_ADD",
            "a+y"
        ],
        [
            "BINARY_ADD",
            "b+y"
        ],
        [
            "BINARY_ADD",
            "c+y"
        ],
        [
            "BINARY_ADD",
            "a+x"
        ],
        [
            "BINARY_ADD",
            "a+x+y"
        ],
        [
            "BINARY_ADD",
            "b+x"
        ],
        [
            "BINARY_ADD",
            "b+x+y"
        ],
        [
            "BINARY_ADD",
            "c+x"
        ],
        [
            "BINARY_ADD",
            "c+x+y"
        ],
        [
            "BINARY_ADD",
            "a+x"
        ],
        [
            "BINARY_ADD",
            "b+x"
        ],
        [
            "BINARY_ADD",
            "c+x"
        ],
        [
            "BINARY_ADD",
            "a+y"
        ],
        [
            "BINARY_ADD",
            "b+y"
        ],
        [
            "BINARY_ADD",
            "c+y"
        ],
        [
            "BINARY_ADD",
            "a+x"
        ],
        [
            "BINARY_ADD",
            "a+x+y"
        ],
        [
            "BINARY_ADD",
            "b+x"
        ],
        [
            "BINARY_ADD",
            "b+x+y"
        ],
        [
            "BINARY_ADD",
            "c+x"
        ],
        [
            "BINARY_ADD",
            "c+x+y"
        ],
        [
            "BINARY_ADD",
            "a+x"
        ],
        [
            "BINARY_ADD",
            "a+x+y"
        ],
        [
            "BINARY_ADD",
            "a+x+y+z"
        ],
        [
            "BINARY_ADD",
            "b+x"
        ],
        [
            "BINARY_ADD",
            "b+x+y"
        ],
        [
            "BINARY_ADD",
            "b+x+y+z"
        ],
        [
            "BINARY_ADD",
            "c+x"
        ],
        [
            "BINARY_ADD",
            "c+x+y"
        ],
        [
            "BINARY_ADD",
            "c+x+y+z"
        ],
        [
            "BINARY_SUBSCR",
            "dict(x=tester)['x']"
        ],
        [
            "LOAD_ATTR",
            "self.assertRaises"
        ],
        [
            "LOAD_ATTR",
            "self.assertRaises"
        ],
        [
            "BINARY_TRUE_DIVIDE",
            "1 / 0"
        ],
        [
            "LOAD_ATTR",
            "time.time"
        ],
        [
            "LOAD_ATTR",
            "Source.executing"
        ],
        [
            "LOAD_ATTR",
            "inspect.currentframe"
        ],
        [
            "LOAD_ATTR",
            "Source.executing(inspect.currentframe()).node"
        ],
        [
            "LOAD_ATTR",
            "self.assertIs"
        ],
        [
            "LOAD_ATTR",
            "self.assertLess"
        ],
        [
            "LOAD_ATTR",
            "time.time"
        ],
        [
            "BINARY_SUBTRACT",
            "time.time() - start"
        ],
        [
            "LOAD_ATTR",
            "source.encode"
        ],
        [
            "LOAD_ATTR",
            "self.assertRaises"
        ],
        [
            "LOAD_ATTR",
            "Source.decode_source"
        ],
        [
            "LOAD_ATTR",
            "Source.decode_source"
        ],
        [
            "LOAD_ATTR",
            "self.assertEqual"
        ],
        [
            "LOAD_ATTR",
            "self.assertNotEqual"
        ],
        [
            "LOAD_ATTR",
            "Source.for_filename"
        ],
        [
            "LOAD_ATTR",
            "Source.for_filename(__file__).code_qualname"
        ],
        [
            "LOAD_ATTR",
            "func.__code__"
        ],
        [
            "LOAD_ATTR",
            "self.assertEqual"
        ],
        [
            "LOAD_ATTR",
            "self.assertEqual"
        ],
        [
            "LOAD_ATTR",
            "func.__qualname__"
        ],
        [
            "LOAD_ATTR",
            "self.assertTrue"
        ],
        [
            "LOAD_ATTR",
            "qn.endswith"
        ],
        [
            "LOAD_ATTR",
            "func.__name__"
        ],
        [
            "LOAD_ATTR",
            "self.assert_qualname"
        ],
        [
            "LOAD_ATTR",
            "C.f"
        ],
        [
            "LOAD_ATTR",
            "self.assert_qualname"
        ],
        [
            "LOAD_ATTR",
            "C.D"
        ],
        [
            "LOAD_ATTR",
            "C.D.g"
        ],
        [
            "LOAD_ATTR",
            "self.assert_qualname"
        ],
        [
            "LOAD_ATTR",
            "self.assert_qualname"
        ],
        [
            "LOAD_ATTR",
            "self.assert_qualname"
        ],
        [
            "LOAD_ATTR",
            "C.D"
        ],
        [
            "LOAD_ATTR",
            "C.D.h"
        ],
        [
            "LOAD_ATTR",
            "self.assert_qualname"
        ],
        [
            "LOAD_ATTR",
            "self.assert_qualname"
        ],
        [
            "LOAD_ATTR",
            "self.assert_qualname"
        ],
        [
            "LOAD_ATTR",
            "foo.x"
        ],
        [
            "LOAD_ATTR",
            "self.assert_qualname"
        ],
        [
            "LOAD_ATTR",
            "self.assert_qualname"
        ],
        [
            "BINARY_MODULO",
            "'tester(6)\\n%s\\ntester(9)' % list(range(66000))"
        ],
        [
            "LOAD_ATTR",
            "tempfile.mkstemp"
        ],
        [
            "LOAD_ATTR",
            "outfile.write"
        ],
        [
            "LOAD_ATTR",
            "self.assertEqual"
        ],
        [
            "LOAD_ATTR",
            "self.assertRaises"
        ],
        [
            "LOAD_ATTR",
            "os.path"
        ],
        [
            "LOAD_ATTR",
            "os.path.join"
        ],
        [
            "LOAD_ATTR",
            "os.path"
        ],
        [
            "LOAD_ATTR",
            "os.path.dirname"
        ],
        [
            "LOAD_ATTR",
            "Source.for_filename"
        ],
        [
            "LOAD_ATTR",
            "self.assertIsNone"
        ],
        [
            "LOAD_ATTR",
            "source.tree"
        ],
        [
            "LOAD_ATTR",
            "inspect.currentframe"
        ],
        [
            "LOAD_ATTR",
            "Source.executing"
        ],
        [
            "LOAD_ATTR",
            "self.assertEqual"
        ],
        [
            "LOAD_ATTR",
            "executing.code_qualname"
        ],
        [
            "LOAD_ATTR",
            "sys.version"
        ],
        [
            "LOAD_ATTR",
            "sys.version.lower"
        ],
        [
            "LOAD_ATTR",
            "self.assertEqual"
        ],
        [
            "LOAD_ATTR",
            "executing.text"
        ],
        [
            "LOAD_ATTR",
            "executing.text_range"
        ],
        [
            "LOAD_ATTR",
            "self.assertEqual"
        ],
        [
            "LOAD_ATTR",
            "executing.source"
        ],
        [
            "LOAD_ATTR",
            "executing.source.text"
        ],
        [
            "BINARY_SUBSCR",
            "executing.source.text[start:end]"
        ],
        [
            "LOAD_ATTR",
            "c.x"
        ],
        [
            "LOAD_ATTR",
            "c.x.x"
        ],
        [
            "LOAD_ATTR",
            "c.x"
        ],
        [
            "LOAD_ATTR",
            "c.x.y"
        ],
        [
            "LOAD_ATTR",
            "c.y"
        ],
        [
            "LOAD_ATTR",
            "c.y.x"
        ],
        [
            "LOAD_ATTR",
            "c.y"
        ],
        [
            "LOAD_ATTR",
            "c.y.y"
        ],
        [
            "LOAD_ATTR",
            "c.x"
        ],
        [
            "LOAD_ATTR",
            "c.x.asd"
        ],
        [
            "LOAD_ATTR",
            "c.y"
        ],
        [
            "LOAD_ATTR",
            "c.y.qwe"
        ],
        [
            "LOAD_ATTR",
            "Source.for_frame"
        ],
        [
            "LOAD_ATTR",
            "inspect.currentframe"
        ],
        [
            "LOAD_ATTR",
            "source.text"
        ],
        [
            "LOAD_ATTR",
            "source.filename"
        ],
        [
            "LOAD_ATTR",
            "inst.starts_line"
        ],
        [
            "LOAD_ATTR",
            "inst.starts_line"
        ],
        [
            "LOAD_ATTR",
            "inst.opname"
        ],
        [
            "LOAD_ATTR",
            "inst.opname.startswith"
        ],
        [
            "LOAD_ATTR",
            "inst.offset"
        ],
        [
            "LOAD_ATTR",
            "inst.opname"
        ],
        [
            "LOAD_ATTR",
            "Source.executing"
        ],
        [
            "LOAD_ATTR",
            "Source.executing(frame).node"
        ],
        [
            "LOAD_ATTR",
            "inspect.currentframe"
        ],
        [
            "LOAD_ATTR",
            "inspect.currentframe().f_back"
        ],
        [
            "LOAD_ATTR",
            "inspect.currentframe().f_back.f_back"
        ],
        [
            "LOAD_ATTR",
            "Source.lazycache"
        ],
        [
            "LOAD_ATTR",
            "Source.executing"
        ],
        [
            "LOAD_ATTR",
            "Source.executing(frame).node"
        ],
        [
            "LOAD_ATTR",
            "inspect.currentframe"
        ],
        [
            "LOAD_ATTR",
            "inspect.currentframe().f_back"
        ],
        [
            "LOAD_ATTR",
            "inspect.currentframe().f_back.f_back"
        ],
        [
            "LOAD_ATTR",
            "ast.Expression"
        ],
        [
            "LOAD_ATTR",
            "frame.f_code"
        ],
        [
            "LOAD_ATTR",
            "frame.f_code.co_filename"
        ],
        [
            "LOAD_ATTR",
            "frame.f_globals"
        ],
        [
            "LOAD_ATTR",
            "frame.f_locals"
        ],
        [
            "LOAD_ATTR",
            "self.get_node"
        ],
        [
            "LOAD_ATTR",
            "ast.Call"
        ],
        [
            "LOAD_ATTR",
            "self.check"
        ],
        [
            "LOAD_ATTR",
            "call.args"
        ],
        [
            "BINARY_SUBSCR",
            "call.args[0]"
        ],
        [
            "LOAD_ATTR",
            "self.check"
        ],
        [
            "LOAD_ATTR",
            "call.func"
        ],
        [
            "LOAD_ATTR",
            "self.get_node"
        ],
        [
            "LOAD_ATTR",
            "ast.Attribute"
        ],
        [
            "LOAD_ATTR",
            "self.check"
        ],
        [
            "LOAD_ATTR",
            "node.value"
        ],
        [
            "LOAD_ATTR",
            "node.attr"
        ],
        [
            "LOAD_ATTR",
            "self.get_node"
        ],
        [
            "LOAD_ATTR",
            "ast.Subscript"
        ],
        [
            "LOAD_ATTR",
            "self.check"
        ],
        [
            "LOAD_ATTR",
            "node.value"
        ],
        [
            "LOAD_ATTR",
            "self.check"
        ],
        [
            "LOAD_ATTR",
            "node.slice"
        ],
        [
            "LOAD_ATTR",
            "node.slice.value"
        ],
        [
            "LOAD_ATTR",
            "self.get_node"
        ],
        [
            "LOAD_ATTR",
            "ast.BinOp"
        ],
        [
            "LOAD_ATTR",
            "self.check"
        ],
        [
            "LOAD_ATTR",
            "node.left"
        ],
        [
            "LOAD_ATTR",
            "self.check"
        ],
        [
            "LOAD_ATTR",
            "node.right"
        ],
        [
            "LOAD_ATTR",
            "self.get_node"
        ],
        [
            "LOAD_ATTR",
            "ast.UnaryOp"
        ],
        [
            "LOAD_ATTR",
            "self.check"
        ],
        [
            "LOAD_ATTR",
            "node.operand"
        ],
        [
            "LOAD_ATTR",
            "self.get_node"
        ],
        [
            "LOAD_ATTR",
            "ast.Compare"
        ],
        [
            "LOAD_ATTR",
            "self.check"
        ],
        [
            "LOAD_ATTR",
            "node.left"
        ],
        [
            "LOAD_ATTR",
            "self.check"
        ],
        [
            "LOAD_ATTR",
            "node.comparators"
        ],
        [
            "BINARY_SUBSCR",
            "node.comparators[0]"
        ]
    ]
}