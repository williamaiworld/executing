[
    [
        "LOAD_NAME",
        "frozenset"
    ],
    [
        "LOAD_NAME",
        "range"
    ],
    [
        "CALL_FUNCTION",
        "range(32)"
    ],
    [
        "CALL_FUNCTION",
        "frozenset(chr(i) for i in range(32))"
    ],
    [
        "LOAD_NAME",
        "frozenset"
    ],
    [
        "LOAD_NAME",
        "chr"
    ],
    [
        "CALL_FUNCTION",
        "chr(127)"
    ],
    [
        "CALL_FUNCTION",
        "frozenset(chr(127))"
    ],
    [
        "BINARY_OR",
        "frozenset(chr(i) for i in range(32)) | frozenset(chr(127))"
    ],
    [
        "LOAD_NAME",
        "ASCII_CTRL"
    ],
    [
        "LOAD_NAME",
        "frozenset"
    ],
    [
        "CALL_FUNCTION",
        "frozenset(\"\\t\")"
    ],
    [
        "BINARY_SUBTRACT",
        "ASCII_CTRL - frozenset(\"\\t\")"
    ],
    [
        "LOAD_NAME",
        "ASCII_CTRL"
    ],
    [
        "LOAD_NAME",
        "frozenset"
    ],
    [
        "CALL_FUNCTION",
        "frozenset(\"\\t\\n\")"
    ],
    [
        "BINARY_SUBTRACT",
        "ASCII_CTRL - frozenset(\"\\t\\n\")"
    ],
    [
        "LOAD_NAME",
        "ILLEGAL_BASIC_STR_CHARS"
    ],
    [
        "LOAD_NAME",
        "ILLEGAL_MULTILINE_BASIC_STR_CHARS"
    ],
    [
        "LOAD_NAME",
        "ILLEGAL_BASIC_STR_CHARS"
    ],
    [
        "LOAD_NAME",
        "frozenset"
    ],
    [
        "CALL_FUNCTION",
        "frozenset(\" \\t\")"
    ],
    [
        "LOAD_NAME",
        "TOML_WS"
    ],
    [
        "LOAD_NAME",
        "frozenset"
    ],
    [
        "CALL_FUNCTION",
        "frozenset(\"\\n\")"
    ],
    [
        "BINARY_OR",
        "TOML_WS | frozenset(\"\\n\")"
    ],
    [
        "LOAD_NAME",
        "frozenset"
    ],
    [
        "LOAD_NAME",
        "string"
    ],
    [
        "LOAD_ATTR",
        "string.ascii_letters"
    ],
    [
        "LOAD_NAME",
        "string"
    ],
    [
        "LOAD_ATTR",
        "string.digits"
    ],
    [
        "BINARY_ADD",
        "string.ascii_letters + string.digits"
    ],
    [
        "BINARY_ADD",
        "string.ascii_letters + string.digits + \"-_\""
    ],
    [
        "CALL_FUNCTION",
        "frozenset(string.ascii_letters + string.digits + \"-_\")"
    ],
    [
        "LOAD_NAME",
        "BARE_KEY_CHARS"
    ],
    [
        "LOAD_NAME",
        "frozenset"
    ],
    [
        "CALL_FUNCTION",
        "frozenset(\"\\\"'\")"
    ],
    [
        "BINARY_OR",
        "BARE_KEY_CHARS | frozenset(\"\\\"'\")"
    ],
    [
        "LOAD_NAME",
        "frozenset"
    ],
    [
        "LOAD_NAME",
        "string"
    ],
    [
        "LOAD_ATTR",
        "string.hexdigits"
    ],
    [
        "CALL_FUNCTION",
        "frozenset(string.hexdigits)"
    ],
    [
        "LOAD_NAME",
        "MappingProxyType"
    ],
    [
        "CALL_FUNCTION",
        "MappingProxyType(\n    {\n        \"\\\\b\": \"\\u0008\",  # backspace\n        \"\\\\t\": \"\\u0009\",  # tab\n        \"\\\\n\": \"\\u000A\",  # linefeed\n        \"\\\\f\": \"\\u000C\",  # form feed\n        \"\\\\r\": \"\\u000D\",  # carriage return\n        '\\\\\"': \"\\u0022\",  # quote\n        \"\\\\\\\\\": \"\\u005C\",  # backslash\n    }\n)"
    ],
    [
        "LOAD_NAME",
        "ValueError"
    ],
    [
        "LOAD_NAME",
        "float"
    ],
    [
        "LOAD_NAME",
        "float"
    ],
    [
        "LOAD_NAME",
        "NamedTuple"
    ],
    [
        "LOAD_GLOBAL",
        "chr"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "CALL_FUNCTION",
        "chr(i)"
    ],
    [
        "LOAD_FAST",
        "fp"
    ],
    [
        "LOAD_METHOD",
        "fp.read"
    ],
    [
        "CALL_METHOD",
        "fp.read()"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "LOAD_METHOD",
        "b.decode"
    ],
    [
        "CALL_METHOD",
        "b.decode()"
    ],
    [
        "LOAD_GLOBAL",
        "AttributeError"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\n            \"File must be opened in binary mode, e.g. use `open('foo.toml', 'rb')`\"\n        )"
    ],
    [
        "LOAD_GLOBAL",
        "loads"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "CALL_FUNCTION_KW",
        "loads(s, parse_float=parse_float)"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_METHOD",
        "s.replace"
    ],
    [
        "CALL_METHOD",
        "s.replace(\"\\r\\n\", \"\\n\")"
    ],
    [
        "LOAD_GLOBAL",
        "Output"
    ],
    [
        "LOAD_GLOBAL",
        "NestedDict"
    ],
    [
        "CALL_FUNCTION",
        "NestedDict()"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "CALL_FUNCTION",
        "Flags()"
    ],
    [
        "CALL_FUNCTION",
        "Output(NestedDict(), Flags())"
    ],
    [
        "LOAD_GLOBAL",
        "make_safe_parse_float"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "CALL_FUNCTION",
        "make_safe_parse_float(parse_float)"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.data"
    ],
    [
        "LOAD_ATTR",
        "out.data.dict"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == \"\\n\""
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "LOAD_GLOBAL",
        "KEY_INITIAL_CHARS"
    ],
    [
        "CONTAINS_OP",
        "char in KEY_INITIAL_CHARS"
    ],
    [
        "LOAD_GLOBAL",
        "key_value_rule"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_FAST",
        "header"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "CALL_FUNCTION",
        "key_value_rule(src, pos, out, header, parse_float)"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == \"[\""
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos + 1]"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_METHOD",
        "out.flags.finalize_pending"
    ],
    [
        "CALL_METHOD",
        "out.flags.finalize_pending()"
    ],
    [
        "LOAD_FAST",
        "second_char"
    ],
    [
        "COMPARE_OP",
        "second_char == \"[\""
    ],
    [
        "LOAD_GLOBAL",
        "create_list_rule"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "CALL_FUNCTION",
        "create_list_rule(src, pos, out)"
    ],
    [
        "LOAD_GLOBAL",
        "create_dict_rule"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "CALL_FUNCTION",
        "create_dict_rule(src, pos, out)"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char != \"#\""
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Invalid statement\")"
    ],
    [
        "LOAD_GLOBAL",
        "skip_comment"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "skip_comment(src, pos)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.data"
    ],
    [
        "LOAD_ATTR",
        "out.data.dict"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char != \"\\n\""
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(\n                src, pos, \"Expected newline or end of document after a statement\"\n            )"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._flags"
    ],
    [
        "LOAD_GLOBAL",
        "set"
    ],
    [
        "CALL_FUNCTION",
        "set()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._pending_flags"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._pending_flags"
    ],
    [
        "LOAD_METHOD",
        "self._pending_flags.add"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_FAST",
        "flag"
    ],
    [
        "CALL_METHOD",
        "self._pending_flags.add((key, flag))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._pending_flags"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.set"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_FAST",
        "flag"
    ],
    [
        "CALL_FUNCTION_KW",
        "self.set(key, flag, recursive=False)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._pending_flags"
    ],
    [
        "LOAD_METHOD",
        "self._pending_flags.clear"
    ],
    [
        "CALL_METHOD",
        "self._pending_flags.clear()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._flags"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[:-1]"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "CONTAINS_OP",
        "k not in cont"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "BINARY_SUBSCR",
        "cont[k]"
    ],
    [
        "BINARY_SUBSCR",
        "cont[k][\"nested\"]"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_METHOD",
        "cont.pop"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[-1]"
    ],
    [
        "CALL_METHOD",
        "cont.pop(key[-1], None)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._flags"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[:-1]"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[-1]"
    ],
    [
        "LOAD_FAST",
        "key_parent"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "CONTAINS_OP",
        "k not in cont"
    ],
    [
        "LOAD_GLOBAL",
        "set"
    ],
    [
        "CALL_FUNCTION",
        "set()"
    ],
    [
        "LOAD_GLOBAL",
        "set"
    ],
    [
        "CALL_FUNCTION",
        "set()"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "STORE_SUBSCR",
        "cont[k]"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "BINARY_SUBSCR",
        "cont[k]"
    ],
    [
        "BINARY_SUBSCR",
        "cont[k][\"nested\"]"
    ],
    [
        "LOAD_FAST",
        "key_stem"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "CONTAINS_OP",
        "key_stem not in cont"
    ],
    [
        "LOAD_GLOBAL",
        "set"
    ],
    [
        "CALL_FUNCTION",
        "set()"
    ],
    [
        "LOAD_GLOBAL",
        "set"
    ],
    [
        "CALL_FUNCTION",
        "set()"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "key_stem"
    ],
    [
        "STORE_SUBSCR",
        "cont[key_stem]"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "key_stem"
    ],
    [
        "BINARY_SUBSCR",
        "cont[key_stem]"
    ],
    [
        "LOAD_FAST",
        "recursive"
    ],
    [
        "BINARY_SUBSCR",
        "cont[key_stem][\"recursive_flags\" if recursive else \"flags\"]"
    ],
    [
        "LOAD_METHOD",
        "cont[key_stem][\"recursive_flags\" if recursive else \"flags\"].add"
    ],
    [
        "LOAD_FAST",
        "flag"
    ],
    [
        "CALL_METHOD",
        "cont[key_stem][\"recursive_flags\" if recursive else \"flags\"].add(flag)"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._flags"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[:-1]"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "CONTAINS_OP",
        "k not in cont"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "BINARY_SUBSCR",
        "cont[k]"
    ],
    [
        "LOAD_FAST",
        "flag"
    ],
    [
        "LOAD_FAST",
        "inner_cont"
    ],
    [
        "BINARY_SUBSCR",
        "inner_cont[\"recursive_flags\"]"
    ],
    [
        "CONTAINS_OP",
        "flag in inner_cont[\"recursive_flags\"]"
    ],
    [
        "LOAD_FAST",
        "inner_cont"
    ],
    [
        "BINARY_SUBSCR",
        "inner_cont[\"nested\"]"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[-1]"
    ],
    [
        "LOAD_FAST",
        "key_stem"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "CONTAINS_OP",
        "key_stem in cont"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "key_stem"
    ],
    [
        "BINARY_SUBSCR",
        "cont[key_stem]"
    ],
    [
        "LOAD_FAST",
        "flag"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "BINARY_SUBSCR",
        "cont[\"flags\"]"
    ],
    [
        "CONTAINS_OP",
        "flag in cont[\"flags\"]"
    ],
    [
        "LOAD_FAST",
        "flag"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "BINARY_SUBSCR",
        "cont[\"recursive_flags\"]"
    ],
    [
        "CONTAINS_OP",
        "flag in cont[\"recursive_flags\"]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.dict"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.dict"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "CONTAINS_OP",
        "k not in cont"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "STORE_SUBSCR",
        "cont[k]"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "BINARY_SUBSCR",
        "cont[k]"
    ],
    [
        "LOAD_FAST",
        "access_lists"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(cont, list)"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "BINARY_SUBSCR",
        "cont[-1]"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(cont, dict)"
    ],
    [
        "LOAD_GLOBAL",
        "KeyError"
    ],
    [
        "CALL_FUNCTION",
        "KeyError(\"There is no nest behind this key\")"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.get_or_create_nest"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[:-1]"
    ],
    [
        "CALL_METHOD",
        "self.get_or_create_nest(key[:-1])"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[-1]"
    ],
    [
        "LOAD_FAST",
        "last_key"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "CONTAINS_OP",
        "last_key in cont"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "last_key"
    ],
    [
        "BINARY_SUBSCR",
        "cont[last_key]"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "list_"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(list_, list)"
    ],
    [
        "LOAD_GLOBAL",
        "KeyError"
    ],
    [
        "CALL_FUNCTION",
        "KeyError(\"An object other than list found behind this key\")"
    ],
    [
        "LOAD_FAST",
        "list_"
    ],
    [
        "LOAD_METHOD",
        "list_.append"
    ],
    [
        "CALL_METHOD",
        "list_.append({})"
    ],
    [
        "LOAD_FAST",
        "cont"
    ],
    [
        "LOAD_FAST",
        "last_key"
    ],
    [
        "STORE_SUBSCR",
        "cont[last_key]"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_FAST",
        "chars"
    ],
    [
        "CONTAINS_OP",
        "src[pos] in chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_FAST",
        "chars"
    ],
    [
        "CONTAINS_OP",
        "src[pos] in chars"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.index"
    ],
    [
        "LOAD_FAST",
        "expect"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.index(expect, pos)"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "CALL_FUNCTION",
        "len(src)"
    ],
    [
        "LOAD_FAST",
        "error_on_eof"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "new_pos"
    ],
    [
        "LOAD_FAST",
        "expect"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, new_pos, f\"Expected {expect!r}\")"
    ],
    [
        "LOAD_FAST",
        "error_on"
    ],
    [
        "LOAD_METHOD",
        "error_on.isdisjoint"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "new_pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos:new_pos]"
    ],
    [
        "CALL_METHOD",
        "error_on.isdisjoint(src[pos:new_pos])"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_FAST",
        "error_on"
    ],
    [
        "CONTAINS_OP",
        "src[pos] not in error_on"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_FAST",
        "error_on"
    ],
    [
        "CONTAINS_OP",
        "src[pos] not in error_on"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, f\"Found invalid character {src[pos]!r}\")"
    ],
    [
        "LOAD_FAST",
        "new_pos"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == \"#\""
    ],
    [
        "LOAD_GLOBAL",
        "skip_until"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "LOAD_GLOBAL",
        "ILLEGAL_COMMENT_CHARS"
    ],
    [
        "CALL_FUNCTION_KW",
        "skip_until(\n            src, pos + 1, \"\\n\", error_on=ILLEGAL_COMMENT_CHARS, error_on_eof=False\n        )"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS_AND_NEWLINE"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS_AND_NEWLINE)"
    ],
    [
        "LOAD_GLOBAL",
        "skip_comment"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "skip_comment(src, pos)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos_before_skip"
    ],
    [
        "COMPARE_OP",
        "pos == pos_before_skip"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_GLOBAL",
        "parse_key"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_key(src, pos)"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_METHOD",
        "out.flags.is_"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.EXPLICIT_NEST"
    ],
    [
        "CALL_METHOD",
        "out.flags.is_(key, Flags.EXPLICIT_NEST)"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_METHOD",
        "out.flags.is_"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.FROZEN"
    ],
    [
        "CALL_METHOD",
        "out.flags.is_(key, Flags.FROZEN)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, f\"Cannot declare {key} twice\")"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_ATTR",
        "out.flags.set"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.EXPLICIT_NEST"
    ],
    [
        "CALL_FUNCTION_KW",
        "out.flags.set(key, Flags.EXPLICIT_NEST, recursive=False)"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.data"
    ],
    [
        "LOAD_METHOD",
        "out.data.get_or_create_nest"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "CALL_METHOD",
        "out.data.get_or_create_nest(key)"
    ],
    [
        "LOAD_GLOBAL",
        "KeyError"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Cannot overwrite a value\")"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(\"]\", pos)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Expected ']' at the end of a table declaration\")"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_GLOBAL",
        "parse_key"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_key(src, pos)"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_METHOD",
        "out.flags.is_"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.FROZEN"
    ],
    [
        "CALL_METHOD",
        "out.flags.is_(key, Flags.FROZEN)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, f\"Cannot mutate immutable namespace {key}\")"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_METHOD",
        "out.flags.unset_all"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "CALL_METHOD",
        "out.flags.unset_all(key)"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_ATTR",
        "out.flags.set"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.EXPLICIT_NEST"
    ],
    [
        "CALL_FUNCTION_KW",
        "out.flags.set(key, Flags.EXPLICIT_NEST, recursive=False)"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.data"
    ],
    [
        "LOAD_METHOD",
        "out.data.append_nest_to_list"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "CALL_METHOD",
        "out.data.append_nest_to_list(key)"
    ],
    [
        "LOAD_GLOBAL",
        "KeyError"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Cannot overwrite a value\")"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(\"]]\", pos)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Expected ']]' at the end of an array declaration\")"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 2"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "parse_key_value_pair"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "CALL_FUNCTION",
        "parse_key_value_pair(src, pos, parse_float)"
    ],
    [
        "LOAD_DEREF",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[:-1]"
    ],
    [
        "LOAD_DEREF",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[-1]"
    ],
    [
        "LOAD_DEREF",
        "header"
    ],
    [
        "LOAD_FAST",
        "key_parent"
    ],
    [
        "BINARY_ADD",
        "header + key_parent"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_DEREF",
        "key"
    ],
    [
        "CALL_FUNCTION",
        "len(key)"
    ],
    [
        "CALL_FUNCTION",
        "range(1, len(key))"
    ],
    [
        "LOAD_FAST",
        "relative_path_cont_keys"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_METHOD",
        "out.flags.is_"
    ],
    [
        "LOAD_FAST",
        "cont_key"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.EXPLICIT_NEST"
    ],
    [
        "CALL_METHOD",
        "out.flags.is_(cont_key, Flags.EXPLICIT_NEST)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "cont_key"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, f\"Cannot redefine namespace {cont_key}\")"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_METHOD",
        "out.flags.add_pending"
    ],
    [
        "LOAD_FAST",
        "cont_key"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.EXPLICIT_NEST"
    ],
    [
        "CALL_METHOD",
        "out.flags.add_pending(cont_key, Flags.EXPLICIT_NEST)"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_METHOD",
        "out.flags.is_"
    ],
    [
        "LOAD_FAST",
        "abs_key_parent"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.FROZEN"
    ],
    [
        "CALL_METHOD",
        "out.flags.is_(abs_key_parent, Flags.FROZEN)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "abs_key_parent"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(\n            src, pos, f\"Cannot mutate immutable namespace {abs_key_parent}\"\n        )"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.data"
    ],
    [
        "LOAD_METHOD",
        "out.data.get_or_create_nest"
    ],
    [
        "LOAD_FAST",
        "abs_key_parent"
    ],
    [
        "CALL_METHOD",
        "out.data.get_or_create_nest(abs_key_parent)"
    ],
    [
        "LOAD_GLOBAL",
        "KeyError"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Cannot overwrite a value\")"
    ],
    [
        "LOAD_FAST",
        "key_stem"
    ],
    [
        "LOAD_FAST",
        "nest"
    ],
    [
        "CONTAINS_OP",
        "key_stem in nest"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Cannot overwrite a value\")"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(value, (dict, list))"
    ],
    [
        "LOAD_FAST",
        "out"
    ],
    [
        "LOAD_ATTR",
        "out.flags"
    ],
    [
        "LOAD_ATTR",
        "out.flags.set"
    ],
    [
        "LOAD_DEREF",
        "header"
    ],
    [
        "LOAD_DEREF",
        "key"
    ],
    [
        "BINARY_ADD",
        "header + key"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.FROZEN"
    ],
    [
        "CALL_FUNCTION_KW",
        "out.flags.set(header + key, Flags.FROZEN, recursive=True)"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_FAST",
        "nest"
    ],
    [
        "LOAD_FAST",
        "key_stem"
    ],
    [
        "STORE_SUBSCR",
        "nest[key_stem]"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_DEREF",
        "header"
    ],
    [
        "LOAD_DEREF",
        "key"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_SUBSCR",
        "key[:i]"
    ],
    [
        "BINARY_ADD",
        "header + key[:i]"
    ],
    [
        "LOAD_GLOBAL",
        "parse_key"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_key(src, pos)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char != \"=\""
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Expected '=' after a key in a key/value pair\")"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_GLOBAL",
        "parse_value"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "CALL_FUNCTION",
        "parse_value(src, pos, parse_float)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_GLOBAL",
        "parse_key_part"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_key_part(src, pos)"
    ],
    [
        "LOAD_FAST",
        "key_part"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char != \".\""
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_GLOBAL",
        "parse_key_part"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_key_part(src, pos)"
    ],
    [
        "LOAD_FAST",
        "key_part"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "LOAD_GLOBAL",
        "BARE_KEY_CHARS"
    ],
    [
        "CONTAINS_OP",
        "char in BARE_KEY_CHARS"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "BARE_KEY_CHARS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, BARE_KEY_CHARS)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "start_pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[start_pos:pos]"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == \"'\""
    ],
    [
        "LOAD_GLOBAL",
        "parse_literal_str"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_literal_str(src, pos)"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == '\"'"
    ],
    [
        "LOAD_GLOBAL",
        "parse_one_line_basic_str"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_one_line_basic_str(src, pos)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Invalid initial character for a key part\")"
    ],
    [
        "LOAD_GLOBAL",
        "parse_basic_str"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION_KW",
        "parse_basic_str(src, pos, multiline=False)"
    ],
    [
        "LOAD_GLOBAL",
        "skip_comments_and_array_ws"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "skip_comments_and_array_ws(src, pos)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(\"]\", pos)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "LOAD_FAST",
        "array"
    ],
    [
        "LOAD_GLOBAL",
        "parse_value"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "CALL_FUNCTION",
        "parse_value(src, pos, parse_float)"
    ],
    [
        "LOAD_FAST",
        "array"
    ],
    [
        "LOAD_METHOD",
        "array.append"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "CALL_METHOD",
        "array.append(val)"
    ],
    [
        "LOAD_GLOBAL",
        "skip_comments_and_array_ws"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "skip_comments_and_array_ws(src, pos)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos : pos + 1]"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "COMPARE_OP",
        "c == \"]\""
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "LOAD_FAST",
        "array"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "COMPARE_OP",
        "c != \",\""
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Unclosed array\")"
    ],
    [
        "LOAD_GLOBAL",
        "skip_comments_and_array_ws"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "skip_comments_and_array_ws(src, pos)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(\"]\", pos)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "LOAD_FAST",
        "array"
    ],
    [
        "LOAD_GLOBAL",
        "NestedDict"
    ],
    [
        "CALL_FUNCTION",
        "NestedDict()"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "CALL_FUNCTION",
        "Flags()"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(\"}\", pos)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "LOAD_FAST",
        "nested_dict"
    ],
    [
        "LOAD_ATTR",
        "nested_dict.dict"
    ],
    [
        "LOAD_GLOBAL",
        "parse_key_value_pair"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "CALL_FUNCTION",
        "parse_key_value_pair(src, pos, parse_float)"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[:-1]"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "BINARY_SUBSCR",
        "key[-1]"
    ],
    [
        "LOAD_FAST",
        "flags"
    ],
    [
        "LOAD_METHOD",
        "flags.is_"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.FROZEN"
    ],
    [
        "CALL_METHOD",
        "flags.is_(key, Flags.FROZEN)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, f\"Cannot mutate immutable namespace {key}\")"
    ],
    [
        "LOAD_FAST",
        "nested_dict"
    ],
    [
        "LOAD_ATTR",
        "nested_dict.get_or_create_nest"
    ],
    [
        "LOAD_FAST",
        "key_parent"
    ],
    [
        "CALL_FUNCTION_KW",
        "nested_dict.get_or_create_nest(key_parent, access_lists=False)"
    ],
    [
        "LOAD_GLOBAL",
        "KeyError"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Cannot overwrite a value\")"
    ],
    [
        "LOAD_FAST",
        "key_stem"
    ],
    [
        "LOAD_FAST",
        "nest"
    ],
    [
        "CONTAINS_OP",
        "key_stem in nest"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "key_stem"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, f\"Duplicate inline table key {key_stem!r}\")"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_FAST",
        "nest"
    ],
    [
        "LOAD_FAST",
        "key_stem"
    ],
    [
        "STORE_SUBSCR",
        "nest[key_stem]"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos : pos + 1]"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "COMPARE_OP",
        "c == \"}\""
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "LOAD_FAST",
        "nested_dict"
    ],
    [
        "LOAD_ATTR",
        "nested_dict.dict"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "COMPARE_OP",
        "c != \",\""
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Unclosed inline table\")"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(value, (dict, list))"
    ],
    [
        "LOAD_FAST",
        "flags"
    ],
    [
        "LOAD_ATTR",
        "flags.set"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "Flags"
    ],
    [
        "LOAD_ATTR",
        "Flags.FROZEN"
    ],
    [
        "CALL_FUNCTION_KW",
        "flags.set(key, Flags.FROZEN, recursive=True)"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 2"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos : pos + 2]"
    ],
    [
        "LOAD_FAST",
        "multiline"
    ],
    [
        "LOAD_FAST",
        "escape_id"
    ],
    [
        "CONTAINS_OP",
        "escape_id in {\"\\\\ \", \"\\\\\\t\", \"\\\\\\n\"}"
    ],
    [
        "LOAD_FAST",
        "escape_id"
    ],
    [
        "COMPARE_OP",
        "escape_id != \"\\\\\\n\""
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char != \"\\n\""
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Unescaped '\\\\' in a string\")"
    ],
    [
        "LOAD_GLOBAL",
        "skip_chars"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "TOML_WS_AND_NEWLINE"
    ],
    [
        "CALL_FUNCTION",
        "skip_chars(src, pos, TOML_WS_AND_NEWLINE)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "escape_id"
    ],
    [
        "COMPARE_OP",
        "escape_id == \"\\\\u\""
    ],
    [
        "LOAD_GLOBAL",
        "parse_hex_char"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_hex_char(src, pos, 4)"
    ],
    [
        "LOAD_FAST",
        "escape_id"
    ],
    [
        "COMPARE_OP",
        "escape_id == \"\\\\U\""
    ],
    [
        "LOAD_GLOBAL",
        "parse_hex_char"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_hex_char(src, pos, 8)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "BASIC_STR_ESCAPE_REPLACEMENTS"
    ],
    [
        "LOAD_FAST",
        "escape_id"
    ],
    [
        "BINARY_SUBSCR",
        "BASIC_STR_ESCAPE_REPLACEMENTS[escape_id]"
    ],
    [
        "LOAD_GLOBAL",
        "KeyError"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Unescaped '\\\\' in a string\")"
    ],
    [
        "LOAD_GLOBAL",
        "parse_basic_str_escape"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION_KW",
        "parse_basic_str_escape(src, pos, multiline=True)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "hex_len"
    ],
    [
        "BINARY_ADD",
        "pos + hex_len"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos : pos + hex_len]"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "hex_str"
    ],
    [
        "CALL_FUNCTION",
        "len(hex_str)"
    ],
    [
        "LOAD_FAST",
        "hex_len"
    ],
    [
        "COMPARE_OP",
        "len(hex_str) != hex_len"
    ],
    [
        "LOAD_GLOBAL",
        "HEXDIGIT_CHARS"
    ],
    [
        "LOAD_METHOD",
        "HEXDIGIT_CHARS.issuperset"
    ],
    [
        "LOAD_FAST",
        "hex_str"
    ],
    [
        "CALL_METHOD",
        "HEXDIGIT_CHARS.issuperset(hex_str)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Invalid hex value\")"
    ],
    [
        "LOAD_FAST",
        "hex_len"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "hex_str"
    ],
    [
        "CALL_FUNCTION",
        "int(hex_str, 16)"
    ],
    [
        "LOAD_GLOBAL",
        "is_unicode_scalar_value"
    ],
    [
        "LOAD_FAST",
        "hex_int"
    ],
    [
        "CALL_FUNCTION",
        "is_unicode_scalar_value(hex_int)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Escaped character is not a Unicode scalar value\")"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "chr"
    ],
    [
        "LOAD_FAST",
        "hex_int"
    ],
    [
        "CALL_FUNCTION",
        "chr(hex_int)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "skip_until"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "ILLEGAL_LITERAL_STR_CHARS"
    ],
    [
        "CALL_FUNCTION_KW",
        "skip_until(\n        src, pos, \"'\", error_on=ILLEGAL_LITERAL_STR_CHARS, error_on_eof=True\n    )"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "start_pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[start_pos:pos]"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(\"\\n\", pos)"
    ],
    [
        "LOAD_FAST",
        "literal"
    ],
    [
        "LOAD_GLOBAL",
        "skip_until"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "ILLEGAL_MULTILINE_LITERAL_STR_CHARS"
    ],
    [
        "CALL_FUNCTION_KW",
        "skip_until(\n            src,\n            pos,\n            \"'''\",\n            error_on=ILLEGAL_MULTILINE_LITERAL_STR_CHARS,\n            error_on_eof=True,\n        )"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "end_pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos:end_pos]"
    ],
    [
        "LOAD_FAST",
        "end_pos"
    ],
    [
        "BINARY_ADD",
        "end_pos + 3"
    ],
    [
        "LOAD_GLOBAL",
        "parse_basic_str"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION_KW",
        "parse_basic_str(src, pos, multiline=True)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "delim"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(delim, pos)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "delim"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(delim, pos)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "delim"
    ],
    [
        "BINARY_ADD",
        "result + delim"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "delim"
    ],
    [
        "BINARY_MULTIPLY",
        "delim * 2"
    ],
    [
        "BINARY_ADD",
        "result + (delim * 2)"
    ],
    [
        "LOAD_FAST",
        "multiline"
    ],
    [
        "LOAD_GLOBAL",
        "ILLEGAL_MULTILINE_BASIC_STR_CHARS"
    ],
    [
        "LOAD_GLOBAL",
        "parse_basic_str_escape_multiline"
    ],
    [
        "LOAD_GLOBAL",
        "ILLEGAL_BASIC_STR_CHARS"
    ],
    [
        "LOAD_GLOBAL",
        "parse_basic_str_escape"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Unterminated string\")"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == '\"'"
    ],
    [
        "LOAD_FAST",
        "multiline"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "start_pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[start_pos:pos]"
    ],
    [
        "BINARY_ADD",
        "result + src[start_pos:pos]"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith('\"\"\"', pos)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 3"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "start_pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[start_pos:pos]"
    ],
    [
        "BINARY_ADD",
        "result + src[start_pos:pos]"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == \"\\\\\""
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "start_pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[start_pos:pos]"
    ],
    [
        "LOAD_FAST",
        "parse_escapes"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_escapes(src, pos)"
    ],
    [
        "LOAD_FAST",
        "parsed_escape"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "LOAD_FAST",
        "error_on"
    ],
    [
        "CONTAINS_OP",
        "char in error_on"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, f\"Illegal character {char!r}\")"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos]"
    ],
    [
        "LOAD_GLOBAL",
        "IndexError"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == '\"'"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith('\"\"\"', pos)"
    ],
    [
        "LOAD_GLOBAL",
        "parse_multiline_str"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION_KW",
        "parse_multiline_str(src, pos, literal=False)"
    ],
    [
        "LOAD_GLOBAL",
        "parse_one_line_basic_str"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_one_line_basic_str(src, pos)"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == \"'\""
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(\"'''\", pos)"
    ],
    [
        "LOAD_GLOBAL",
        "parse_multiline_str"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION_KW",
        "parse_multiline_str(src, pos, literal=True)"
    ],
    [
        "LOAD_GLOBAL",
        "parse_literal_str"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "parse_literal_str(src, pos)"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == \"t\""
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(\"true\", pos)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 4"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == \"f\""
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.startswith"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.startswith(\"false\", pos)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 5"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == \"[\""
    ],
    [
        "LOAD_GLOBAL",
        "parse_array"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "CALL_FUNCTION",
        "parse_array(src, pos, parse_float)"
    ],
    [
        "LOAD_FAST",
        "char"
    ],
    [
        "COMPARE_OP",
        "char == \"{\""
    ],
    [
        "LOAD_GLOBAL",
        "parse_inline_table"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "CALL_FUNCTION",
        "parse_inline_table(src, pos, parse_float)"
    ],
    [
        "LOAD_GLOBAL",
        "RE_DATETIME"
    ],
    [
        "LOAD_METHOD",
        "RE_DATETIME.match"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "RE_DATETIME.match(src, pos)"
    ],
    [
        "LOAD_FAST",
        "datetime_match"
    ],
    [
        "LOAD_GLOBAL",
        "match_to_datetime"
    ],
    [
        "LOAD_FAST",
        "datetime_match"
    ],
    [
        "CALL_FUNCTION",
        "match_to_datetime(datetime_match)"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Invalid date or datetime\")"
    ],
    [
        "LOAD_FAST",
        "e"
    ],
    [
        "LOAD_FAST",
        "datetime_match"
    ],
    [
        "LOAD_METHOD",
        "datetime_match.end"
    ],
    [
        "CALL_METHOD",
        "datetime_match.end()"
    ],
    [
        "LOAD_FAST",
        "datetime_obj"
    ],
    [
        "LOAD_GLOBAL",
        "RE_LOCALTIME"
    ],
    [
        "LOAD_METHOD",
        "RE_LOCALTIME.match"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "RE_LOCALTIME.match(src, pos)"
    ],
    [
        "LOAD_FAST",
        "localtime_match"
    ],
    [
        "LOAD_FAST",
        "localtime_match"
    ],
    [
        "LOAD_METHOD",
        "localtime_match.end"
    ],
    [
        "CALL_METHOD",
        "localtime_match.end()"
    ],
    [
        "LOAD_GLOBAL",
        "match_to_localtime"
    ],
    [
        "LOAD_FAST",
        "localtime_match"
    ],
    [
        "CALL_FUNCTION",
        "match_to_localtime(localtime_match)"
    ],
    [
        "LOAD_GLOBAL",
        "RE_NUMBER"
    ],
    [
        "LOAD_METHOD",
        "RE_NUMBER.match"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "RE_NUMBER.match(src, pos)"
    ],
    [
        "LOAD_FAST",
        "number_match"
    ],
    [
        "LOAD_FAST",
        "number_match"
    ],
    [
        "LOAD_METHOD",
        "number_match.end"
    ],
    [
        "CALL_METHOD",
        "number_match.end()"
    ],
    [
        "LOAD_GLOBAL",
        "match_to_number"
    ],
    [
        "LOAD_FAST",
        "number_match"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "CALL_FUNCTION",
        "match_to_number(number_match, parse_float)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 3"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos : pos + 3]"
    ],
    [
        "LOAD_FAST",
        "first_three"
    ],
    [
        "CONTAINS_OP",
        "first_three in {\"inf\", \"nan\"}"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 3"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "LOAD_FAST",
        "first_three"
    ],
    [
        "CALL_FUNCTION",
        "parse_float(first_three)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 4"
    ],
    [
        "BINARY_SUBSCR",
        "src[pos : pos + 4]"
    ],
    [
        "LOAD_FAST",
        "first_four"
    ],
    [
        "CONTAINS_OP",
        "first_four in {\"-inf\", \"+inf\", \"-nan\", \"+nan\"}"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 4"
    ],
    [
        "LOAD_FAST",
        "parse_float"
    ],
    [
        "LOAD_FAST",
        "first_four"
    ],
    [
        "CALL_FUNCTION",
        "parse_float(first_four)"
    ],
    [
        "LOAD_GLOBAL",
        "suffixed_err"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "suffixed_err(src, pos, \"Invalid value\")"
    ],
    [
        "LOAD_GLOBAL",
        "TOMLDecodeError"
    ],
    [
        "LOAD_FAST",
        "msg"
    ],
    [
        "LOAD_FAST",
        "coord_repr"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_FUNCTION",
        "coord_repr(src, pos)"
    ],
    [
        "CALL_FUNCTION",
        "TOMLDecodeError(f\"{msg} (at {coord_repr(src, pos)})\")"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "CALL_FUNCTION",
        "len(src)"
    ],
    [
        "COMPARE_OP",
        "pos >= len(src)"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.count"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.count(\"\\n\", 0, pos)"
    ],
    [
        "BINARY_ADD",
        "src.count(\"\\n\", 0, pos) + 1"
    ],
    [
        "LOAD_FAST",
        "line"
    ],
    [
        "COMPARE_OP",
        "line == 1"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "src"
    ],
    [
        "LOAD_METHOD",
        "src.rindex"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "CALL_METHOD",
        "src.rindex(\"\\n\", 0, pos)"
    ],
    [
        "BINARY_SUBTRACT",
        "pos - src.rindex(\"\\n\", 0, pos)"
    ],
    [
        "LOAD_FAST",
        "line"
    ],
    [
        "LOAD_FAST",
        "column"
    ],
    [
        "LOAD_FAST",
        "codepoint"
    ],
    [
        "LOAD_FAST",
        "codepoint"
    ],
    [
        "LOAD_DEREF",
        "parse_float"
    ],
    [
        "LOAD_GLOBAL",
        "float"
    ],
    [
        "IS_OP",
        "parse_float is float"
    ],
    [
        "LOAD_GLOBAL",
        "float"
    ],
    [
        "LOAD_FAST",
        "safe_parse_float"
    ],
    [
        "LOAD_DEREF",
        "parse_float"
    ],
    [
        "LOAD_FAST",
        "float_str"
    ],
    [
        "CALL_FUNCTION",
        "parse_float(float_str)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "float_value"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(float_value, (dict, list))"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"parse_float must not return dicts or lists\")"
    ],
    [
        "LOAD_FAST",
        "float_value"
    ]
]