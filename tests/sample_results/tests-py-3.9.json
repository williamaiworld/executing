[
    [
        "LOAD_NAME",
        "unittest"
    ],
    [
        "LOAD_ATTR",
        "unittest.TestCase"
    ],
    [
        "LOAD_NAME",
        "unittest"
    ],
    [
        "LOAD_ATTR",
        "unittest.TestCase"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "LOAD_NAME",
        "TestFile"
    ],
    [
        "CALL_FUNCTION",
        "TestFile()"
    ],
    [
        "LOAD_METHOD",
        "TestFile().test_file"
    ],
    [
        "CALL_METHOD",
        "TestFile().test_file()"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "LOAD_NAME",
        "Tester"
    ],
    [
        "CALL_FUNCTION",
        "Tester()"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2, 3])"
    ],
    [
        "COMPARE_OP",
        "tester([1, 2, 3]) == [1, 2, 3]"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "LOAD_ATTR",
        "tester.asd"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "tester.asd is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "BINARY_SUBSCR",
        "tester[19]"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "tester[19] is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "BINARY_POWER",
        "tester ** 4"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "tester ** 4 is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "BINARY_MULTIPLY",
        "tester * 3"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "tester * 3 is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "BINARY_SUBTRACT",
        "tester - 2"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "tester - 2 is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "BINARY_ADD",
        "tester + 1"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "tester + 1 is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "UNARY_NEGATIVE",
        "-tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "-tester is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "UNARY_POSITIVE",
        "+tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "+tester is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "UNARY_INVERT",
        "~tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "~tester is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "COMPARE_OP",
        "tester < 7"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "(tester < 7) is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "COMPARE_OP",
        "tester >= 78"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "(tester >= 78) is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "COMPARE_OP",
        "tester != 79"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "IS_OP",
        "(tester != 79) is tester"
    ],
    [
        "LOAD_NAME",
        "tester"
    ],
    [
        "LOAD_METHOD",
        "tester.foo"
    ],
    [
        "CALL_METHOD",
        "tester.foo(45, False)"
    ],
    [
        "COMPARE_OP",
        "tester.foo(45, False) == 45"
    ],
    [
        "LOAD_NAME",
        "__name__"
    ],
    [
        "COMPARE_OP",
        "__name__ == '__main__'"
    ],
    [
        "LOAD_NAME",
        "unittest"
    ],
    [
        "LOAD_METHOD",
        "unittest.main"
    ],
    [
        "CALL_METHOD",
        "unittest.main()"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(1)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(2)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(3)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(9\n               )"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(\n            8)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(\n            99\n        )"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(33)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([4,\n                               5, 6, [\n                                7]])"
    ],
    [
        "LOAD_GLOBAL",
        "empty_decorator"
    ],
    [
        "LOAD_GLOBAL",
        "decorator_with_args"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester('123')"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "int()"
    ],
    [
        "CALL_FUNCTION_KW",
        "decorator_with_args(tester('123'), x=int())"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_GLOBAL",
        "tuple"
    ],
    [
        "CALL_FUNCTION",
        "tuple([1, 2])"
    ],
    [
        "CALL_FUNCTION",
        "list(tuple([1, 2]))"
    ],
    [
        "LOAD_GLOBAL",
        "empty_decorator"
    ],
    [
        "CALL_FUNCTION_KW",
        "tester(list(tuple([1, 2])), returns=empty_decorator)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_GLOBAL",
        "tuple"
    ],
    [
        "CALL_FUNCTION",
        "tuple(\n                    [3, 4])"
    ],
    [
        "CALL_FUNCTION",
        "list(\n                tuple(\n                    [3, 4]))"
    ],
    [
        "LOAD_GLOBAL",
        "empty_decorator"
    ],
    [
        "CALL_FUNCTION_KW",
        "tester(\n            list(\n                tuple(\n                    [3, 4])),\n            returns=empty_decorator)"
    ],
    [
        "LOAD_GLOBAL",
        "empty_decorator"
    ],
    [
        "LOAD_GLOBAL",
        "decorator_with_args"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "str()"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "int()"
    ],
    [
        "CALL_FUNCTION_KW",
        "decorator_with_args(\n            str(),\n            x=int())"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_GLOBAL",
        "tuple"
    ],
    [
        "CALL_FUNCTION",
        "tuple([5, 6])"
    ],
    [
        "CALL_FUNCTION",
        "list(tuple([5, 6]))"
    ],
    [
        "LOAD_GLOBAL",
        "empty_decorator"
    ],
    [
        "CALL_FUNCTION_KW",
        "tester(list(tuple([5, 6])), returns=empty_decorator)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_GLOBAL",
        "tuple"
    ],
    [
        "CALL_FUNCTION",
        "tuple([7, 8])"
    ],
    [
        "CALL_FUNCTION",
        "list(tuple([7, 8]))"
    ],
    [
        "LOAD_GLOBAL",
        "empty_decorator"
    ],
    [
        "CALL_FUNCTION_KW",
        "tester(list(tuple([7, 8])), returns=empty_decorator)"
    ],
    [
        "LOAD_GLOBAL",
        "empty_decorator"
    ],
    [
        "LOAD_GLOBAL",
        "decorator_with_args"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester('sdf')"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester('123234')"
    ],
    [
        "CALL_FUNCTION_KW",
        "decorator_with_args(tester('sdf'), x=tester('123234'))"
    ],
    [
        "CALL_FUNCTION",
        "decorator_with_args(tester('sdf'), x=tester('123234'))"
    ],
    [
        "CALL_FUNCTION",
        "empty_decorator"
    ],
    [
        "CALL_FUNCTION",
        "tester(list(tuple([7, 8])), returns=empty_decorator)"
    ],
    [
        "CALL_FUNCTION",
        "tester(list(tuple([5, 6])), returns=empty_decorator)"
    ],
    [
        "CALL_FUNCTION",
        "decorator_with_args(\n            str(),\n            x=int())"
    ],
    [
        "CALL_FUNCTION",
        "empty_decorator"
    ],
    [
        "CALL_FUNCTION",
        "tester(\n            list(\n                tuple(\n                    [3, 4])),\n            returns=empty_decorator)"
    ],
    [
        "CALL_FUNCTION",
        "tester(list(tuple([1, 2])), returns=empty_decorator)"
    ],
    [
        "CALL_FUNCTION",
        "decorator_with_args(tester('123'), x=int())"
    ],
    [
        "CALL_FUNCTION",
        "empty_decorator"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "str([{tester(x) for x in [1]}, {tester(y) for y in [1]}])"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "str([{tester(x) for x in [1]},\n             {tester(x) for x in [1]}])"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "CALL_FUNCTION",
        "list(tester(x) for x in [1])"
    ],
    [
        "CALL_FUNCTION",
        "str([{tester(x) for x in [1]}, list(tester(x) for x in [1])])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "tester(x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "CALL_FUNCTION",
        "tester(y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "tester(x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "tester(x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "tester(x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "tester(x)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertEqual"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(3)"
    ],
    [
        "CALL_FUNCTION",
        "(lambda x: (tester(x), tester(x)))(tester(3))"
    ],
    [
        "CALL_METHOD",
        "self.assertEqual(\n            (lambda x: (tester(x), tester(x)))(tester(3)),\n            (3, 3),\n        )"
    ],
    [
        "CALL_FUNCTION",
        "(lambda: (lambda: tester(1))())()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertEqual"
    ],
    [
        "CALL_FUNCTION",
        "(lambda: [tester(x) for x in tester([1, 2])])()"
    ],
    [
        "CALL_METHOD",
        "self.assertEqual(\n            (lambda: [tester(x) for x in tester([1, 2])])(),\n            [1, 2],\n        )"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "tester(x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "tester(x)"
    ],
    [
        "CALL_FUNCTION",
        "(lambda: tester(1))()"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(1)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "tester(x)"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([5, 6])"
    ],
    [
        "CALL_FUNCTION",
        "str({tester(a+x): {tester(b+x): {tester(c+x) for c in tester([1, 2])} for b in tester([3, 4])} for a in tester([5, 6])})"
    ],
    [
        "LOAD_FAST",
        "foo"
    ],
    [
        "CALL_FUNCTION",
        "foo()"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "a+x"
    ],
    [
        "CALL_FUNCTION",
        "tester(a+x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([3, 4])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "b+x"
    ],
    [
        "CALL_FUNCTION",
        "tester(b+x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "c+x"
    ],
    [
        "CALL_FUNCTION",
        "tester(c+x)"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([5, 6])"
    ],
    [
        "CALL_FUNCTION",
        "str({tester(a+x): {tester(b+x): {tester(c+x) for c in tester([1, 2])} for b in tester([3, 4])} for a in tester([5, 6])})"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([5, 6])"
    ],
    [
        "CALL_FUNCTION",
        "str({tester(a+y): {tester(b+y): {tester(c+y) for c in tester([1, 2])} for b in tester([3, 4])} for a in tester([5, 6])})"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([5, 6])"
    ],
    [
        "CALL_FUNCTION",
        "str({tester(a+x+y): {tester(b+x+y): {tester(c+x+y) for c in tester([1, 2])} for b in tester([3, 4])} for a in tester([5, 6])})"
    ],
    [
        "LOAD_FAST",
        "bar"
    ],
    [
        "CALL_FUNCTION",
        "bar()"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "a+x"
    ],
    [
        "CALL_FUNCTION",
        "tester(a+x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([3, 4])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "b+x"
    ],
    [
        "CALL_FUNCTION",
        "tester(b+x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "c+x"
    ],
    [
        "CALL_FUNCTION",
        "tester(c+x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "a+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(a+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([3, 4])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "b+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(b+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "c+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(c+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "a+x"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "a+x+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(a+x+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([3, 4])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "b+x"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "b+x+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(b+x+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "c+x"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "c+x+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(c+x+y)"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([5, 6])"
    ],
    [
        "CALL_FUNCTION",
        "str({tester(a+x): {tester(b+x): {tester(c+x) for c in tester([1, 2])} for b in tester([3, 4])} for a in tester([5, 6])})"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([5, 6])"
    ],
    [
        "CALL_FUNCTION",
        "str({tester(a+y): {tester(b+y): {tester(c+y) for c in tester([1, 2])} for b in tester([3, 4])} for a in tester([5, 6])})"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([5, 6])"
    ],
    [
        "CALL_FUNCTION",
        "str({tester(a+x+y): {tester(b+x+y): {tester(c+x+y) for c in tester([1, 2])} for b in tester([3, 4])} for a in tester([5, 6])})"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([5, 6])"
    ],
    [
        "CALL_FUNCTION",
        "str({tester(a+x+y+z): {tester(b+x+y+z): {tester(c+x+y+z) for c in tester([1, 2])} for b in tester([3, 4])} for a in tester([5, 6])})"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "a+x"
    ],
    [
        "CALL_FUNCTION",
        "tester(a+x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([3, 4])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "b+x"
    ],
    [
        "CALL_FUNCTION",
        "tester(b+x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "c+x"
    ],
    [
        "CALL_FUNCTION",
        "tester(c+x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "a+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(a+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([3, 4])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "b+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(b+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "c+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(c+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "a+x"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "a+x+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(a+x+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([3, 4])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "b+x"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "b+x+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(b+x+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "c+x"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "c+x+y"
    ],
    [
        "CALL_FUNCTION",
        "tester(c+x+y)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "a+x"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "a+x+y"
    ],
    [
        "LOAD_DEREF",
        "z"
    ],
    [
        "BINARY_ADD",
        "a+x+y+z"
    ],
    [
        "CALL_FUNCTION",
        "tester(a+x+y+z)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([3, 4])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "b+x"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "b+x+y"
    ],
    [
        "LOAD_DEREF",
        "z"
    ],
    [
        "BINARY_ADD",
        "b+x+y+z"
    ],
    [
        "CALL_FUNCTION",
        "tester(b+x+y+z)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "BINARY_ADD",
        "c+x"
    ],
    [
        "LOAD_DEREF",
        "y"
    ],
    [
        "BINARY_ADD",
        "c+x+y"
    ],
    [
        "LOAD_DEREF",
        "z"
    ],
    [
        "BINARY_ADD",
        "c+x+y+z"
    ],
    [
        "CALL_FUNCTION",
        "tester(c+x+y+z)"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(x=tester)"
    ],
    [
        "BINARY_SUBSCR",
        "dict(x=tester)['x']"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "dict(x=tester)['x'](tester)"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(x=tester)['x'](tester)(3, check_func=False)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertRaises"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_METHOD",
        "self.assertRaises(TypeError)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2, 3])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(0)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(4)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(5)"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "tester(ValueError)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(9)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(10)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(10)"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "str()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertRaises"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_GLOBAL",
        "Exception"
    ],
    [
        "CALL_FUNCTION",
        "tester(Exception)"
    ],
    [
        "CALL_METHOD",
        "self.assertRaises(tester(Exception))"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(0)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(0)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "BINARY_TRUE_DIVIDE",
        "1 / 0"
    ],
    [
        "CALL_FUNCTION",
        "tester(1 / 0)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_FAST",
        "gen"
    ],
    [
        "CALL_FUNCTION",
        "gen()"
    ],
    [
        "CALL_FUNCTION",
        "list(gen())"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_FAST",
        "gen2"
    ],
    [
        "CALL_FUNCTION",
        "list(gen2)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "tester(x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "tester(x)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(4)"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "LOAD_METHOD",
        "time.time"
    ],
    [
        "CALL_METHOD",
        "time.time()"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "CALL_FUNCTION",
        "range(10000)"
    ],
    [
        "LOAD_GLOBAL",
        "Source"
    ],
    [
        "LOAD_METHOD",
        "Source.executing"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_METHOD",
        "inspect.currentframe"
    ],
    [
        "CALL_METHOD",
        "inspect.currentframe()"
    ],
    [
        "CALL_METHOD",
        "Source.executing(inspect.currentframe())"
    ],
    [
        "LOAD_ATTR",
        "Source.executing(inspect.currentframe()).node"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "IS_OP",
        "node is None"
    ],
    [
        "LOAD_FAST",
        "new_node"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertIs"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "new_node"
    ],
    [
        "CALL_METHOD",
        "self.assertIs(node, new_node)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertLess"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "LOAD_METHOD",
        "time.time"
    ],
    [
        "CALL_METHOD",
        "time.time()"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "BINARY_SUBTRACT",
        "time.time() - start"
    ],
    [
        "CALL_METHOD",
        "self.assertLess(time.time() - start, 1)"
    ],
    [
        "LOAD_FAST",
        "check"
    ],
    [
        "CALL_FUNCTION",
        "check(u'# coding=utf8\\n\u00e9', 'utf8')"
    ],
    [
        "LOAD_FAST",
        "check"
    ],
    [
        "CALL_FUNCTION",
        "check(u'# coding=gbk\\n\u00e9', 'gbk')"
    ],
    [
        "LOAD_FAST",
        "check"
    ],
    [
        "LOAD_GLOBAL",
        "UnicodeDecodeError"
    ],
    [
        "CALL_FUNCTION_KW",
        "check(u'# coding=utf8\\n\u00e9', 'gbk', exception=UnicodeDecodeError)"
    ],
    [
        "LOAD_FAST",
        "check"
    ],
    [
        "CALL_FUNCTION_KW",
        "check(u'# coding=gbk\\n\u00e9', 'utf8', matches=False)"
    ],
    [
        "LOAD_GLOBAL",
        "PY3"
    ],
    [
        "LOAD_FAST",
        "check"
    ],
    [
        "CALL_FUNCTION",
        "check(u'\u00e9', 'utf8')"
    ],
    [
        "LOAD_FAST",
        "check"
    ],
    [
        "LOAD_GLOBAL",
        "SyntaxError"
    ],
    [
        "CALL_FUNCTION_KW",
        "check(u'\u00e9', 'gbk', exception=SyntaxError)"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_METHOD",
        "source.encode"
    ],
    [
        "LOAD_FAST",
        "encoding"
    ],
    [
        "CALL_METHOD",
        "source.encode(encoding)"
    ],
    [
        "LOAD_FAST",
        "exception"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertRaises"
    ],
    [
        "LOAD_FAST",
        "exception"
    ],
    [
        "CALL_METHOD",
        "self.assertRaises(exception)"
    ],
    [
        "LOAD_GLOBAL",
        "Source"
    ],
    [
        "LOAD_METHOD",
        "Source.decode_source"
    ],
    [
        "LOAD_FAST",
        "encoded"
    ],
    [
        "CALL_METHOD",
        "Source.decode_source(encoded)"
    ],
    [
        "LOAD_GLOBAL",
        "Source"
    ],
    [
        "LOAD_METHOD",
        "Source.decode_source"
    ],
    [
        "LOAD_FAST",
        "encoded"
    ],
    [
        "CALL_METHOD",
        "Source.decode_source(encoded)"
    ],
    [
        "LOAD_FAST",
        "matches"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertEqual"
    ],
    [
        "LOAD_FAST",
        "decoded"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "CALL_METHOD",
        "self.assertEqual(decoded, source)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertNotEqual"
    ],
    [
        "LOAD_FAST",
        "decoded"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "CALL_METHOD",
        "self.assertNotEqual(decoded, source)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester('a')"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester('''\n            ab''')"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester('''\n                    abc\n                    def\n                    '''\n               )"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(\n                '''\n                123\n                456\n                '''\n            )"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(\n                '''\n                345\n                456786\n                '''\n            )"
    ],
    [
        "CALL_FUNCTION",
        "str([\n            tester(\n                '''\n                123\n                456\n                '''\n            ),\n            tester(\n                '''\n                345\n                456786\n                '''\n            ),\n        ])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(\n            [\n                '''\n                123\n                456\n                '''\n                '''\n                345\n                456786\n                '''\n                ,\n                '''\n                123\n                456\n                ''',\n                '''\n                345\n                456786\n                '''\n            ]\n        )"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(1)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(2)"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester([1, 2])"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "CALL_FUNCTION",
        "tester(3)"
    ],
    [
        "LOAD_GLOBAL",
        "Source"
    ],
    [
        "LOAD_METHOD",
        "Source.for_filename"
    ],
    [
        "LOAD_GLOBAL",
        "__file__"
    ],
    [
        "CALL_METHOD",
        "Source.for_filename(__file__)"
    ],
    [
        "LOAD_METHOD",
        "Source.for_filename(__file__).code_qualname"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "LOAD_ATTR",
        "func.__code__"
    ],
    [
        "CALL_METHOD",
        "Source.for_filename(__file__).code_qualname(func.__code__)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertEqual"
    ],
    [
        "LOAD_FAST",
        "qn"
    ],
    [
        "LOAD_FAST",
        "qualname"
    ],
    [
        "CALL_METHOD",
        "self.assertEqual(qn, qualname)"
    ],
    [
        "LOAD_GLOBAL",
        "PY3"
    ],
    [
        "LOAD_FAST",
        "check_actual_qualname"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertEqual"
    ],
    [
        "LOAD_FAST",
        "qn"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "LOAD_ATTR",
        "func.__qualname__"
    ],
    [
        "CALL_METHOD",
        "self.assertEqual(qn, func.__qualname__)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertTrue"
    ],
    [
        "LOAD_FAST",
        "qn"
    ],
    [
        "LOAD_METHOD",
        "qn.endswith"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "LOAD_ATTR",
        "func.__name__"
    ],
    [
        "CALL_METHOD",
        "qn.endswith(func.__name__)"
    ],
    [
        "CALL_METHOD",
        "self.assertTrue(qn.endswith(func.__name__))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assert_qualname"
    ],
    [
        "LOAD_GLOBAL",
        "C"
    ],
    [
        "LOAD_ATTR",
        "C.f"
    ],
    [
        "CALL_METHOD",
        "self.assert_qualname(C.f, 'C.f')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assert_qualname"
    ],
    [
        "LOAD_GLOBAL",
        "C"
    ],
    [
        "LOAD_ATTR",
        "C.D"
    ],
    [
        "LOAD_ATTR",
        "C.D.g"
    ],
    [
        "CALL_METHOD",
        "self.assert_qualname(C.D.g, 'C.D.g')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assert_qualname"
    ],
    [
        "LOAD_GLOBAL",
        "f"
    ],
    [
        "CALL_METHOD",
        "self.assert_qualname(f, 'f')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assert_qualname"
    ],
    [
        "LOAD_GLOBAL",
        "f"
    ],
    [
        "CALL_FUNCTION",
        "f()"
    ],
    [
        "CALL_METHOD",
        "self.assert_qualname(f(), 'f.<locals>.g')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assert_qualname"
    ],
    [
        "LOAD_GLOBAL",
        "C"
    ],
    [
        "LOAD_ATTR",
        "C.D"
    ],
    [
        "LOAD_METHOD",
        "C.D.h"
    ],
    [
        "CALL_METHOD",
        "C.D.h()"
    ],
    [
        "CALL_METHOD",
        "self.assert_qualname(C.D.h(), 'C.D.h.<locals>.i.<locals>.j')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assert_qualname"
    ],
    [
        "LOAD_GLOBAL",
        "lamb"
    ],
    [
        "CALL_METHOD",
        "self.assert_qualname(lamb, '<lambda>')"
    ],
    [
        "LOAD_GLOBAL",
        "lambda_maker"
    ],
    [
        "CALL_FUNCTION",
        "lambda_maker()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assert_qualname"
    ],
    [
        "LOAD_FAST",
        "foo"
    ],
    [
        "CALL_METHOD",
        "self.assert_qualname(foo, 'lambda_maker.<locals>.foo')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assert_qualname"
    ],
    [
        "LOAD_FAST",
        "foo"
    ],
    [
        "LOAD_ATTR",
        "foo.x"
    ],
    [
        "CALL_METHOD",
        "self.assert_qualname(foo.x, 'lambda_maker.<locals>.<lambda>')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assert_qualname"
    ],
    [
        "LOAD_FAST",
        "foo"
    ],
    [
        "CALL_FUNCTION",
        "foo()"
    ],
    [
        "CALL_METHOD",
        "self.assert_qualname(foo(), 'lambda_maker.<locals>.foo.<locals>.<lambda>')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.assert_qualname"
    ],
    [
        "LOAD_FAST",
        "foo"
    ],
    [
        "CALL_FUNCTION",
        "foo()"
    ],
    [
        "CALL_FUNCTION",
        "foo()()"
    ],
    [
        "CALL_FUNCTION_KW",
        "self.assert_qualname(foo()(), 'lambda_maker.<locals>.foo.<locals>.<lambda>', check_actual_qualname=False)"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "CALL_FUNCTION",
        "range(66000)"
    ],
    [
        "CALL_FUNCTION",
        "list(range(66000))"
    ],
    [
        "BINARY_MODULO",
        "'tester(6)\\n%s\\ntester(9)' % list(range(66000))"
    ],
    [
        "LOAD_GLOBAL",
        "tempfile"
    ],
    [
        "LOAD_METHOD",
        "tempfile.mkstemp"
    ],
    [
        "CALL_METHOD",
        "tempfile.mkstemp()"
    ],
    [
        "LOAD_GLOBAL",
        "compile"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "CALL_FUNCTION",
        "compile(source, filename, 'exec')"
    ],
    [
        "LOAD_GLOBAL",
        "open"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "CALL_FUNCTION",
        "open(filename, 'w')"
    ],
    [
        "LOAD_FAST",
        "outfile"
    ],
    [
        "LOAD_METHOD",
        "outfile.write"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "CALL_METHOD",
        "outfile.write(source)"
    ],
    [
        "LOAD_GLOBAL",
        "exec"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "CALL_FUNCTION",
        "exec(code)"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "CALL_FUNCTION",
        "range(5)"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "CALL_FUNCTION",
        "range(n)"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "COMPARE_OP",
        "n == 1"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertEqual"
    ],
    [
        "LOAD_GLOBAL",
        "only"
    ],
    [
        "LOAD_FAST",
        "gen"
    ],
    [
        "CALL_FUNCTION",
        "only(gen)"
    ],
    [
        "CALL_METHOD",
        "self.assertEqual(only(gen), 0)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertRaises"
    ],
    [
        "LOAD_GLOBAL",
        "NotOneValueFound"
    ],
    [
        "CALL_METHOD",
        "self.assertRaises(NotOneValueFound)"
    ],
    [
        "LOAD_GLOBAL",
        "only"
    ],
    [
        "LOAD_FAST",
        "gen"
    ],
    [
        "CALL_FUNCTION",
        "only(gen)"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.path"
    ],
    [
        "LOAD_METHOD",
        "os.path.join"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.path"
    ],
    [
        "LOAD_METHOD",
        "os.path.dirname"
    ],
    [
        "LOAD_GLOBAL",
        "__file__"
    ],
    [
        "CALL_METHOD",
        "os.path.dirname(__file__)"
    ],
    [
        "CALL_METHOD",
        "os.path.join(os.path.dirname(__file__), 'not_code.txt', )"
    ],
    [
        "LOAD_GLOBAL",
        "Source"
    ],
    [
        "LOAD_METHOD",
        "Source.for_filename"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL_METHOD",
        "Source.for_filename(path)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertIsNone"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_ATTR",
        "source.tree"
    ],
    [
        "CALL_METHOD",
        "self.assertIsNone(source.tree)"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_METHOD",
        "inspect.currentframe"
    ],
    [
        "CALL_METHOD",
        "inspect.currentframe()"
    ],
    [
        "LOAD_GLOBAL",
        "Source"
    ],
    [
        "LOAD_METHOD",
        "Source.executing"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "CALL_METHOD",
        "Source.executing(frame)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertEqual"
    ],
    [
        "LOAD_FAST",
        "executing"
    ],
    [
        "LOAD_METHOD",
        "executing.code_qualname"
    ],
    [
        "CALL_METHOD",
        "executing.code_qualname()"
    ],
    [
        "CALL_METHOD",
        "self.assertEqual(executing.code_qualname(), 'TestStuff.test_executing_methods')"
    ],
    [
        "LOAD_GLOBAL",
        "sys"
    ],
    [
        "LOAD_ATTR",
        "sys.version"
    ],
    [
        "LOAD_METHOD",
        "sys.version.lower"
    ],
    [
        "CALL_METHOD",
        "sys.version.lower()"
    ],
    [
        "CONTAINS_OP",
        "'pypy' not in sys.version.lower()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertEqual"
    ],
    [
        "LOAD_FAST",
        "executing"
    ],
    [
        "LOAD_METHOD",
        "executing.text"
    ],
    [
        "CALL_METHOD",
        "executing.text()"
    ],
    [
        "LOAD_FAST",
        "text"
    ],
    [
        "CALL_METHOD",
        "self.assertEqual(executing.text(), text)"
    ],
    [
        "LOAD_FAST",
        "executing"
    ],
    [
        "LOAD_METHOD",
        "executing.text_range"
    ],
    [
        "CALL_METHOD",
        "executing.text_range()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.assertEqual"
    ],
    [
        "LOAD_FAST",
        "executing"
    ],
    [
        "LOAD_ATTR",
        "executing.source"
    ],
    [
        "LOAD_ATTR",
        "executing.source.text"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "end"
    ],
    [
        "BINARY_SUBSCR",
        "executing.source.text[start:end]"
    ],
    [
        "LOAD_FAST",
        "text"
    ],
    [
        "CALL_METHOD",
        "self.assertEqual(executing.source.text[start:end], text)"
    ],
    [
        "LOAD_GLOBAL",
        "C"
    ],
    [
        "CALL_FUNCTION",
        "C()"
    ],
    [
        "LOAD_GLOBAL",
        "tester"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "STORE_ATTR",
        "c.x"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "STORE_ATTR",
        "c.y"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_ATTR",
        "c.x"
    ],
    [
        "LOAD_ATTR",
        "c.x.x"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_ATTR",
        "c.x"
    ],
    [
        "LOAD_ATTR",
        "c.x.y"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_ATTR",
        "c.y"
    ],
    [
        "LOAD_ATTR",
        "c.y.x"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_ATTR",
        "c.y"
    ],
    [
        "LOAD_ATTR",
        "c.y.y"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_ATTR",
        "c.x"
    ],
    [
        "LOAD_ATTR",
        "c.x.asd"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_ATTR",
        "c.y"
    ],
    [
        "LOAD_ATTR",
        "c.y.qwe"
    ],
    [
        "CALL_FUNCTION",
        "str((c.x.x, c.x.y, c.y.x, c.y.y, c.x.asd, c.y.qwe))"
    ],
    [
        "LOAD_GLOBAL",
        "Source"
    ],
    [
        "LOAD_METHOD",
        "Source.for_frame"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_METHOD",
        "inspect.currentframe"
    ],
    [
        "CALL_METHOD",
        "inspect.currentframe()"
    ],
    [
        "CALL_METHOD",
        "Source.for_frame(inspect.currentframe())"
    ],
    [
        "LOAD_GLOBAL",
        "compile"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_ATTR",
        "source.text"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_ATTR",
        "source.filename"
    ],
    [
        "CALL_FUNCTION",
        "compile(source.text, source.filename, 'exec')"
    ],
    [
        "LOAD_GLOBAL",
        "get_instructions"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "CALL_FUNCTION",
        "get_instructions(code)"
    ],
    [
        "LOAD_FAST",
        "instructions"
    ],
    [
        "LOAD_FAST",
        "inst"
    ],
    [
        "LOAD_ATTR",
        "inst.starts_line"
    ],
    [
        "IS_OP",
        "inst.starts_line is not None"
    ],
    [
        "LOAD_FAST",
        "inst"
    ],
    [
        "LOAD_ATTR",
        "inst.starts_line"
    ],
    [
        "LOAD_FAST",
        "inst"
    ],
    [
        "LOAD_ATTR",
        "inst.opname"
    ],
    [
        "LOAD_METHOD",
        "inst.opname.startswith"
    ],
    [
        "CALL_METHOD",
        "inst.opname.startswith(\n                    ('BINARY_', 'UNARY_', 'LOAD_ATTR', 'LOAD_METHOD', 'LOOKUP_METHOD', 'COMPARE_OP'))"
    ],
    [
        "LOAD_GLOBAL",
        "C"
    ],
    [
        "CALL_FUNCTION",
        "C()"
    ],
    [
        "LOAD_FAST",
        "inst"
    ],
    [
        "LOAD_ATTR",
        "inst.offset"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "STORE_ATTR",
        "frame.f_lasti"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "STORE_ATTR",
        "frame.f_code"
    ],
    [
        "LOAD_GLOBAL",
        "globals"
    ],
    [
        "CALL_FUNCTION",
        "globals()"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "STORE_ATTR",
        "frame.f_globals"
    ],
    [
        "LOAD_FAST",
        "lineno"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "STORE_ATTR",
        "frame.f_lineno"
    ],
    [
        "LOAD_GLOBAL",
        "print"
    ],
    [
        "LOAD_FAST",
        "inst"
    ],
    [
        "LOAD_ATTR",
        "inst.opname"
    ],
    [
        "CALL_FUNCTION",
        "print(inst.opname)"
    ],
    [
        "LOAD_GLOBAL",
        "Source"
    ],
    [
        "LOAD_METHOD",
        "Source.executing"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "CALL_METHOD",
        "Source.executing(frame)"
    ],
    [
        "LOAD_ATTR",
        "Source.executing(frame).node"
    ],
    [
        "IS_OP",
        "Source.executing(frame).node is not None"
    ],
    [
        "LOAD_NAME",
        "staticmethod"
    ],
    [
        "CALL_FUNCTION",
        "staticmethod"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "LOAD_NAME",
        "staticmethod"
    ],
    [
        "CALL_FUNCTION",
        "staticmethod"
    ],
    [
        "LOAD_NAME",
        "staticmethod"
    ],
    [
        "CALL_FUNCTION",
        "staticmethod"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "CALL_FUNCTION",
        "i()"
    ],
    [
        "LOAD_FAST",
        "j"
    ],
    [
        "LOAD_FAST",
        "g"
    ],
    [
        "LOAD_FAST",
        "assign"
    ],
    [
        "CALL_FUNCTION",
        "assign(lambda: 1)"
    ],
    [
        "CALL_FUNCTION",
        "assign(lambda: 1)"
    ],
    [
        "LOAD_FAST",
        "foo"
    ],
    [
        "LOAD_FAST",
        "decorator"
    ],
    [
        "LOAD_DEREF",
        "x"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "STORE_ATTR",
        "func.x"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "LOAD_NAME",
        "__add__"
    ],
    [
        "LOAD_NAME",
        "__invert__"
    ],
    [
        "LOAD_NAME",
        "__lt__"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_METHOD",
        "inspect.currentframe"
    ],
    [
        "CALL_METHOD",
        "inspect.currentframe()"
    ],
    [
        "LOAD_ATTR",
        "inspect.currentframe().f_back"
    ],
    [
        "LOAD_ATTR",
        "inspect.currentframe().f_back.f_back"
    ],
    [
        "LOAD_GLOBAL",
        "Source"
    ],
    [
        "LOAD_METHOD",
        "Source.lazycache"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "CALL_METHOD",
        "Source.lazycache(frame)"
    ],
    [
        "LOAD_GLOBAL",
        "Source"
    ],
    [
        "LOAD_METHOD",
        "Source.executing"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "CALL_METHOD",
        "Source.executing(frame)"
    ],
    [
        "LOAD_ATTR",
        "Source.executing(frame).node"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "typ"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, typ)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "typ"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_METHOD",
        "inspect.currentframe"
    ],
    [
        "CALL_METHOD",
        "inspect.currentframe()"
    ],
    [
        "LOAD_ATTR",
        "inspect.currentframe().f_back"
    ],
    [
        "LOAD_ATTR",
        "inspect.currentframe().f_back.f_back"
    ],
    [
        "LOAD_GLOBAL",
        "eval"
    ],
    [
        "LOAD_GLOBAL",
        "compile"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_METHOD",
        "ast.Expression"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_METHOD",
        "ast.Expression(node)"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code.co_filename"
    ],
    [
        "CALL_FUNCTION",
        "compile(ast.Expression(node), frame.f_code.co_filename, 'eval')"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_globals"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_locals"
    ],
    [
        "CALL_FUNCTION",
        "eval(\n            compile(ast.Expression(node), frame.f_code.co_filename, 'eval'),\n            frame.f_globals,\n            frame.f_locals,\n        )"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "COMPARE_OP",
        "result == value"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.get_node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Call"
    ],
    [
        "CALL_METHOD",
        "self.get_node(ast.Call)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.check"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "LOAD_ATTR",
        "call.args"
    ],
    [
        "BINARY_SUBSCR",
        "call.args[0]"
    ],
    [
        "LOAD_FAST",
        "arg"
    ],
    [
        "CALL_METHOD",
        "self.check(call.args[0], arg)"
    ],
    [
        "LOAD_FAST",
        "check_func"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.check"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "LOAD_ATTR",
        "call.func"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "self.check(call.func, self)"
    ],
    [
        "LOAD_FAST",
        "returns"
    ],
    [
        "IS_OP",
        "returns is None"
    ],
    [
        "LOAD_FAST",
        "arg"
    ],
    [
        "LOAD_FAST",
        "returns"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.get_node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Attribute"
    ],
    [
        "CALL_METHOD",
        "self.get_node(ast.Attribute)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.check"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.value"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "self.check(node.value, self)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.attr"
    ],
    [
        "LOAD_FAST",
        "item"
    ],
    [
        "COMPARE_OP",
        "node.attr == item"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.get_node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Subscript"
    ],
    [
        "CALL_METHOD",
        "self.get_node(ast.Subscript)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.check"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.value"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "self.check(node.value, self)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.check"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.slice"
    ],
    [
        "LOAD_ATTR",
        "node.slice.value"
    ],
    [
        "LOAD_FAST",
        "item"
    ],
    [
        "CALL_METHOD",
        "self.check(node.slice.value, item)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.get_node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.BinOp"
    ],
    [
        "CALL_METHOD",
        "self.get_node(ast.BinOp)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.check"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.left"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "self.check(node.left, self)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.check"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.right"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self.check(node.right, other)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.get_node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.UnaryOp"
    ],
    [
        "CALL_METHOD",
        "self.get_node(ast.UnaryOp)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.check"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.operand"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "self.check(node.operand, self)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.get_node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Compare"
    ],
    [
        "CALL_METHOD",
        "self.get_node(ast.Compare)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.check"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.left"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "self.check(node.left, self)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.check"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.comparators"
    ],
    [
        "BINARY_SUBSCR",
        "node.comparators[0]"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self.check(node.comparators[0], other)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "LOAD_GLOBAL",
        "empty_decorator"
    ]
]