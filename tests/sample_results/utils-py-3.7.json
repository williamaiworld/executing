[
    [
        "LOAD_NAME",
        "standard_library"
    ],
    [
        "LOAD_METHOD",
        "standard_library.install_aliases"
    ],
    [
        "CALL_METHOD",
        "standard_library.install_aliases()"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "LOAD_NAME",
        "type"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "LOAD_NAME",
        "version_info"
    ],
    [
        "LOAD_ATTR",
        "version_info.major"
    ],
    [
        "COMPARE_OP",
        "version_info.major == 2"
    ],
    [
        "LOAD_NAME",
        "PY2"
    ],
    [
        "UNARY_NOT",
        "not PY2"
    ],
    [
        "LOAD_NAME",
        "TypeVar"
    ],
    [
        "CALL_FUNCTION",
        "TypeVar('T')"
    ],
    [
        "LOAD_NAME",
        "TypeVar"
    ],
    [
        "CALL_FUNCTION",
        "TypeVar('RT')"
    ],
    [
        "LOAD_NAME",
        "PY2"
    ],
    [
        "LOAD_NAME",
        "unicode"
    ],
    [
        "LOAD_NAME",
        "str"
    ],
    [
        "LOAD_NAME",
        "PY2"
    ],
    [
        "LOAD_NAME",
        "type"
    ],
    [
        "LOAD_NAME",
        "json"
    ],
    [
        "LOAD_ATTR",
        "json.JSONEncoder"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "LOAD_GLOBAL",
        "ntpath"
    ],
    [
        "LOAD_METHOD",
        "ntpath.split"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL_METHOD",
        "ntpath.split(path)"
    ],
    [
        "LOAD_FAST",
        "tail"
    ],
    [
        "LOAD_GLOBAL",
        "ntpath"
    ],
    [
        "LOAD_METHOD",
        "ntpath.basename"
    ],
    [
        "LOAD_FAST",
        "head"
    ],
    [
        "CALL_METHOD",
        "ntpath.basename(head)"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.path"
    ],
    [
        "LOAD_METHOD",
        "os.path.commonprefix"
    ],
    [
        "LOAD_FAST",
        "paths"
    ],
    [
        "CALL_METHOD",
        "os.path.commonprefix(paths)"
    ],
    [
        "LOAD_GLOBAL",
        "ntpath"
    ],
    [
        "LOAD_METHOD",
        "ntpath.split"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "CALL_METHOD",
        "ntpath.split(prefix)"
    ],
    [
        "BINARY_SUBSCR",
        "ntpath.split(prefix)[0]"
    ],
    [
        "LOAD_FAST",
        "paths"
    ],
    [
        "BINARY_SUBSCR",
        "paths[0]"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "CALL_FUNCTION",
        "len(prefix)"
    ],
    [
        "BINARY_SUBSCR",
        "paths[0][len(prefix)]"
    ],
    [
        "LOAD_FAST",
        "first_char_after"
    ],
    [
        "COMPARE_OP",
        "first_char_after in r'\\/'"
    ],
    [
        "LOAD_FAST",
        "first_char_after"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "COMPARE_OP",
        "path == IPYTHON_FILE_PATH"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "all_paths"
    ],
    [
        "LOAD_GLOBAL",
        "common_ancestor"
    ],
    [
        "LOAD_FAST",
        "all_paths"
    ],
    [
        "CALL_FUNCTION",
        "common_ancestor(all_paths)"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "COMPARE_OP",
        "prefix in r'\\/'"
    ],
    [
        "LOAD_GLOBAL",
        "strip_required_prefix"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "prefix"
    ],
    [
        "CALL_FUNCTION",
        "strip_required_prefix(path, prefix)"
    ],
    [
        "LOAD_GLOBAL",
        "path_leaf"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "CALL_FUNCTION",
        "path_leaf(path)"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "COMPARE_OP",
        "f != IPYTHON_FILE_PATH"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "COMPARE_OP",
        "path == IPYTHON_FILE_PATH"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.path"
    ],
    [
        "LOAD_ATTR",
        "os.path.sep"
    ],
    [
        "COMPARE_OP",
        "os.path.sep == '/'"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_METHOD",
        "path.startswith"
    ],
    [
        "CALL_METHOD",
        "path.startswith('/')"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "BINARY_ADD",
        "'/' + path"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "obj"
    ],
    [
        "CALL_FUNCTION",
        "type(obj)"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_GLOBAL",
        "types"
    ],
    [
        "LOAD_ATTR",
        "types.InstanceType"
    ],
    [
        "COMPARE_OP",
        "t is types.InstanceType"
    ],
    [
        "LOAD_FAST",
        "obj"
    ],
    [
        "LOAD_ATTR",
        "obj.__class__"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "iterable"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_DEREF",
        "type_or_tuple"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(x, type_or_tuple)"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_GLOBAL",
        "next"
    ],
    [
        "LOAD_FAST",
        "it"
    ],
    [
        "CALL_FUNCTION",
        "next(it)"
    ],
    [
        "LOAD_GLOBAL",
        "StopIteration"
    ],
    [
        "LOAD_GLOBAL",
        "raise_from"
    ],
    [
        "LOAD_GLOBAL",
        "RuntimeError"
    ],
    [
        "LOAD_FAST",
        "e"
    ],
    [
        "CALL_FUNCTION",
        "raise_from(RuntimeError, e)"
    ],
    [
        "LOAD_GLOBAL",
        "hasattr"
    ],
    [
        "LOAD_FAST",
        "expression"
    ],
    [
        "CALL_FUNCTION",
        "hasattr(expression, 'one_or_none')"
    ],
    [
        "LOAD_FAST",
        "expression"
    ],
    [
        "LOAD_METHOD",
        "expression.one_or_none"
    ],
    [
        "CALL_METHOD",
        "expression.one_or_none()"
    ],
    [
        "LOAD_FAST",
        "expression"
    ],
    [
        "LOAD_METHOD",
        "expression.all"
    ],
    [
        "CALL_METHOD",
        "expression.all()"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "CALL_FUNCTION",
        "len(result)"
    ],
    [
        "COMPARE_OP",
        "len(result) == 0"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "CALL_FUNCTION",
        "len(result)"
    ],
    [
        "COMPARE_OP",
        "len(result) == 1"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "BINARY_SUBSCR",
        "result[0]"
    ],
    [
        "LOAD_GLOBAL",
        "Exception"
    ],
    [
        "CALL_FUNCTION",
        "Exception(\"There is more than one item returned for the supplied filter\")"
    ],
    [
        "LOAD_FAST",
        "lst"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(x, list)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_METHOD",
        "result.extend"
    ],
    [
        "LOAD_GLOBAL",
        "flatten_list"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "flatten_list(x)"
    ],
    [
        "CALL_METHOD",
        "result.extend(flatten_list(x))"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_METHOD",
        "result.append"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_METHOD",
        "result.append(x)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "LOAD_ATTR",
        "f.__code__"
    ],
    [
        "LOAD_GLOBAL",
        "AttributeError"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "LOAD_ATTR",
        "code.co_name"
    ],
    [
        "LOAD_ATTR",
        "(lambda: 0).__code__"
    ],
    [
        "LOAD_ATTR",
        "(lambda: 0).__code__.co_name"
    ],
    [
        "COMPARE_OP",
        "code.co_name == (lambda: 0).__code__.co_name"
    ],
    [
        "LOAD_FAST",
        "o"
    ],
    [
        "LOAD_ATTR",
        "o.as_json"
    ],
    [
        "LOAD_GLOBAL",
        "AttributeError"
    ],
    [
        "LOAD_GLOBAL",
        "super"
    ],
    [
        "LOAD_GLOBAL",
        "ProtocolEncoder"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "super(ProtocolEncoder, self)"
    ],
    [
        "LOAD_METHOD",
        "super(ProtocolEncoder, self).default"
    ],
    [
        "LOAD_FAST",
        "o"
    ],
    [
        "CALL_METHOD",
        "super(ProtocolEncoder, self).default(o)"
    ],
    [
        "LOAD_FAST",
        "method"
    ],
    [
        "CALL_FUNCTION",
        "method()"
    ],
    [
        "LOAD_GLOBAL",
        "io"
    ],
    [
        "LOAD_METHOD",
        "io.open"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "CALL_METHOD",
        "io.open(filename, 'rb')"
    ],
    [
        "LOAD_GLOBAL",
        "detect_encoding"
    ],
    [
        "LOAD_FAST",
        "fp"
    ],
    [
        "LOAD_ATTR",
        "fp.readline"
    ],
    [
        "CALL_FUNCTION",
        "detect_encoding(fp.readline)"
    ],
    [
        "LOAD_FAST",
        "fp"
    ],
    [
        "LOAD_METHOD",
        "fp.seek"
    ],
    [
        "CALL_METHOD",
        "fp.seek(0)"
    ],
    [
        "LOAD_GLOBAL",
        "io"
    ],
    [
        "LOAD_ATTR",
        "io.TextIOWrapper"
    ],
    [
        "LOAD_FAST",
        "fp"
    ],
    [
        "LOAD_FAST",
        "encoding"
    ],
    [
        "CALL_FUNCTION_KW",
        "io.TextIOWrapper(fp, encoding, line_buffering=True)"
    ],
    [
        "LOAD_FAST",
        "text"
    ],
    [
        "STORE_ATTR",
        "text.mode"
    ],
    [
        "LOAD_FAST",
        "text"
    ],
    [
        "LOAD_FAST",
        "fp"
    ],
    [
        "LOAD_METHOD",
        "fp.close"
    ],
    [
        "CALL_METHOD",
        "fp.close()"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_METHOD",
        "filename.endswith"
    ],
    [
        "CALL_METHOD",
        "filename.endswith('.pyc')"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "BINARY_SUBSCR",
        "filename[:-1]"
    ],
    [
        "LOAD_GLOBAL",
        "open_with_encoding_check"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "CALL_FUNCTION",
        "open_with_encoding_check(filename)"
    ],
    [
        "LOAD_METHOD",
        "''.join"
    ],
    [
        "LOAD_GLOBAL",
        "enumerate"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "CALL_FUNCTION",
        "enumerate(f)"
    ],
    [
        "CALL_METHOD",
        "''.join([\n            '\\n' if i < 2 and cookie_re.match(line)\n            else line\n            for i, line in enumerate(f)\n        ])"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "COMPARE_OP",
        "i < 2"
    ],
    [
        "LOAD_DEREF",
        "cookie_re"
    ],
    [
        "LOAD_METHOD",
        "cookie_re.match"
    ],
    [
        "LOAD_FAST",
        "line"
    ],
    [
        "CALL_METHOD",
        "cookie_re.match(line)"
    ],
    [
        "LOAD_FAST",
        "line"
    ],
    [
        "LOAD_GLOBAL",
        "safe_next"
    ],
    [
        "LOAD_FAST",
        "tokens"
    ],
    [
        "LOAD_METHOD",
        "tokens.get_tokens"
    ],
    [
        "LOAD_FAST",
        "function_node"
    ],
    [
        "CALL_METHOD",
        "tokens.get_tokens(function_node)"
    ],
    [
        "CALL_FUNCTION",
        "safe_next(t for t in tokens.get_tokens(function_node)\n                          if t.string == 'def' and t.type == token.NAME)"
    ],
    [
        "LOAD_FAST",
        "def_token"
    ],
    [
        "LOAD_ATTR",
        "def_token.startpos"
    ],
    [
        "LOAD_FAST",
        "tokens"
    ],
    [
        "LOAD_ATTR",
        "tokens.text"
    ],
    [
        "LOAD_FAST",
        "startpos"
    ],
    [
        "LOAD_FAST",
        "function_node"
    ],
    [
        "LOAD_ATTR",
        "function_node.last_token"
    ],
    [
        "LOAD_ATTR",
        "function_node.last_token.endpos"
    ],
    [
        "BINARY_SUBSCR",
        "tokens.text[startpos:function_node.last_token.endpos]"
    ],
    [
        "LOAD_METHOD",
        "tokens.text[startpos:function_node.last_token.endpos].rstrip"
    ],
    [
        "CALL_METHOD",
        "tokens.text[startpos:function_node.last_token.endpos].rstrip()"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_METHOD",
        "source.startswith"
    ],
    [
        "CALL_METHOD",
        "source.startswith('def')"
    ],
    [
        "LOAD_FAST",
        "startpos"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_ATTR",
        "t.string"
    ],
    [
        "COMPARE_OP",
        "t.string == 'def'"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_ATTR",
        "t.type"
    ],
    [
        "LOAD_GLOBAL",
        "token"
    ],
    [
        "LOAD_ATTR",
        "token.NAME"
    ],
    [
        "COMPARE_OP",
        "t.type == token.NAME"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_GLOBAL",
        "print"
    ],
    [
        "LOAD_FAST",
        "arg"
    ],
    [
        "CALL_FUNCTION",
        "print(arg)"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "CALL_FUNCTION",
        "len(args)"
    ],
    [
        "COMPARE_OP",
        "len(args) == 1"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "BINARY_SUBSCR",
        "args[0]"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_METHOD",
        "filename.startswith"
    ],
    [
        "CALL_METHOD",
        "filename.startswith('<ipython-input-')"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.ImportFrom"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.ImportFrom)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.module"
    ],
    [
        "COMPARE_OP",
        "node.module == \"__future__\""
    ],
    [
        "LOAD_GLOBAL",
        "ImportError"
    ],
    [
        "LOAD_FAST",
        "real_datetime"
    ],
    [
        "LOAD_METHOD",
        "real_datetime.now"
    ],
    [
        "CALL_METHOD",
        "real_datetime.now()"
    ]
]