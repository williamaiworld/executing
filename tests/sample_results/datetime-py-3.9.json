[
    [
        "LOAD_NAME",
        "_DAYS_IN_MONTH"
    ],
    [
        "BINARY_SUBSCR",
        "_DAYS_IN_MONTH[1:]"
    ],
    [
        "LOAD_NAME",
        "_DAYS_BEFORE_MONTH"
    ],
    [
        "LOAD_METHOD",
        "_DAYS_BEFORE_MONTH.append"
    ],
    [
        "LOAD_NAME",
        "dbm"
    ],
    [
        "CALL_METHOD",
        "_DAYS_BEFORE_MONTH.append(dbm)"
    ],
    [
        "LOAD_NAME",
        "dim"
    ],
    [
        "LOAD_NAME",
        "_days_before_year"
    ],
    [
        "CALL_FUNCTION",
        "_days_before_year(401)"
    ],
    [
        "LOAD_NAME",
        "_days_before_year"
    ],
    [
        "CALL_FUNCTION",
        "_days_before_year(101)"
    ],
    [
        "LOAD_NAME",
        "_days_before_year"
    ],
    [
        "CALL_FUNCTION",
        "_days_before_year(5)"
    ],
    [
        "LOAD_NAME",
        "_DI4Y"
    ],
    [
        "COMPARE_OP",
        "_DI4Y == 4 * 365 + 1"
    ],
    [
        "LOAD_NAME",
        "_DI400Y"
    ],
    [
        "LOAD_NAME",
        "_DI100Y"
    ],
    [
        "BINARY_MULTIPLY",
        "4 * _DI100Y"
    ],
    [
        "BINARY_ADD",
        "4 * _DI100Y + 1"
    ],
    [
        "COMPARE_OP",
        "_DI400Y == 4 * _DI100Y + 1"
    ],
    [
        "LOAD_NAME",
        "_DI100Y"
    ],
    [
        "LOAD_NAME",
        "_DI4Y"
    ],
    [
        "BINARY_MULTIPLY",
        "25 * _DI4Y"
    ],
    [
        "BINARY_SUBTRACT",
        "25 * _DI4Y - 1"
    ],
    [
        "COMPARE_OP",
        "_DI100Y == 25 * _DI4Y - 1"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(-999999999)"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "STORE_ATTR",
        "timedelta.min"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(days=999999999, hours=23, minutes=59, seconds=59,\n                          microseconds=999999)"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "STORE_ATTR",
        "timedelta.max"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(microseconds=1)"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "STORE_ATTR",
        "timedelta.resolution"
    ],
    [
        "LOAD_NAME",
        "date"
    ],
    [
        "LOAD_NAME",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "date(1, 1, 1)"
    ],
    [
        "LOAD_NAME",
        "date"
    ],
    [
        "STORE_ATTR",
        "date.min"
    ],
    [
        "LOAD_NAME",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "date(9999, 12, 31)"
    ],
    [
        "LOAD_NAME",
        "date"
    ],
    [
        "STORE_ATTR",
        "date.max"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(days=1)"
    ],
    [
        "LOAD_NAME",
        "date"
    ],
    [
        "STORE_ATTR",
        "date.resolution"
    ],
    [
        "LOAD_NAME",
        "tuple"
    ],
    [
        "LOAD_NAME",
        "IsoCalendarDate"
    ],
    [
        "LOAD_NAME",
        "tzinfo"
    ],
    [
        "LOAD_NAME",
        "time"
    ],
    [
        "LOAD_NAME",
        "time"
    ],
    [
        "CALL_FUNCTION",
        "time(0, 0, 0)"
    ],
    [
        "LOAD_NAME",
        "time"
    ],
    [
        "STORE_ATTR",
        "time.min"
    ],
    [
        "LOAD_NAME",
        "time"
    ],
    [
        "CALL_FUNCTION",
        "time(23, 59, 59, 999999)"
    ],
    [
        "LOAD_NAME",
        "time"
    ],
    [
        "STORE_ATTR",
        "time.max"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(microseconds=1)"
    ],
    [
        "LOAD_NAME",
        "time"
    ],
    [
        "STORE_ATTR",
        "time.resolution"
    ],
    [
        "LOAD_NAME",
        "date"
    ],
    [
        "LOAD_NAME",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "datetime(1, 1, 1)"
    ],
    [
        "LOAD_NAME",
        "datetime"
    ],
    [
        "STORE_ATTR",
        "datetime.min"
    ],
    [
        "LOAD_NAME",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "datetime(9999, 12, 31, 23, 59, 59, 999999)"
    ],
    [
        "LOAD_NAME",
        "datetime"
    ],
    [
        "STORE_ATTR",
        "datetime.max"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(microseconds=1)"
    ],
    [
        "LOAD_NAME",
        "datetime"
    ],
    [
        "STORE_ATTR",
        "datetime.resolution"
    ],
    [
        "LOAD_NAME",
        "tzinfo"
    ],
    [
        "LOAD_NAME",
        "timezone"
    ],
    [
        "LOAD_METHOD",
        "timezone._create"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0)"
    ],
    [
        "CALL_METHOD",
        "timezone._create(timedelta(0))"
    ],
    [
        "LOAD_NAME",
        "timezone"
    ],
    [
        "STORE_ATTR",
        "timezone.utc"
    ],
    [
        "LOAD_NAME",
        "timezone"
    ],
    [
        "LOAD_METHOD",
        "timezone._create"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(hours=23, minutes=59)"
    ],
    [
        "UNARY_NEGATIVE",
        "-timedelta(hours=23, minutes=59)"
    ],
    [
        "CALL_METHOD",
        "timezone._create(-timedelta(hours=23, minutes=59))"
    ],
    [
        "LOAD_NAME",
        "timezone"
    ],
    [
        "STORE_ATTR",
        "timezone.min"
    ],
    [
        "LOAD_NAME",
        "timezone"
    ],
    [
        "LOAD_METHOD",
        "timezone._create"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(hours=23, minutes=59)"
    ],
    [
        "CALL_METHOD",
        "timezone._create(timedelta(hours=23, minutes=59))"
    ],
    [
        "LOAD_NAME",
        "timezone"
    ],
    [
        "STORE_ATTR",
        "timezone.max"
    ],
    [
        "LOAD_NAME",
        "datetime"
    ],
    [
        "LOAD_NAME",
        "timezone"
    ],
    [
        "LOAD_ATTR",
        "timezone.utc"
    ],
    [
        "CALL_FUNCTION_KW",
        "datetime(1970, 1, 1, tzinfo=timezone.utc)"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "COMPARE_OP",
        "x == y"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "COMPARE_OP",
        "x > y"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "BINARY_MODULO",
        "year % 4"
    ],
    [
        "COMPARE_OP",
        "year % 4 == 0"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "BINARY_MODULO",
        "year % 100"
    ],
    [
        "COMPARE_OP",
        "year % 100 != 0"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "BINARY_MODULO",
        "year % 400"
    ],
    [
        "COMPARE_OP",
        "year % 400 == 0"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "BINARY_SUBTRACT",
        "year - 1"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "BINARY_MULTIPLY",
        "y*365"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "y//4"
    ],
    [
        "BINARY_ADD",
        "y*365 + y//4"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "y//100"
    ],
    [
        "BINARY_SUBTRACT",
        "y*365 + y//4 - y//100"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "y//400"
    ],
    [
        "BINARY_ADD",
        "y*365 + y//4 - y//100 + y//400"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "COMPARE_OP",
        "month == 2"
    ],
    [
        "LOAD_GLOBAL",
        "_is_leap"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_is_leap(year)"
    ],
    [
        "LOAD_GLOBAL",
        "_DAYS_IN_MONTH"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "BINARY_SUBSCR",
        "_DAYS_IN_MONTH[month]"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_GLOBAL",
        "_DAYS_BEFORE_MONTH"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "BINARY_SUBSCR",
        "_DAYS_BEFORE_MONTH[month]"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "COMPARE_OP",
        "month > 2"
    ],
    [
        "LOAD_GLOBAL",
        "_is_leap"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_is_leap(year)"
    ],
    [
        "BINARY_ADD",
        "_DAYS_BEFORE_MONTH[month] + (month > 2 and _is_leap(year))"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_GLOBAL",
        "_days_in_month"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "CALL_FUNCTION",
        "_days_in_month(year, month)"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "LOAD_FAST",
        "dim"
    ],
    [
        "LOAD_FAST",
        "dim"
    ],
    [
        "BINARY_MODULO",
        "'day must be in 1..%d' % dim"
    ],
    [
        "LOAD_GLOBAL",
        "_days_before_year"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_days_before_year(year)"
    ],
    [
        "LOAD_GLOBAL",
        "_days_before_month"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "CALL_FUNCTION",
        "_days_before_month(year, month)"
    ],
    [
        "BINARY_ADD",
        "_days_before_year(year) +\n            _days_before_month(year, month)"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "BINARY_ADD",
        "_days_before_year(year) +\n            _days_before_month(year, month) +\n            day"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "LOAD_GLOBAL",
        "_DI400Y"
    ],
    [
        "CALL_FUNCTION",
        "divmod(n, _DI400Y)"
    ],
    [
        "LOAD_FAST",
        "n400"
    ],
    [
        "BINARY_MULTIPLY",
        "n400 * 400"
    ],
    [
        "BINARY_ADD",
        "n400 * 400 + 1"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "LOAD_GLOBAL",
        "_DI100Y"
    ],
    [
        "CALL_FUNCTION",
        "divmod(n, _DI100Y)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "LOAD_GLOBAL",
        "_DI4Y"
    ],
    [
        "CALL_FUNCTION",
        "divmod(n, _DI4Y)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "CALL_FUNCTION",
        "divmod(n, 365)"
    ],
    [
        "LOAD_FAST",
        "n100"
    ],
    [
        "BINARY_MULTIPLY",
        "n100 * 100"
    ],
    [
        "LOAD_FAST",
        "n4"
    ],
    [
        "BINARY_MULTIPLY",
        "n4 * 4"
    ],
    [
        "BINARY_ADD",
        "n100 * 100 + n4 * 4"
    ],
    [
        "LOAD_FAST",
        "n1"
    ],
    [
        "BINARY_ADD",
        "n100 * 100 + n4 * 4 + n1"
    ],
    [
        "LOAD_FAST",
        "n1"
    ],
    [
        "COMPARE_OP",
        "n1 == 4"
    ],
    [
        "LOAD_FAST",
        "n100"
    ],
    [
        "COMPARE_OP",
        "n100 == 4"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "COMPARE_OP",
        "n == 0"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "BINARY_SUBTRACT",
        "year-1"
    ],
    [
        "LOAD_FAST",
        "n1"
    ],
    [
        "COMPARE_OP",
        "n1 == 3"
    ],
    [
        "LOAD_FAST",
        "n4"
    ],
    [
        "COMPARE_OP",
        "n4 != 24"
    ],
    [
        "LOAD_FAST",
        "n100"
    ],
    [
        "COMPARE_OP",
        "n100 == 3"
    ],
    [
        "LOAD_FAST",
        "leapyear"
    ],
    [
        "LOAD_GLOBAL",
        "_is_leap"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_is_leap(year)"
    ],
    [
        "COMPARE_OP",
        "leapyear == _is_leap(year)"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "BINARY_ADD",
        "n + 50"
    ],
    [
        "BINARY_RSHIFT",
        "(n + 50) >> 5"
    ],
    [
        "LOAD_GLOBAL",
        "_DAYS_BEFORE_MONTH"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "BINARY_SUBSCR",
        "_DAYS_BEFORE_MONTH[month]"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "COMPARE_OP",
        "month > 2"
    ],
    [
        "LOAD_FAST",
        "leapyear"
    ],
    [
        "BINARY_ADD",
        "_DAYS_BEFORE_MONTH[month] + (month > 2 and leapyear)"
    ],
    [
        "LOAD_FAST",
        "preceding"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "COMPARE_OP",
        "preceding > n"
    ],
    [
        "LOAD_GLOBAL",
        "_DAYS_IN_MONTH"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "BINARY_SUBSCR",
        "_DAYS_IN_MONTH[month]"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "COMPARE_OP",
        "month == 2"
    ],
    [
        "LOAD_FAST",
        "leapyear"
    ],
    [
        "BINARY_ADD",
        "_DAYS_IN_MONTH[month] + (month == 2 and leapyear)"
    ],
    [
        "LOAD_FAST",
        "preceding"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "LOAD_GLOBAL",
        "_days_in_month"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "CALL_FUNCTION",
        "_days_in_month(year, month)"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "BINARY_ADD",
        "n+1"
    ],
    [
        "LOAD_GLOBAL",
        "_ymd2ord"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "CALL_FUNCTION",
        "_ymd2ord(y, m, d)"
    ],
    [
        "BINARY_ADD",
        "_ymd2ord(y, m, d) + 6"
    ],
    [
        "BINARY_MODULO",
        "(_ymd2ord(y, m, d) + 6) % 7"
    ],
    [
        "LOAD_GLOBAL",
        "_days_before_month"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "CALL_FUNCTION",
        "_days_before_month(y, m)"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "BINARY_ADD",
        "_days_before_month(y, m) + d"
    ],
    [
        "LOAD_GLOBAL",
        "_time"
    ],
    [
        "LOAD_METHOD",
        "_time.struct_time"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "hh"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "LOAD_FAST",
        "wday"
    ],
    [
        "LOAD_FAST",
        "dnum"
    ],
    [
        "LOAD_FAST",
        "dstflag"
    ],
    [
        "CALL_METHOD",
        "_time.struct_time((y, m, d, hh, mm, ss, wday, dnum, dstflag))"
    ],
    [
        "LOAD_FAST",
        "timespec"
    ],
    [
        "COMPARE_OP",
        "timespec == 'auto'"
    ],
    [
        "LOAD_FAST",
        "us"
    ],
    [
        "LOAD_FAST",
        "timespec"
    ],
    [
        "COMPARE_OP",
        "timespec == 'milliseconds'"
    ],
    [
        "LOAD_FAST",
        "specs"
    ],
    [
        "LOAD_FAST",
        "timespec"
    ],
    [
        "BINARY_SUBSCR",
        "specs[timespec]"
    ],
    [
        "LOAD_GLOBAL",
        "KeyError"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError('Unknown timespec value')"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "LOAD_METHOD",
        "fmt.format"
    ],
    [
        "LOAD_FAST",
        "hh"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "LOAD_FAST",
        "us"
    ],
    [
        "CALL_METHOD",
        "fmt.format(hh, mm, ss, us)"
    ],
    [
        "LOAD_FAST",
        "off"
    ],
    [
        "IS_OP",
        "off is not None"
    ],
    [
        "LOAD_FAST",
        "off"
    ],
    [
        "LOAD_ATTR",
        "off.days"
    ],
    [
        "COMPARE_OP",
        "off.days < 0"
    ],
    [
        "LOAD_FAST",
        "off"
    ],
    [
        "UNARY_NEGATIVE",
        "-off"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "off"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(hours=1)"
    ],
    [
        "CALL_FUNCTION",
        "divmod(off, timedelta(hours=1))"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(minutes=1)"
    ],
    [
        "CALL_FUNCTION",
        "divmod(mm, timedelta(minutes=1))"
    ],
    [
        "LOAD_FAST",
        "sign"
    ],
    [
        "LOAD_FAST",
        "hh"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "BINARY_MODULO",
        "\"%s%02d:%02d\" % (sign, hh, mm)"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "LOAD_ATTR",
        "ss.microseconds"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "LOAD_ATTR",
        "ss.seconds"
    ],
    [
        "BINARY_MODULO",
        "\":%02d\" % ss.seconds"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "LOAD_ATTR",
        "ss.microseconds"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "LOAD_ATTR",
        "ss.microseconds"
    ],
    [
        "BINARY_MODULO",
        "'.%06d' % ss.microseconds"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_FAST",
        "newformat"
    ],
    [
        "LOAD_ATTR",
        "newformat.append"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "format"
    ],
    [
        "CALL_FUNCTION",
        "len(format)"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "COMPARE_OP",
        "i < n"
    ],
    [
        "LOAD_FAST",
        "format"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_SUBSCR",
        "format[i]"
    ],
    [
        "LOAD_FAST",
        "ch"
    ],
    [
        "COMPARE_OP",
        "ch == '%'"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "COMPARE_OP",
        "i < n"
    ],
    [
        "LOAD_FAST",
        "format"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_SUBSCR",
        "format[i]"
    ],
    [
        "LOAD_FAST",
        "ch"
    ],
    [
        "COMPARE_OP",
        "ch == 'f'"
    ],
    [
        "LOAD_FAST",
        "freplace"
    ],
    [
        "IS_OP",
        "freplace is None"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_FAST",
        "object"
    ],
    [
        "CALL_FUNCTION",
        "getattr(object,\n                                                    'microsecond', 0)"
    ],
    [
        "BINARY_MODULO",
        "'%06d' % getattr(object,\n                                                    'microsecond', 0)"
    ],
    [
        "LOAD_FAST",
        "newformat"
    ],
    [
        "LOAD_METHOD",
        "newformat.append"
    ],
    [
        "LOAD_FAST",
        "freplace"
    ],
    [
        "CALL_METHOD",
        "newformat.append(freplace)"
    ],
    [
        "LOAD_FAST",
        "ch"
    ],
    [
        "COMPARE_OP",
        "ch == 'z'"
    ],
    [
        "LOAD_FAST",
        "zreplace"
    ],
    [
        "IS_OP",
        "zreplace is None"
    ],
    [
        "LOAD_GLOBAL",
        "hasattr"
    ],
    [
        "LOAD_FAST",
        "object"
    ],
    [
        "CALL_FUNCTION",
        "hasattr(object, \"utcoffset\")"
    ],
    [
        "LOAD_FAST",
        "object"
    ],
    [
        "LOAD_METHOD",
        "object.utcoffset"
    ],
    [
        "CALL_METHOD",
        "object.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "IS_OP",
        "offset is not None"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_ATTR",
        "offset.days"
    ],
    [
        "COMPARE_OP",
        "offset.days < 0"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "UNARY_NEGATIVE",
        "-offset"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(hours=1)"
    ],
    [
        "CALL_FUNCTION",
        "divmod(offset, timedelta(hours=1))"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "rest"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(minutes=1)"
    ],
    [
        "CALL_FUNCTION",
        "divmod(rest, timedelta(minutes=1))"
    ],
    [
        "LOAD_FAST",
        "rest"
    ],
    [
        "LOAD_ATTR",
        "rest.seconds"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_ATTR",
        "offset.microseconds"
    ],
    [
        "LOAD_FAST",
        "u"
    ],
    [
        "LOAD_FAST",
        "sign"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_FAST",
        "u"
    ],
    [
        "BINARY_MODULO",
        "'%c%02d%02d%02d.%06d' % (sign, h, m, s, u)"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_FAST",
        "sign"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_MODULO",
        "'%c%02d%02d%02d' % (sign, h, m, s)"
    ],
    [
        "LOAD_FAST",
        "sign"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "BINARY_MODULO",
        "'%c%02d%02d' % (sign, h, m)"
    ],
    [
        "LOAD_FAST",
        "zreplace"
    ],
    [
        "CONTAINS_OP",
        "'%' not in zreplace"
    ],
    [
        "LOAD_FAST",
        "newformat"
    ],
    [
        "LOAD_METHOD",
        "newformat.append"
    ],
    [
        "LOAD_FAST",
        "zreplace"
    ],
    [
        "CALL_METHOD",
        "newformat.append(zreplace)"
    ],
    [
        "LOAD_FAST",
        "ch"
    ],
    [
        "COMPARE_OP",
        "ch == 'Z'"
    ],
    [
        "LOAD_FAST",
        "Zreplace"
    ],
    [
        "IS_OP",
        "Zreplace is None"
    ],
    [
        "LOAD_GLOBAL",
        "hasattr"
    ],
    [
        "LOAD_FAST",
        "object"
    ],
    [
        "CALL_FUNCTION",
        "hasattr(object, \"tzname\")"
    ],
    [
        "LOAD_FAST",
        "object"
    ],
    [
        "LOAD_METHOD",
        "object.tzname"
    ],
    [
        "CALL_METHOD",
        "object.tzname()"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "IS_OP",
        "s is not None"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_METHOD",
        "s.replace"
    ],
    [
        "CALL_METHOD",
        "s.replace('%', '%%')"
    ],
    [
        "LOAD_FAST",
        "newformat"
    ],
    [
        "LOAD_METHOD",
        "newformat.append"
    ],
    [
        "LOAD_FAST",
        "Zreplace"
    ],
    [
        "CALL_METHOD",
        "newformat.append(Zreplace)"
    ],
    [
        "LOAD_FAST",
        "push"
    ],
    [
        "CALL_FUNCTION",
        "push('%')"
    ],
    [
        "LOAD_FAST",
        "push"
    ],
    [
        "LOAD_FAST",
        "ch"
    ],
    [
        "CALL_FUNCTION",
        "push(ch)"
    ],
    [
        "LOAD_FAST",
        "push"
    ],
    [
        "CALL_FUNCTION",
        "push('%')"
    ],
    [
        "LOAD_FAST",
        "push"
    ],
    [
        "LOAD_FAST",
        "ch"
    ],
    [
        "CALL_FUNCTION",
        "push(ch)"
    ],
    [
        "LOAD_METHOD",
        "\"\".join"
    ],
    [
        "LOAD_FAST",
        "newformat"
    ],
    [
        "CALL_METHOD",
        "\"\".join(newformat)"
    ],
    [
        "LOAD_GLOBAL",
        "_time"
    ],
    [
        "LOAD_METHOD",
        "_time.strftime"
    ],
    [
        "LOAD_FAST",
        "newformat"
    ],
    [
        "LOAD_FAST",
        "timetuple"
    ],
    [
        "CALL_METHOD",
        "_time.strftime(newformat, timetuple)"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "CONTAINS_OP",
        "c in \"0123456789\""
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "CALL_FUNCTION",
        "len(dtstr)"
    ],
    [
        "LOAD_FAST",
        "len_dtstr"
    ],
    [
        "COMPARE_OP",
        "len_dtstr == 7"
    ],
    [
        "LOAD_FAST",
        "len_dtstr"
    ],
    [
        "COMPARE_OP",
        "len_dtstr > 7"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[4]"
    ],
    [
        "LOAD_FAST",
        "date_separator"
    ],
    [
        "COMPARE_OP",
        "dtstr[4] == date_separator"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[5]"
    ],
    [
        "LOAD_FAST",
        "week_indicator"
    ],
    [
        "COMPARE_OP",
        "dtstr[5] == week_indicator"
    ],
    [
        "LOAD_FAST",
        "len_dtstr"
    ],
    [
        "COMPARE_OP",
        "len_dtstr < 8"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"Invalid ISO string\")"
    ],
    [
        "LOAD_FAST",
        "len_dtstr"
    ],
    [
        "COMPARE_OP",
        "len_dtstr > 8"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[8]"
    ],
    [
        "LOAD_FAST",
        "date_separator"
    ],
    [
        "COMPARE_OP",
        "dtstr[8] == date_separator"
    ],
    [
        "LOAD_FAST",
        "len_dtstr"
    ],
    [
        "COMPARE_OP",
        "len_dtstr == 9"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"Invalid ISO string\")"
    ],
    [
        "LOAD_FAST",
        "len_dtstr"
    ],
    [
        "COMPARE_OP",
        "len_dtstr > 10"
    ],
    [
        "LOAD_GLOBAL",
        "_is_ascii_digit"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[10]"
    ],
    [
        "CALL_FUNCTION",
        "_is_ascii_digit(dtstr[10])"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[4]"
    ],
    [
        "LOAD_FAST",
        "week_indicator"
    ],
    [
        "COMPARE_OP",
        "dtstr[4] == week_indicator"
    ],
    [
        "LOAD_FAST",
        "idx"
    ],
    [
        "LOAD_FAST",
        "len_dtstr"
    ],
    [
        "COMPARE_OP",
        "idx < len_dtstr"
    ],
    [
        "LOAD_GLOBAL",
        "_is_ascii_digit"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "LOAD_FAST",
        "idx"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[idx]"
    ],
    [
        "CALL_FUNCTION",
        "_is_ascii_digit(dtstr[idx])"
    ],
    [
        "LOAD_FAST",
        "idx"
    ],
    [
        "COMPARE_OP",
        "idx < 9"
    ],
    [
        "LOAD_FAST",
        "idx"
    ],
    [
        "LOAD_FAST",
        "idx"
    ],
    [
        "BINARY_MODULO",
        "idx % 2"
    ],
    [
        "COMPARE_OP",
        "idx % 2 == 0"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "CALL_FUNCTION",
        "len(dtstr)"
    ],
    [
        "CONTAINS_OP",
        "len(dtstr) in (7, 8, 10)"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[0:4]"
    ],
    [
        "CALL_FUNCTION",
        "int(dtstr[0:4])"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[4]"
    ],
    [
        "COMPARE_OP",
        "dtstr[4] == '-'"
    ],
    [
        "LOAD_FAST",
        "has_sep"
    ],
    [
        "BINARY_ADD",
        "4 + has_sep"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[pos:pos + 1]"
    ],
    [
        "COMPARE_OP",
        "dtstr[pos:pos + 1] == \"W\""
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 2"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[pos:pos + 2]"
    ],
    [
        "CALL_FUNCTION",
        "int(dtstr[pos:pos + 2])"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "CALL_FUNCTION",
        "len(dtstr)"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "COMPARE_OP",
        "len(dtstr) > pos"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[pos:pos + 1]"
    ],
    [
        "COMPARE_OP",
        "dtstr[pos:pos + 1] == '-'"
    ],
    [
        "LOAD_FAST",
        "has_sep"
    ],
    [
        "COMPARE_OP",
        "(dtstr[pos:pos + 1] == '-') != has_sep"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"Inconsistent use of dash separator\")"
    ],
    [
        "LOAD_FAST",
        "has_sep"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[pos:pos + 1]"
    ],
    [
        "CALL_FUNCTION",
        "int(dtstr[pos:pos + 1])"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_GLOBAL",
        "_isoweek_to_gregorian"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "weekno"
    ],
    [
        "LOAD_FAST",
        "dayno"
    ],
    [
        "CALL_FUNCTION",
        "_isoweek_to_gregorian(year, weekno, dayno)"
    ],
    [
        "CALL_FUNCTION",
        "list(_isoweek_to_gregorian(year, weekno, dayno))"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 2"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[pos:pos + 2]"
    ],
    [
        "CALL_FUNCTION",
        "int(dtstr[pos:pos + 2])"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 1"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[pos:pos + 1]"
    ],
    [
        "COMPARE_OP",
        "dtstr[pos:pos + 1] == \"-\""
    ],
    [
        "LOAD_FAST",
        "has_sep"
    ],
    [
        "COMPARE_OP",
        "(dtstr[pos:pos + 1] == \"-\") != has_sep"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"Inconsistent use of dash separator\")"
    ],
    [
        "LOAD_FAST",
        "has_sep"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "dtstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos + 2"
    ],
    [
        "BINARY_SUBSCR",
        "dtstr[pos:pos + 2]"
    ],
    [
        "CALL_FUNCTION",
        "int(dtstr[pos:pos + 2])"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "CALL_FUNCTION",
        "len(tstr)"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "CALL_FUNCTION",
        "range(0, 3)"
    ],
    [
        "LOAD_FAST",
        "len_str"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBTRACT",
        "len_str - pos"
    ],
    [
        "COMPARE_OP",
        "(len_str - pos) < 2"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"Incomplete time component\")"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos+2"
    ],
    [
        "BINARY_SUBSCR",
        "tstr[pos:pos+2]"
    ],
    [
        "CALL_FUNCTION",
        "int(tstr[pos:pos+2])"
    ],
    [
        "LOAD_FAST",
        "time_comps"
    ],
    [
        "LOAD_FAST",
        "comp"
    ],
    [
        "STORE_SUBSCR",
        "time_comps[comp]"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_ADD",
        "pos+1"
    ],
    [
        "BINARY_SUBSCR",
        "tstr[pos:pos+1]"
    ],
    [
        "LOAD_FAST",
        "comp"
    ],
    [
        "COMPARE_OP",
        "comp == 0"
    ],
    [
        "LOAD_FAST",
        "next_char"
    ],
    [
        "COMPARE_OP",
        "next_char == ':'"
    ],
    [
        "LOAD_FAST",
        "next_char"
    ],
    [
        "LOAD_FAST",
        "comp"
    ],
    [
        "COMPARE_OP",
        "comp >= 2"
    ],
    [
        "LOAD_FAST",
        "has_sep"
    ],
    [
        "LOAD_FAST",
        "next_char"
    ],
    [
        "COMPARE_OP",
        "next_char != ':'"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "next_char"
    ],
    [
        "BINARY_MODULO",
        "\"Invalid time separator: %c\" % next_char"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"Invalid time separator: %c\" % next_char)"
    ],
    [
        "LOAD_FAST",
        "has_sep"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "len_str"
    ],
    [
        "COMPARE_OP",
        "pos < len_str"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBSCR",
        "tstr[pos]"
    ],
    [
        "CONTAINS_OP",
        "tstr[pos] not in '.,'"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"Invalid microsecond component\")"
    ],
    [
        "LOAD_FAST",
        "len_str"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "BINARY_SUBTRACT",
        "len_str - pos"
    ],
    [
        "LOAD_FAST",
        "len_remainder"
    ],
    [
        "COMPARE_OP",
        "len_remainder >= 6"
    ],
    [
        "LOAD_FAST",
        "len_remainder"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "to_parse"
    ],
    [
        "BINARY_ADD",
        "pos+to_parse"
    ],
    [
        "BINARY_SUBSCR",
        "tstr[pos:(pos+to_parse)]"
    ],
    [
        "CALL_FUNCTION",
        "int(tstr[pos:(pos+to_parse)])"
    ],
    [
        "LOAD_FAST",
        "time_comps"
    ],
    [
        "STORE_SUBSCR",
        "time_comps[3]"
    ],
    [
        "LOAD_FAST",
        "to_parse"
    ],
    [
        "COMPARE_OP",
        "to_parse < 6"
    ],
    [
        "LOAD_FAST",
        "time_comps"
    ],
    [
        "LOAD_GLOBAL",
        "_FRACTION_CORRECTION"
    ],
    [
        "LOAD_FAST",
        "to_parse"
    ],
    [
        "BINARY_SUBTRACT",
        "to_parse-1"
    ],
    [
        "BINARY_SUBSCR",
        "_FRACTION_CORRECTION[to_parse-1]"
    ],
    [
        "STORE_SUBSCR",
        "time_comps[3]"
    ],
    [
        "LOAD_FAST",
        "len_remainder"
    ],
    [
        "LOAD_FAST",
        "to_parse"
    ],
    [
        "COMPARE_OP",
        "len_remainder > to_parse"
    ],
    [
        "LOAD_GLOBAL",
        "all"
    ],
    [
        "LOAD_GLOBAL",
        "map"
    ],
    [
        "LOAD_GLOBAL",
        "_is_ascii_digit"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_FAST",
        "pos"
    ],
    [
        "LOAD_FAST",
        "to_parse"
    ],
    [
        "BINARY_ADD",
        "pos+to_parse"
    ],
    [
        "BINARY_SUBSCR",
        "tstr[(pos+to_parse):]"
    ],
    [
        "CALL_FUNCTION",
        "map(_is_ascii_digit, tstr[(pos+to_parse):])"
    ],
    [
        "CALL_FUNCTION",
        "all(map(_is_ascii_digit, tstr[(pos+to_parse):]))"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"Non-digit values in unparsed fraction\")"
    ],
    [
        "LOAD_FAST",
        "time_comps"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "CALL_FUNCTION",
        "len(tstr)"
    ],
    [
        "LOAD_FAST",
        "len_str"
    ],
    [
        "COMPARE_OP",
        "len_str < 2"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"Isoformat time too short\")"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_METHOD",
        "tstr.find"
    ],
    [
        "CALL_METHOD",
        "tstr.find('-')"
    ],
    [
        "BINARY_ADD",
        "tstr.find('-') + 1"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_METHOD",
        "tstr.find"
    ],
    [
        "CALL_METHOD",
        "tstr.find('+')"
    ],
    [
        "BINARY_ADD",
        "tstr.find('+') + 1"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_METHOD",
        "tstr.find"
    ],
    [
        "CALL_METHOD",
        "tstr.find('Z')"
    ],
    [
        "BINARY_ADD",
        "tstr.find('Z') + 1"
    ],
    [
        "LOAD_FAST",
        "tz_pos"
    ],
    [
        "COMPARE_OP",
        "tz_pos > 0"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_FAST",
        "tz_pos"
    ],
    [
        "BINARY_SUBTRACT",
        "tz_pos-1"
    ],
    [
        "BINARY_SUBSCR",
        "tstr[:tz_pos-1]"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_GLOBAL",
        "_parse_hh_mm_ss_ff"
    ],
    [
        "LOAD_FAST",
        "timestr"
    ],
    [
        "CALL_FUNCTION",
        "_parse_hh_mm_ss_ff(timestr)"
    ],
    [
        "LOAD_FAST",
        "tz_pos"
    ],
    [
        "LOAD_FAST",
        "len_str"
    ],
    [
        "COMPARE_OP",
        "tz_pos == len_str"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "BINARY_SUBSCR",
        "tstr[-1]"
    ],
    [
        "COMPARE_OP",
        "tstr[-1] == 'Z'"
    ],
    [
        "LOAD_GLOBAL",
        "timezone"
    ],
    [
        "LOAD_ATTR",
        "timezone.utc"
    ],
    [
        "LOAD_FAST",
        "tz_pos"
    ],
    [
        "COMPARE_OP",
        "tz_pos > 0"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_FAST",
        "tz_pos"
    ],
    [
        "BINARY_SUBSCR",
        "tstr[tz_pos:]"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "tzstr"
    ],
    [
        "CALL_FUNCTION",
        "len(tzstr)"
    ],
    [
        "CONTAINS_OP",
        "len(tzstr) in (0, 1, 3)"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"Malformed time zone string\")"
    ],
    [
        "LOAD_GLOBAL",
        "_parse_hh_mm_ss_ff"
    ],
    [
        "LOAD_FAST",
        "tzstr"
    ],
    [
        "CALL_FUNCTION",
        "_parse_hh_mm_ss_ff(tzstr)"
    ],
    [
        "LOAD_GLOBAL",
        "all"
    ],
    [
        "LOAD_FAST",
        "tz_comps"
    ],
    [
        "CALL_FUNCTION",
        "all(x == 0 for x in tz_comps)"
    ],
    [
        "LOAD_GLOBAL",
        "timezone"
    ],
    [
        "LOAD_ATTR",
        "timezone.utc"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_FAST",
        "tz_pos"
    ],
    [
        "BINARY_SUBTRACT",
        "tz_pos - 1"
    ],
    [
        "BINARY_SUBSCR",
        "tstr[tz_pos - 1]"
    ],
    [
        "COMPARE_OP",
        "tstr[tz_pos - 1] == '-'"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "tz_comps"
    ],
    [
        "BINARY_SUBSCR",
        "tz_comps[0]"
    ],
    [
        "LOAD_FAST",
        "tz_comps"
    ],
    [
        "BINARY_SUBSCR",
        "tz_comps[1]"
    ],
    [
        "LOAD_FAST",
        "tz_comps"
    ],
    [
        "BINARY_SUBSCR",
        "tz_comps[2]"
    ],
    [
        "LOAD_FAST",
        "tz_comps"
    ],
    [
        "BINARY_SUBSCR",
        "tz_comps[3]"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(hours=tz_comps[0], minutes=tz_comps[1],\n                           seconds=tz_comps[2], microseconds=tz_comps[3])"
    ],
    [
        "LOAD_GLOBAL",
        "timezone"
    ],
    [
        "LOAD_FAST",
        "tzsign"
    ],
    [
        "LOAD_FAST",
        "td"
    ],
    [
        "BINARY_MULTIPLY",
        "tzsign * td"
    ],
    [
        "CALL_FUNCTION",
        "timezone(tzsign * td)"
    ],
    [
        "LOAD_FAST",
        "time_comps"
    ],
    [
        "LOAD_METHOD",
        "time_comps.append"
    ],
    [
        "LOAD_FAST",
        "tzi"
    ],
    [
        "CALL_METHOD",
        "time_comps.append(tzi)"
    ],
    [
        "LOAD_FAST",
        "time_comps"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "COMPARE_OP",
        "x == 0"
    ],
    [
        "LOAD_GLOBAL",
        "MINYEAR"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_GLOBAL",
        "MAXYEAR"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(f\"Year is out of range: {year}\")"
    ],
    [
        "LOAD_FAST",
        "week"
    ],
    [
        "LOAD_FAST",
        "week"
    ],
    [
        "COMPARE_OP",
        "week == 53"
    ],
    [
        "LOAD_GLOBAL",
        "_ymd2ord"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_ymd2ord(year, 1, 1)"
    ],
    [
        "BINARY_MODULO",
        "_ymd2ord(year, 1, 1) % 7"
    ],
    [
        "LOAD_FAST",
        "first_weekday"
    ],
    [
        "COMPARE_OP",
        "first_weekday == 4"
    ],
    [
        "LOAD_FAST",
        "first_weekday"
    ],
    [
        "COMPARE_OP",
        "first_weekday == 3"
    ],
    [
        "LOAD_GLOBAL",
        "_is_leap"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_is_leap(year)"
    ],
    [
        "LOAD_FAST",
        "out_of_range"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "week"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(f\"Invalid week: {week}\")"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(f\"Invalid weekday: {day} (range is [1, 7])\")"
    ],
    [
        "LOAD_FAST",
        "week"
    ],
    [
        "BINARY_SUBTRACT",
        "week - 1"
    ],
    [
        "BINARY_MULTIPLY",
        "(week - 1) * 7"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "BINARY_SUBTRACT",
        "day - 1"
    ],
    [
        "BINARY_ADD",
        "(week - 1) * 7 + (day - 1)"
    ],
    [
        "LOAD_GLOBAL",
        "_isoweek1monday"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_isoweek1monday(year)"
    ],
    [
        "LOAD_FAST",
        "day_1"
    ],
    [
        "LOAD_FAST",
        "day_offset"
    ],
    [
        "BINARY_ADD",
        "day_1 + day_offset"
    ],
    [
        "LOAD_GLOBAL",
        "_ord2ymd"
    ],
    [
        "LOAD_FAST",
        "ord_day"
    ],
    [
        "CALL_FUNCTION",
        "_ord2ymd(ord_day)"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "IS_OP",
        "name is not None"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(name, str)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "CALL_FUNCTION",
        "type(name)"
    ],
    [
        "BINARY_MODULO",
        "\"tzinfo.tzname() must return None or string, \"\n                        \"not '%s'\" % type(name)"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"tzinfo.tzname() must return None or string, \"\n                        \"not '%s'\" % type(name))"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "CONTAINS_OP",
        "name in (\"utcoffset\", \"dst\")"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "IS_OP",
        "offset is None"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(offset, timedelta)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "CALL_FUNCTION",
        "type(offset)"
    ],
    [
        "BINARY_MODULO",
        "\"tzinfo.%s() must return None \"\n                        \"or timedelta, not '%s'\" % (name, type(offset))"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"tzinfo.%s() must return None \"\n                        \"or timedelta, not '%s'\" % (name, type(offset)))"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(1)"
    ],
    [
        "UNARY_NEGATIVE",
        "-timedelta(1)"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(1)"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "BINARY_MODULO",
        "\"%s()=%s, must be strictly between \"\n                         \"-timedelta(hours=24) and timedelta(hours=24)\" %\n                         (name, offset)"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"%s()=%s, must be strictly between \"\n                         \"-timedelta(hours=24) and timedelta(hours=24)\" %\n                         (name, offset))"
    ],
    [
        "LOAD_GLOBAL",
        "_index"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_index(year)"
    ],
    [
        "LOAD_GLOBAL",
        "_index"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "CALL_FUNCTION",
        "_index(month)"
    ],
    [
        "LOAD_GLOBAL",
        "_index"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "CALL_FUNCTION",
        "_index(day)"
    ],
    [
        "LOAD_GLOBAL",
        "MINYEAR"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_GLOBAL",
        "MAXYEAR"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_GLOBAL",
        "MINYEAR"
    ],
    [
        "LOAD_GLOBAL",
        "MAXYEAR"
    ],
    [
        "BINARY_MODULO",
        "'year must be in %d..%d' % (MINYEAR, MAXYEAR)"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "ValueError('year must be in %d..%d' % (MINYEAR, MAXYEAR), year)"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "CALL_FUNCTION",
        "ValueError('month must be in 1..12', month)"
    ],
    [
        "LOAD_GLOBAL",
        "_days_in_month"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "CALL_FUNCTION",
        "_days_in_month(year, month)"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "LOAD_FAST",
        "dim"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "dim"
    ],
    [
        "BINARY_MODULO",
        "'day must be in 1..%d' % dim"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "CALL_FUNCTION",
        "ValueError('day must be in 1..%d' % dim, day)"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "LOAD_GLOBAL",
        "_index"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "CALL_FUNCTION",
        "_index(hour)"
    ],
    [
        "LOAD_GLOBAL",
        "_index"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "CALL_FUNCTION",
        "_index(minute)"
    ],
    [
        "LOAD_GLOBAL",
        "_index"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "CALL_FUNCTION",
        "_index(second)"
    ],
    [
        "LOAD_GLOBAL",
        "_index"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "CALL_FUNCTION",
        "_index(microsecond)"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "CALL_FUNCTION",
        "ValueError('hour must be in 0..23', hour)"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "CALL_FUNCTION",
        "ValueError('minute must be in 0..59', minute)"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "CALL_FUNCTION",
        "ValueError('second must be in 0..59', second)"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "CALL_FUNCTION",
        "ValueError('microsecond must be in 0..999999', microsecond)"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "CONTAINS_OP",
        "fold not in (0, 1)"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "CALL_FUNCTION",
        "ValueError('fold must be either 0 or 1', fold)"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "IS_OP",
        "tz is not None"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "LOAD_GLOBAL",
        "tzinfo"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(tz, tzinfo)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"tzinfo argument must be None or of a tzinfo subclass\")"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "type(x)"
    ],
    [
        "LOAD_ATTR",
        "type(x).__name__"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "CALL_FUNCTION",
        "type(y)"
    ],
    [
        "LOAD_ATTR",
        "type(y).__name__"
    ],
    [
        "BINARY_MODULO",
        "\"can't compare '%s' to '%s'\" % (\n                    type(x).__name__, type(y).__name__)"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"can't compare '%s' to '%s'\" % (\n                    type(x).__name__, type(y).__name__))"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "CALL_FUNCTION",
        "divmod(a, b)"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "COMPARE_OP",
        "b > 0"
    ],
    [
        "LOAD_FAST",
        "r"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "COMPARE_OP",
        "r > b"
    ],
    [
        "LOAD_FAST",
        "r"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "COMPARE_OP",
        "r < b"
    ],
    [
        "LOAD_FAST",
        "greater_than_half"
    ],
    [
        "LOAD_FAST",
        "r"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "COMPARE_OP",
        "r == b"
    ],
    [
        "LOAD_FAST",
        "q"
    ],
    [
        "BINARY_MODULO",
        "q % 2"
    ],
    [
        "COMPARE_OP",
        "q % 2 == 1"
    ],
    [
        "LOAD_FAST",
        "q"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "__add__"
    ],
    [
        "LOAD_NAME",
        "__mul__"
    ],
    [
        "LOAD_FAST",
        "weeks"
    ],
    [
        "BINARY_MULTIPLY",
        "weeks*7"
    ],
    [
        "LOAD_FAST",
        "minutes"
    ],
    [
        "BINARY_MULTIPLY",
        "minutes*60"
    ],
    [
        "LOAD_FAST",
        "hours"
    ],
    [
        "BINARY_MULTIPLY",
        "hours*3600"
    ],
    [
        "BINARY_ADD",
        "minutes*60 + hours*3600"
    ],
    [
        "LOAD_FAST",
        "milliseconds"
    ],
    [
        "BINARY_MULTIPLY",
        "milliseconds*1000"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "LOAD_GLOBAL",
        "float"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(days, float)"
    ],
    [
        "LOAD_GLOBAL",
        "_math"
    ],
    [
        "LOAD_METHOD",
        "_math.modf"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "CALL_METHOD",
        "_math.modf(days)"
    ],
    [
        "LOAD_GLOBAL",
        "_math"
    ],
    [
        "LOAD_METHOD",
        "_math.modf"
    ],
    [
        "LOAD_FAST",
        "dayfrac"
    ],
    [
        "BINARY_MULTIPLY",
        "dayfrac * (24.*3600.)"
    ],
    [
        "CALL_METHOD",
        "_math.modf(dayfrac * (24.*3600.))"
    ],
    [
        "LOAD_FAST",
        "daysecondswhole"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "daysecondswhole"
    ],
    [
        "CALL_FUNCTION",
        "int(daysecondswhole)"
    ],
    [
        "COMPARE_OP",
        "daysecondswhole == int(daysecondswhole)"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "daysecondswhole"
    ],
    [
        "CALL_FUNCTION",
        "int(daysecondswhole)"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "CALL_FUNCTION",
        "int(days)"
    ],
    [
        "COMPARE_OP",
        "days == int(days)"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "CALL_FUNCTION",
        "int(days)"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "daysecondsfrac"
    ],
    [
        "LOAD_GLOBAL",
        "float"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(daysecondsfrac, float)"
    ],
    [
        "LOAD_GLOBAL",
        "abs"
    ],
    [
        "LOAD_FAST",
        "daysecondsfrac"
    ],
    [
        "CALL_FUNCTION",
        "abs(daysecondsfrac)"
    ],
    [
        "COMPARE_OP",
        "abs(daysecondsfrac) <= 1.0"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(d, int)"
    ],
    [
        "LOAD_GLOBAL",
        "abs"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "CALL_FUNCTION",
        "abs(s)"
    ],
    [
        "COMPARE_OP",
        "abs(s) <= 24 * 3600"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "LOAD_GLOBAL",
        "float"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(seconds, float)"
    ],
    [
        "LOAD_GLOBAL",
        "_math"
    ],
    [
        "LOAD_METHOD",
        "_math.modf"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "CALL_METHOD",
        "_math.modf(seconds)"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "CALL_FUNCTION",
        "int(seconds)"
    ],
    [
        "COMPARE_OP",
        "seconds == int(seconds)"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "CALL_FUNCTION",
        "int(seconds)"
    ],
    [
        "LOAD_FAST",
        "daysecondsfrac"
    ],
    [
        "LOAD_GLOBAL",
        "abs"
    ],
    [
        "LOAD_FAST",
        "secondsfrac"
    ],
    [
        "CALL_FUNCTION",
        "abs(secondsfrac)"
    ],
    [
        "COMPARE_OP",
        "abs(secondsfrac) <= 2.0"
    ],
    [
        "LOAD_FAST",
        "daysecondsfrac"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "secondsfrac"
    ],
    [
        "LOAD_GLOBAL",
        "float"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(secondsfrac, float)"
    ],
    [
        "LOAD_GLOBAL",
        "abs"
    ],
    [
        "LOAD_FAST",
        "secondsfrac"
    ],
    [
        "CALL_FUNCTION",
        "abs(secondsfrac)"
    ],
    [
        "COMPARE_OP",
        "abs(secondsfrac) <= 2.0"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(seconds, int)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "CALL_FUNCTION",
        "divmod(seconds, 24*3600)"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "CALL_FUNCTION",
        "int(seconds)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(s, int)"
    ],
    [
        "LOAD_GLOBAL",
        "abs"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "CALL_FUNCTION",
        "abs(s)"
    ],
    [
        "COMPARE_OP",
        "abs(s) <= 2 * 24 * 3600"
    ],
    [
        "LOAD_FAST",
        "secondsfrac"
    ],
    [
        "BINARY_MULTIPLY",
        "secondsfrac * 1e6"
    ],
    [
        "LOAD_GLOBAL",
        "abs"
    ],
    [
        "LOAD_FAST",
        "usdouble"
    ],
    [
        "CALL_FUNCTION",
        "abs(usdouble)"
    ],
    [
        "COMPARE_OP",
        "abs(usdouble) < 2.1e6"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "LOAD_GLOBAL",
        "float"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(microseconds, float)"
    ],
    [
        "LOAD_GLOBAL",
        "round"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "LOAD_FAST",
        "usdouble"
    ],
    [
        "BINARY_ADD",
        "microseconds + usdouble"
    ],
    [
        "CALL_FUNCTION",
        "round(microseconds + usdouble)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "CALL_FUNCTION",
        "divmod(microseconds, 1000000)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "CALL_FUNCTION",
        "divmod(seconds, 24*3600)"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "CALL_FUNCTION",
        "int(microseconds)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "CALL_FUNCTION",
        "divmod(microseconds, 1000000)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "CALL_FUNCTION",
        "divmod(seconds, 24*3600)"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "LOAD_GLOBAL",
        "round"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "LOAD_FAST",
        "usdouble"
    ],
    [
        "BINARY_ADD",
        "microseconds + usdouble"
    ],
    [
        "CALL_FUNCTION",
        "round(microseconds + usdouble)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(s, int)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(microseconds, int)"
    ],
    [
        "LOAD_GLOBAL",
        "abs"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "CALL_FUNCTION",
        "abs(s)"
    ],
    [
        "COMPARE_OP",
        "abs(s) <= 3 * 24 * 3600"
    ],
    [
        "LOAD_GLOBAL",
        "abs"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "CALL_FUNCTION",
        "abs(microseconds)"
    ],
    [
        "COMPARE_OP",
        "abs(microseconds) < 3.1e6"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "CALL_FUNCTION",
        "divmod(microseconds, 1000000)"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "CALL_FUNCTION",
        "divmod(s, 24*3600)"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(d, int)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(s, int)"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "us"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(us, int)"
    ],
    [
        "LOAD_FAST",
        "us"
    ],
    [
        "LOAD_GLOBAL",
        "abs"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "CALL_FUNCTION",
        "abs(d)"
    ],
    [
        "COMPARE_OP",
        "abs(d) > 999999999"
    ],
    [
        "LOAD_GLOBAL",
        "OverflowError"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "BINARY_MODULO",
        "\"timedelta # of days is too large: %d\" % d"
    ],
    [
        "CALL_FUNCTION",
        "OverflowError(\"timedelta # of days is too large: %d\" % d)"
    ],
    [
        "LOAD_GLOBAL",
        "object"
    ],
    [
        "LOAD_METHOD",
        "object.__new__"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "CALL_METHOD",
        "object.__new__(cls)"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._days"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._seconds"
    ],
    [
        "LOAD_FAST",
        "us"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._microseconds"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_METHOD",
        "args.append"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "BINARY_MODULO",
        "\"days=%d\" % self._days"
    ],
    [
        "CALL_METHOD",
        "args.append(\"days=%d\" % self._days)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_METHOD",
        "args.append"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "BINARY_MODULO",
        "\"seconds=%d\" % self._seconds"
    ],
    [
        "CALL_METHOD",
        "args.append(\"seconds=%d\" % self._seconds)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_METHOD",
        "args.append"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "BINARY_MODULO",
        "\"microseconds=%d\" % self._microseconds"
    ],
    [
        "CALL_METHOD",
        "args.append(\"microseconds=%d\" % self._microseconds)"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_METHOD",
        "args.append"
    ],
    [
        "CALL_METHOD",
        "args.append('0')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__module__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__qualname__"
    ],
    [
        "LOAD_METHOD",
        "', '.join"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "CALL_METHOD",
        "', '.join(args)"
    ],
    [
        "BINARY_MODULO",
        "\"%s.%s(%s)\" % (self.__class__.__module__,\n                              self.__class__.__qualname__,\n                              ', '.join(args))"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "CALL_FUNCTION",
        "divmod(self._seconds, 60)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "CALL_FUNCTION",
        "divmod(mm, 60)"
    ],
    [
        "LOAD_FAST",
        "hh"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "BINARY_MODULO",
        "\"%d:%02d:%02d\" % (hh, mm, ss)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "LOAD_FAST",
        "plural"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "CALL_FUNCTION",
        "plural(self._days)"
    ],
    [
        "BINARY_MODULO",
        "\"%d day%s, \" % plural(self._days)"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_ADD",
        "(\"%d day%s, \" % plural(self._days)) + s"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "BINARY_MODULO",
        "\".%06d\" % self._microseconds"
    ],
    [
        "BINARY_ADD",
        "s + \".%06d\" % self._microseconds"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "LOAD_GLOBAL",
        "abs"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "CALL_FUNCTION",
        "abs(n)"
    ],
    [
        "COMPARE_OP",
        "abs(n) != 1"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.days"
    ],
    [
        "BINARY_MULTIPLY",
        "self.days * 86400"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.seconds"
    ],
    [
        "BINARY_ADD",
        "self.days * 86400 + self.seconds"
    ],
    [
        "BINARY_MULTIPLY",
        "(self.days * 86400 + self.seconds) * 10**6"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.microseconds"
    ],
    [
        "BINARY_ADD",
        "(self.days * 86400 + self.seconds) * 10**6 +\n                self.microseconds"
    ],
    [
        "BINARY_TRUE_DIVIDE",
        "((self.days * 86400 + self.seconds) * 10**6 +\n                self.microseconds) / 10**6"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._days"
    ],
    [
        "BINARY_ADD",
        "self._days + other._days"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._seconds"
    ],
    [
        "BINARY_ADD",
        "self._seconds + other._seconds"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._microseconds"
    ],
    [
        "BINARY_ADD",
        "self._microseconds + other._microseconds"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(self._days + other._days,\n                             self._seconds + other._seconds,\n                             self._microseconds + other._microseconds)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._days"
    ],
    [
        "BINARY_SUBTRACT",
        "self._days - other._days"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._seconds"
    ],
    [
        "BINARY_SUBTRACT",
        "self._seconds - other._seconds"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._microseconds"
    ],
    [
        "BINARY_SUBTRACT",
        "self._microseconds - other._microseconds"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(self._days - other._days,\n                             self._seconds - other._seconds,\n                             self._microseconds - other._microseconds)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "UNARY_NEGATIVE",
        "-self"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "BINARY_ADD",
        "-self + other"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "UNARY_NEGATIVE",
        "-self._days"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "UNARY_NEGATIVE",
        "-self._seconds"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "UNARY_NEGATIVE",
        "-self._microseconds"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(-self._days,\n                         -self._seconds,\n                         -self._microseconds)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "COMPARE_OP",
        "self._days < 0"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "UNARY_NEGATIVE",
        "-self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, int)"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "BINARY_MULTIPLY",
        "self._days * other"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "BINARY_MULTIPLY",
        "self._seconds * other"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "BINARY_MULTIPLY",
        "self._microseconds * other"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(self._days * other,\n                             self._seconds * other,\n                             self._microseconds * other)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "float"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, float)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._to_microseconds"
    ],
    [
        "CALL_METHOD",
        "self._to_microseconds()"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other.as_integer_ratio"
    ],
    [
        "CALL_METHOD",
        "other.as_integer_ratio()"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_GLOBAL",
        "_divide_and_round"
    ],
    [
        "LOAD_FAST",
        "usec"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "BINARY_MULTIPLY",
        "usec * a"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "CALL_FUNCTION",
        "_divide_and_round(usec * a, b)"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0, 0, _divide_and_round(usec * a, b))"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "BINARY_MULTIPLY",
        "self._days * (24*3600)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "BINARY_ADD",
        "self._days * (24*3600) + self._seconds"
    ],
    [
        "BINARY_MULTIPLY",
        "(self._days * (24*3600) + self._seconds) * 1000000"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "BINARY_ADD",
        "(self._days * (24*3600) + self._seconds) * 1000000 +\n                self._microseconds"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, (int, timedelta))"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._to_microseconds"
    ],
    [
        "CALL_METHOD",
        "self._to_microseconds()"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "usec"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other._to_microseconds"
    ],
    [
        "CALL_METHOD",
        "other._to_microseconds()"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "usec // other._to_microseconds()"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, int)"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "usec"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "usec // other"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0, 0, usec // other)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "LOAD_GLOBAL",
        "float"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, (int, float, timedelta))"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._to_microseconds"
    ],
    [
        "CALL_METHOD",
        "self._to_microseconds()"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "usec"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other._to_microseconds"
    ],
    [
        "CALL_METHOD",
        "other._to_microseconds()"
    ],
    [
        "BINARY_TRUE_DIVIDE",
        "usec / other._to_microseconds()"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, int)"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_GLOBAL",
        "_divide_and_round"
    ],
    [
        "LOAD_FAST",
        "usec"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_FUNCTION",
        "_divide_and_round(usec, other)"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0, 0, _divide_and_round(usec, other))"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "float"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, float)"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other.as_integer_ratio"
    ],
    [
        "CALL_METHOD",
        "other.as_integer_ratio()"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_GLOBAL",
        "_divide_and_round"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "LOAD_FAST",
        "usec"
    ],
    [
        "BINARY_MULTIPLY",
        "b * usec"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "CALL_FUNCTION",
        "_divide_and_round(b * usec, a)"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0, 0, _divide_and_round(b * usec, a))"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._to_microseconds"
    ],
    [
        "CALL_METHOD",
        "self._to_microseconds()"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other._to_microseconds"
    ],
    [
        "CALL_METHOD",
        "other._to_microseconds()"
    ],
    [
        "BINARY_MODULO",
        "self._to_microseconds() % other._to_microseconds()"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "r"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0, 0, r)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._to_microseconds"
    ],
    [
        "CALL_METHOD",
        "self._to_microseconds()"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other._to_microseconds"
    ],
    [
        "CALL_METHOD",
        "other._to_microseconds()"
    ],
    [
        "CALL_FUNCTION",
        "divmod(self._to_microseconds(),\n                          other._to_microseconds())"
    ],
    [
        "LOAD_FAST",
        "q"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "r"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0, 0, r)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) == 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) <= 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) < 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) >= 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) > 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_GLOBAL",
        "_cmp"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._getstate"
    ],
    [
        "CALL_METHOD",
        "self._getstate()"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other._getstate"
    ],
    [
        "CALL_METHOD",
        "other._getstate()"
    ],
    [
        "CALL_FUNCTION",
        "_cmp(self._getstate(), other._getstate())"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hashcode"
    ],
    [
        "COMPARE_OP",
        "self._hashcode == -1"
    ],
    [
        "LOAD_GLOBAL",
        "hash"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._getstate"
    ],
    [
        "CALL_METHOD",
        "self._getstate()"
    ],
    [
        "CALL_FUNCTION",
        "hash(self._getstate())"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "COMPARE_OP",
        "self._days != 0"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "COMPARE_OP",
        "self._seconds != 0"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "COMPARE_OP",
        "self._microseconds != 0"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._days"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._seconds"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microseconds"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._getstate"
    ],
    [
        "CALL_METHOD",
        "self._getstate()"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "isoformat"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "__add__"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "IS_OP",
        "month is None"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_GLOBAL",
        "bytes"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(year, (bytes, str))"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "len(year)"
    ],
    [
        "COMPARE_OP",
        "len(year) == 4"
    ],
    [
        "LOAD_GLOBAL",
        "ord"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "BINARY_SUBSCR",
        "year[2:3]"
    ],
    [
        "CALL_FUNCTION",
        "ord(year[2:3])"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(year, str)"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_METHOD",
        "year.encode"
    ],
    [
        "CALL_METHOD",
        "year.encode('latin1')"
    ],
    [
        "LOAD_GLOBAL",
        "UnicodeEncodeError"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\n                        \"Failed to encode latin1 string when unpickling \"\n                        \"a date object. \"\n                        \"pickle.load(data, encoding='latin1') is assumed.\")"
    ],
    [
        "LOAD_GLOBAL",
        "object"
    ],
    [
        "LOAD_METHOD",
        "object.__new__"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "CALL_METHOD",
        "object.__new__(cls)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.__setstate"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_METHOD",
        "self.__setstate(year)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_GLOBAL",
        "_check_date_fields"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "CALL_FUNCTION",
        "_check_date_fields(year, month, day)"
    ],
    [
        "LOAD_GLOBAL",
        "object"
    ],
    [
        "LOAD_METHOD",
        "object.__new__"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "CALL_METHOD",
        "object.__new__(cls)"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_GLOBAL",
        "_time"
    ],
    [
        "LOAD_METHOD",
        "_time.localtime"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "CALL_METHOD",
        "_time.localtime(t)"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "CALL_FUNCTION",
        "cls(y, m, d)"
    ],
    [
        "LOAD_GLOBAL",
        "_time"
    ],
    [
        "LOAD_METHOD",
        "_time.time"
    ],
    [
        "CALL_METHOD",
        "_time.time()"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_METHOD",
        "cls.fromtimestamp"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "CALL_METHOD",
        "cls.fromtimestamp(t)"
    ],
    [
        "LOAD_GLOBAL",
        "_ord2ymd"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "CALL_FUNCTION",
        "_ord2ymd(n)"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "CALL_FUNCTION",
        "cls(y, m, d)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(date_string, str)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError('fromisoformat: argument must be str')"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "CALL_FUNCTION",
        "len(date_string)"
    ],
    [
        "CONTAINS_OP",
        "len(date_string) not in (7, 8, 10)"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(f'Invalid isoformat string: {date_string!r}')"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_GLOBAL",
        "_parse_isoformat_date"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "CALL_FUNCTION",
        "_parse_isoformat_date(date_string)"
    ],
    [
        "CALL_FUNCTION_EX",
        "cls(*_parse_isoformat_date(date_string))"
    ],
    [
        "LOAD_GLOBAL",
        "Exception"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(f'Invalid isoformat string: {date_string!r}')"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_GLOBAL",
        "_isoweek_to_gregorian"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "week"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "CALL_FUNCTION",
        "_isoweek_to_gregorian(year, week, day)"
    ],
    [
        "CALL_FUNCTION_EX",
        "cls(*_isoweek_to_gregorian(year, week, day))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__module__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__qualname__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "BINARY_MODULO",
        "\"%s.%s(%d, %d, %d)\" % (self.__class__.__module__,\n                                      self.__class__.__qualname__,\n                                      self._year,\n                                      self._month,\n                                      self._day)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.toordinal"
    ],
    [
        "CALL_METHOD",
        "self.toordinal()"
    ],
    [
        "BINARY_MODULO",
        "self.toordinal() % 7"
    ],
    [
        "LOAD_GLOBAL",
        "_DAYNAMES"
    ],
    [
        "LOAD_FAST",
        "weekday"
    ],
    [
        "BINARY_SUBSCR",
        "_DAYNAMES[weekday]"
    ],
    [
        "LOAD_GLOBAL",
        "_MONTHNAMES"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "BINARY_SUBSCR",
        "_MONTHNAMES[self._month]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "BINARY_MODULO",
        "\"%s %s %2d 00:00:00 %04d\" % (\n            _DAYNAMES[weekday],\n            _MONTHNAMES[self._month],\n            self._day, self._year)"
    ],
    [
        "LOAD_GLOBAL",
        "_wrap_strftime"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.timetuple"
    ],
    [
        "CALL_METHOD",
        "self.timetuple()"
    ],
    [
        "CALL_FUNCTION",
        "_wrap_strftime(self, fmt, self.timetuple())"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(fmt, str)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "CALL_FUNCTION",
        "type(fmt)"
    ],
    [
        "LOAD_ATTR",
        "type(fmt).__name__"
    ],
    [
        "BINARY_MODULO",
        "\"must be str, not %s\" % type(fmt).__name__"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"must be str, not %s\" % type(fmt).__name__)"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "CALL_FUNCTION",
        "len(fmt)"
    ],
    [
        "COMPARE_OP",
        "len(fmt) != 0"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.strftime"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "CALL_METHOD",
        "self.strftime(fmt)"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "str(self)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "BINARY_MODULO",
        "\"%04d-%02d-%02d\" % (self._year, self._month, self._day)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "LOAD_GLOBAL",
        "_build_struct_time"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "CALL_FUNCTION",
        "_build_struct_time(self._year, self._month, self._day,\n                                  0, 0, 0, -1)"
    ],
    [
        "LOAD_GLOBAL",
        "_ymd2ord"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "CALL_FUNCTION",
        "_ymd2ord(self._year, self._month, self._day)"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "IS_OP",
        "year is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "IS_OP",
        "month is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "IS_OP",
        "day is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "type(self)"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "CALL_FUNCTION",
        "type(self)(year, month, day)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) == 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) <= 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) < 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) >= 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) > 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._year"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._month"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._day"
    ],
    [
        "LOAD_GLOBAL",
        "_cmp"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "y2"
    ],
    [
        "LOAD_FAST",
        "m2"
    ],
    [
        "LOAD_FAST",
        "d2"
    ],
    [
        "CALL_FUNCTION",
        "_cmp((y, m, d), (y2, m2, d2))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hashcode"
    ],
    [
        "COMPARE_OP",
        "self._hashcode == -1"
    ],
    [
        "LOAD_GLOBAL",
        "hash"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._getstate"
    ],
    [
        "CALL_METHOD",
        "self._getstate()"
    ],
    [
        "CALL_FUNCTION",
        "hash(self._getstate())"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.toordinal"
    ],
    [
        "CALL_METHOD",
        "self.toordinal()"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other.days"
    ],
    [
        "BINARY_ADD",
        "self.toordinal() + other.days"
    ],
    [
        "LOAD_FAST",
        "o"
    ],
    [
        "LOAD_GLOBAL",
        "_MAXORDINAL"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "type(self)"
    ],
    [
        "LOAD_METHOD",
        "type(self).fromordinal"
    ],
    [
        "LOAD_FAST",
        "o"
    ],
    [
        "CALL_METHOD",
        "type(self).fromordinal(o)"
    ],
    [
        "LOAD_GLOBAL",
        "OverflowError"
    ],
    [
        "CALL_FUNCTION",
        "OverflowError(\"result out of range\")"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other.days"
    ],
    [
        "UNARY_NEGATIVE",
        "-other.days"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(-other.days)"
    ],
    [
        "BINARY_ADD",
        "self + timedelta(-other.days)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.toordinal"
    ],
    [
        "CALL_METHOD",
        "self.toordinal()"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other.toordinal"
    ],
    [
        "CALL_METHOD",
        "other.toordinal()"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "days1"
    ],
    [
        "LOAD_FAST",
        "days2"
    ],
    [
        "BINARY_SUBTRACT",
        "days1 - days2"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(days1 - days2)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.toordinal"
    ],
    [
        "CALL_METHOD",
        "self.toordinal()"
    ],
    [
        "BINARY_ADD",
        "self.toordinal() + 6"
    ],
    [
        "BINARY_MODULO",
        "(self.toordinal() + 6) % 7"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.toordinal"
    ],
    [
        "CALL_METHOD",
        "self.toordinal()"
    ],
    [
        "BINARY_MODULO",
        "self.toordinal() % 7"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_GLOBAL",
        "_isoweek1monday"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_isoweek1monday(year)"
    ],
    [
        "LOAD_GLOBAL",
        "_ymd2ord"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "CALL_FUNCTION",
        "_ymd2ord(self._year, self._month, self._day)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "today"
    ],
    [
        "LOAD_FAST",
        "week1monday"
    ],
    [
        "BINARY_SUBTRACT",
        "today - week1monday"
    ],
    [
        "CALL_FUNCTION",
        "divmod(today - week1monday, 7)"
    ],
    [
        "LOAD_FAST",
        "week"
    ],
    [
        "COMPARE_OP",
        "week < 0"
    ],
    [
        "LOAD_GLOBAL",
        "_isoweek1monday"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_isoweek1monday(year)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "today"
    ],
    [
        "LOAD_FAST",
        "week1monday"
    ],
    [
        "BINARY_SUBTRACT",
        "today - week1monday"
    ],
    [
        "CALL_FUNCTION",
        "divmod(today - week1monday, 7)"
    ],
    [
        "LOAD_FAST",
        "week"
    ],
    [
        "COMPARE_OP",
        "week >= 52"
    ],
    [
        "LOAD_FAST",
        "today"
    ],
    [
        "LOAD_GLOBAL",
        "_isoweek1monday"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "BINARY_ADD",
        "year+1"
    ],
    [
        "CALL_FUNCTION",
        "_isoweek1monday(year+1)"
    ],
    [
        "COMPARE_OP",
        "today >= _isoweek1monday(year+1)"
    ],
    [
        "LOAD_GLOBAL",
        "_IsoCalendarDate"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "week"
    ],
    [
        "BINARY_ADD",
        "week+1"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "BINARY_ADD",
        "day+1"
    ],
    [
        "CALL_FUNCTION",
        "_IsoCalendarDate(year, week+1, day+1)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "CALL_FUNCTION",
        "divmod(self._year, 256)"
    ],
    [
        "LOAD_GLOBAL",
        "bytes"
    ],
    [
        "LOAD_FAST",
        "yhi"
    ],
    [
        "LOAD_FAST",
        "ylo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "CALL_FUNCTION",
        "bytes([yhi, ylo, self._month, self._day])"
    ],
    [
        "LOAD_FAST",
        "string"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "yhi"
    ],
    [
        "BINARY_MULTIPLY",
        "yhi * 256"
    ],
    [
        "LOAD_FAST",
        "ylo"
    ],
    [
        "BINARY_ADD",
        "yhi * 256 + ylo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._getstate"
    ],
    [
        "CALL_METHOD",
        "self._getstate()"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplementedError"
    ],
    [
        "CALL_FUNCTION",
        "NotImplementedError(\"tzinfo subclass must override tzname()\")"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplementedError"
    ],
    [
        "CALL_FUNCTION",
        "NotImplementedError(\"tzinfo subclass must override utcoffset()\")"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplementedError"
    ],
    [
        "CALL_FUNCTION",
        "NotImplementedError(\"tzinfo subclass must override dst()\")"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(dt, datetime)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"fromutc() requires a datetime argument\")"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_ATTR",
        "dt.tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "IS_OP",
        "dt.tzinfo is not self"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"dt.tzinfo is not self\")"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_METHOD",
        "dt.utcoffset"
    ],
    [
        "CALL_METHOD",
        "dt.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "dtoff"
    ],
    [
        "IS_OP",
        "dtoff is None"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"fromutc() requires a non-None utcoffset() \"\n                             \"result\")"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_METHOD",
        "dt.dst"
    ],
    [
        "CALL_METHOD",
        "dt.dst()"
    ],
    [
        "LOAD_FAST",
        "dtdst"
    ],
    [
        "IS_OP",
        "dtdst is None"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"fromutc() requires a non-None dst() result\")"
    ],
    [
        "LOAD_FAST",
        "dtoff"
    ],
    [
        "LOAD_FAST",
        "dtdst"
    ],
    [
        "BINARY_SUBTRACT",
        "dtoff - dtdst"
    ],
    [
        "LOAD_FAST",
        "delta"
    ],
    [
        "LOAD_FAST",
        "delta"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_METHOD",
        "dt.dst"
    ],
    [
        "CALL_METHOD",
        "dt.dst()"
    ],
    [
        "LOAD_FAST",
        "dtdst"
    ],
    [
        "IS_OP",
        "dtdst is None"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"fromutc(): dt.dst gave inconsistent \"\n                                 \"results; cannot convert\")"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_FAST",
        "dtdst"
    ],
    [
        "BINARY_ADD",
        "dt + dtdst"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "getattr(self, \"__getinitargs__\", None)"
    ],
    [
        "LOAD_FAST",
        "getinitargs"
    ],
    [
        "LOAD_FAST",
        "getinitargs"
    ],
    [
        "CALL_FUNCTION",
        "getinitargs()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_FAST",
        "args"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.__getstate__"
    ],
    [
        "CALL_METHOD",
        "self.__getstate__()"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_GLOBAL",
        "super"
    ],
    [
        "CALL_FUNCTION",
        "super()"
    ],
    [
        "LOAD_METHOD",
        "super().__new__"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "week"
    ],
    [
        "LOAD_FAST",
        "weekday"
    ],
    [
        "CALL_METHOD",
        "super().__new__(cls, (year, week, weekday))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "BINARY_SUBSCR",
        "self[0]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "BINARY_SUBSCR",
        "self[1]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "BINARY_SUBSCR",
        "self[2]"
    ],
    [
        "LOAD_GLOBAL",
        "tuple"
    ],
    [
        "LOAD_GLOBAL",
        "tuple"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "tuple(self)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__name__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "BINARY_SUBSCR",
        "self[0]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "BINARY_SUBSCR",
        "self[1]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "BINARY_SUBSCR",
        "self[2]"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "isoformat"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_GLOBAL",
        "bytes"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(hour, (bytes, str))"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "CALL_FUNCTION",
        "len(hour)"
    ],
    [
        "COMPARE_OP",
        "len(hour) == 6"
    ],
    [
        "LOAD_GLOBAL",
        "ord"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "BINARY_SUBSCR",
        "hour[0:1]"
    ],
    [
        "CALL_FUNCTION",
        "ord(hour[0:1])"
    ],
    [
        "BINARY_AND",
        "ord(hour[0:1])&0x7F"
    ],
    [
        "COMPARE_OP",
        "ord(hour[0:1])&0x7F < 24"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(hour, str)"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_METHOD",
        "hour.encode"
    ],
    [
        "CALL_METHOD",
        "hour.encode('latin1')"
    ],
    [
        "LOAD_GLOBAL",
        "UnicodeEncodeError"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\n                        \"Failed to encode latin1 string when unpickling \"\n                        \"a time object. \"\n                        \"pickle.load(data, encoding='latin1') is assumed.\")"
    ],
    [
        "LOAD_GLOBAL",
        "object"
    ],
    [
        "LOAD_METHOD",
        "object.__new__"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "CALL_METHOD",
        "object.__new__(cls)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.__setstate"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "CALL_METHOD",
        "self.__setstate(hour, minute or None)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_GLOBAL",
        "_check_time_fields"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "CALL_FUNCTION",
        "_check_time_fields(\n            hour, minute, second, microsecond, fold)"
    ],
    [
        "LOAD_GLOBAL",
        "_check_tzinfo_arg"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "CALL_FUNCTION",
        "_check_tzinfo_arg(tzinfo)"
    ],
    [
        "LOAD_GLOBAL",
        "object"
    ],
    [
        "LOAD_METHOD",
        "object.__new__"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "CALL_METHOD",
        "object.__new__(cls)"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._fold"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._fold"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, time)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_FUNCTION_KW",
        "self._cmp(other, allow_mixed=True)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other, allow_mixed=True) == 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, time)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) <= 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, time)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) < 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, time)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) >= 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, time)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) > 0"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, time)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._tzinfo"
    ],
    [
        "LOAD_FAST",
        "mytz"
    ],
    [
        "LOAD_FAST",
        "ottz"
    ],
    [
        "IS_OP",
        "mytz is ottz"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.utcoffset"
    ],
    [
        "CALL_METHOD",
        "self.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other.utcoffset"
    ],
    [
        "CALL_METHOD",
        "other.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "myoff"
    ],
    [
        "LOAD_FAST",
        "otoff"
    ],
    [
        "COMPARE_OP",
        "myoff == otoff"
    ],
    [
        "LOAD_FAST",
        "base_compare"
    ],
    [
        "LOAD_GLOBAL",
        "_cmp"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._hour"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._minute"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._second"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._microsecond"
    ],
    [
        "CALL_FUNCTION",
        "_cmp((self._hour, self._minute, self._second,\n                         self._microsecond),\n                        (other._hour, other._minute, other._second,\n                         other._microsecond))"
    ],
    [
        "LOAD_FAST",
        "myoff"
    ],
    [
        "IS_OP",
        "myoff is None"
    ],
    [
        "LOAD_FAST",
        "otoff"
    ],
    [
        "IS_OP",
        "otoff is None"
    ],
    [
        "LOAD_FAST",
        "allow_mixed"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"cannot compare naive and aware times\")"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "BINARY_MULTIPLY",
        "self._hour * 60"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "BINARY_ADD",
        "self._hour * 60 + self._minute"
    ],
    [
        "LOAD_FAST",
        "myoff"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(minutes=1)"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "myoff//timedelta(minutes=1)"
    ],
    [
        "BINARY_SUBTRACT",
        "self._hour * 60 + self._minute - myoff//timedelta(minutes=1)"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._hour"
    ],
    [
        "BINARY_MULTIPLY",
        "other._hour * 60"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._minute"
    ],
    [
        "BINARY_ADD",
        "other._hour * 60 + other._minute"
    ],
    [
        "LOAD_FAST",
        "otoff"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(minutes=1)"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "otoff//timedelta(minutes=1)"
    ],
    [
        "BINARY_SUBTRACT",
        "other._hour * 60 + other._minute - otoff//timedelta(minutes=1)"
    ],
    [
        "LOAD_GLOBAL",
        "_cmp"
    ],
    [
        "LOAD_FAST",
        "myhhmm"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "othhmm"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._second"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._microsecond"
    ],
    [
        "CALL_FUNCTION",
        "_cmp((myhhmm, self._second, self._microsecond),\n                    (othhmm, other._second, other._microsecond))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hashcode"
    ],
    [
        "COMPARE_OP",
        "self._hashcode == -1"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.fold"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.replace"
    ],
    [
        "CALL_FUNCTION_KW",
        "self.replace(fold=0)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_METHOD",
        "t.utcoffset"
    ],
    [
        "CALL_METHOD",
        "t.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "tzoff"
    ],
    [
        "LOAD_GLOBAL",
        "hash"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_METHOD",
        "t._getstate"
    ],
    [
        "CALL_METHOD",
        "t._getstate()"
    ],
    [
        "BINARY_SUBSCR",
        "t._getstate()[0]"
    ],
    [
        "CALL_FUNCTION",
        "hash(t._getstate()[0])"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.minute"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(hours=self.hour, minutes=self.minute)"
    ],
    [
        "LOAD_FAST",
        "tzoff"
    ],
    [
        "BINARY_SUBTRACT",
        "timedelta(hours=self.hour, minutes=self.minute) - tzoff"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(hours=1)"
    ],
    [
        "CALL_FUNCTION",
        "divmod(timedelta(hours=self.hour, minutes=self.minute) - tzoff,\n                              timedelta(hours=1))"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(minutes=1)"
    ],
    [
        "BINARY_MODULO",
        "m % timedelta(minutes=1)"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(minutes=1)"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_GLOBAL",
        "hash"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.microsecond"
    ],
    [
        "CALL_FUNCTION",
        "time(h, m, self.second, self.microsecond)"
    ],
    [
        "CALL_FUNCTION",
        "hash(time(h, m, self.second, self.microsecond))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_GLOBAL",
        "hash"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.microsecond"
    ],
    [
        "CALL_FUNCTION",
        "hash((h, m, self.second, self.microsecond))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.utcoffset"
    ],
    [
        "CALL_METHOD",
        "self.utcoffset()"
    ],
    [
        "LOAD_GLOBAL",
        "_format_offset"
    ],
    [
        "LOAD_FAST",
        "off"
    ],
    [
        "CALL_FUNCTION",
        "_format_offset(off)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "COMPARE_OP",
        "self._microsecond != 0"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "BINARY_MODULO",
        "\", %d, %d\" % (self._second, self._microsecond)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "COMPARE_OP",
        "self._second != 0"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "BINARY_MODULO",
        "\", %d\" % self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__module__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__qualname__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_MODULO",
        "\"%s.%s(%d, %d%s)\" % (self.__class__.__module__,\n                                self.__class__.__qualname__,\n                                self._hour, self._minute, s)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is not None"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_SUBSCR",
        "s[-1:]"
    ],
    [
        "COMPARE_OP",
        "s[-1:] == \")\""
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_SUBSCR",
        "s[:-1]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "BINARY_MODULO",
        "\", tzinfo=%r\" % self._tzinfo"
    ],
    [
        "BINARY_ADD",
        "s[:-1] + \", tzinfo=%r\" % self._tzinfo"
    ],
    [
        "BINARY_ADD",
        "s[:-1] + \", tzinfo=%r\" % self._tzinfo + \")\""
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._fold"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_SUBSCR",
        "s[-1:]"
    ],
    [
        "COMPARE_OP",
        "s[-1:] == \")\""
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_SUBSCR",
        "s[:-1]"
    ],
    [
        "BINARY_ADD",
        "s[:-1] + \", fold=1)\""
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_GLOBAL",
        "_format_time"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "timespec"
    ],
    [
        "CALL_FUNCTION",
        "_format_time(self._hour, self._minute, self._second,\n                          self._microsecond, timespec)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._tzstr"
    ],
    [
        "CALL_METHOD",
        "self._tzstr()"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "time_string"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(time_string, str)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError('fromisoformat: argument must be str')"
    ],
    [
        "LOAD_FAST",
        "time_string"
    ],
    [
        "LOAD_METHOD",
        "time_string.removeprefix"
    ],
    [
        "CALL_METHOD",
        "time_string.removeprefix('T')"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_GLOBAL",
        "_parse_isoformat_time"
    ],
    [
        "LOAD_FAST",
        "time_string"
    ],
    [
        "CALL_FUNCTION",
        "_parse_isoformat_time(time_string)"
    ],
    [
        "CALL_FUNCTION_EX",
        "cls(*_parse_isoformat_time(time_string))"
    ],
    [
        "LOAD_GLOBAL",
        "Exception"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "time_string"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(f'Invalid isoformat string: {time_string!r}')"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_GLOBAL",
        "_wrap_strftime"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "LOAD_FAST",
        "timetuple"
    ],
    [
        "CALL_FUNCTION",
        "_wrap_strftime(self, fmt, timetuple)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(fmt, str)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "CALL_FUNCTION",
        "type(fmt)"
    ],
    [
        "LOAD_ATTR",
        "type(fmt).__name__"
    ],
    [
        "BINARY_MODULO",
        "\"must be str, not %s\" % type(fmt).__name__"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"must be str, not %s\" % type(fmt).__name__)"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "CALL_FUNCTION",
        "len(fmt)"
    ],
    [
        "COMPARE_OP",
        "len(fmt) != 0"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.strftime"
    ],
    [
        "LOAD_FAST",
        "fmt"
    ],
    [
        "CALL_METHOD",
        "self.strftime(fmt)"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "str(self)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_METHOD",
        "self._tzinfo.utcoffset"
    ],
    [
        "CALL_METHOD",
        "self._tzinfo.utcoffset(None)"
    ],
    [
        "LOAD_GLOBAL",
        "_check_utc_offset"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "CALL_FUNCTION",
        "_check_utc_offset(\"utcoffset\", offset)"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_METHOD",
        "self._tzinfo.tzname"
    ],
    [
        "CALL_METHOD",
        "self._tzinfo.tzname(None)"
    ],
    [
        "LOAD_GLOBAL",
        "_check_tzname"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "CALL_FUNCTION",
        "_check_tzname(name)"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_METHOD",
        "self._tzinfo.dst"
    ],
    [
        "CALL_METHOD",
        "self._tzinfo.dst(None)"
    ],
    [
        "LOAD_GLOBAL",
        "_check_utc_offset"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "CALL_FUNCTION",
        "_check_utc_offset(\"dst\", offset)"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "IS_OP",
        "hour is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "IS_OP",
        "minute is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.minute"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "IS_OP",
        "second is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.second"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "IS_OP",
        "microsecond is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.microsecond"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "IS_OP",
        "tzinfo is True"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.tzinfo"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "IS_OP",
        "fold is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._fold"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "type(self)"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "CALL_FUNCTION_KW",
        "type(self)(hour, minute, second, microsecond, tzinfo, fold=fold)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "CALL_FUNCTION",
        "divmod(self._microsecond, 256)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "us2"
    ],
    [
        "CALL_FUNCTION",
        "divmod(us2, 256)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._fold"
    ],
    [
        "LOAD_FAST",
        "protocol"
    ],
    [
        "COMPARE_OP",
        "protocol > 3"
    ],
    [
        "LOAD_GLOBAL",
        "bytes"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "us1"
    ],
    [
        "LOAD_FAST",
        "us2"
    ],
    [
        "LOAD_FAST",
        "us3"
    ],
    [
        "CALL_FUNCTION",
        "bytes([h, self._minute, self._second,\n                           us1, us2, us3])"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is None"
    ],
    [
        "LOAD_FAST",
        "basestate"
    ],
    [
        "LOAD_FAST",
        "basestate"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "IS_OP",
        "tzinfo is not None"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "LOAD_GLOBAL",
        "_tzinfo_class"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(tzinfo, _tzinfo_class)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"bad tzinfo state arg\")"
    ],
    [
        "LOAD_FAST",
        "string"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "COMPARE_OP",
        "h > 127"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._fold"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "BINARY_SUBTRACT",
        "h - 128"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._fold"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "us1"
    ],
    [
        "BINARY_LSHIFT",
        "us1 << 8"
    ],
    [
        "LOAD_FAST",
        "us2"
    ],
    [
        "BINARY_OR",
        "(us1 << 8) | us2"
    ],
    [
        "BINARY_LSHIFT",
        "((us1 << 8) | us2) << 8"
    ],
    [
        "LOAD_FAST",
        "us3"
    ],
    [
        "BINARY_OR",
        "(((us1 << 8) | us2) << 8) | us3"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._getstate"
    ],
    [
        "LOAD_FAST",
        "protocol"
    ],
    [
        "CALL_METHOD",
        "self._getstate(protocol)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.__reduce_ex__"
    ],
    [
        "CALL_METHOD",
        "self.__reduce_ex__(2)"
    ],
    [
        "LOAD_NAME",
        "date"
    ],
    [
        "LOAD_ATTR",
        "date.__slots__"
    ],
    [
        "LOAD_NAME",
        "time"
    ],
    [
        "LOAD_ATTR",
        "time.__slots__"
    ],
    [
        "BINARY_ADD",
        "date.__slots__ + time.__slots__"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "property"
    ],
    [
        "CALL_FUNCTION",
        "property"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "__add__"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_GLOBAL",
        "bytes"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(year, (bytes, str))"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "len(year)"
    ],
    [
        "COMPARE_OP",
        "len(year) == 10"
    ],
    [
        "LOAD_GLOBAL",
        "ord"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "BINARY_SUBSCR",
        "year[2:3]"
    ],
    [
        "CALL_FUNCTION",
        "ord(year[2:3])"
    ],
    [
        "BINARY_AND",
        "ord(year[2:3])&0x7F"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(year, str)"
    ],
    [
        "LOAD_GLOBAL",
        "bytes"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "bytes(year, 'latin1')"
    ],
    [
        "LOAD_GLOBAL",
        "UnicodeEncodeError"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\n                        \"Failed to encode latin1 string when unpickling \"\n                        \"a datetime object. \"\n                        \"pickle.load(data, encoding='latin1') is assumed.\")"
    ],
    [
        "LOAD_GLOBAL",
        "object"
    ],
    [
        "LOAD_METHOD",
        "object.__new__"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "CALL_METHOD",
        "object.__new__(cls)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.__setstate"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "CALL_METHOD",
        "self.__setstate(year, month)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_GLOBAL",
        "_check_date_fields"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "CALL_FUNCTION",
        "_check_date_fields(year, month, day)"
    ],
    [
        "LOAD_GLOBAL",
        "_check_time_fields"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "CALL_FUNCTION",
        "_check_time_fields(\n            hour, minute, second, microsecond, fold)"
    ],
    [
        "LOAD_GLOBAL",
        "_check_tzinfo_arg"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "CALL_FUNCTION",
        "_check_tzinfo_arg(tzinfo)"
    ],
    [
        "LOAD_GLOBAL",
        "object"
    ],
    [
        "LOAD_METHOD",
        "object.__new__"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "CALL_METHOD",
        "object.__new__(cls)"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._fold"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._fold"
    ],
    [
        "LOAD_GLOBAL",
        "_math"
    ],
    [
        "LOAD_METHOD",
        "_math.modf"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "CALL_METHOD",
        "_math.modf(t)"
    ],
    [
        "LOAD_GLOBAL",
        "round"
    ],
    [
        "LOAD_FAST",
        "frac"
    ],
    [
        "BINARY_MULTIPLY",
        "frac * 1e6"
    ],
    [
        "CALL_FUNCTION",
        "round(frac * 1e6)"
    ],
    [
        "LOAD_FAST",
        "us"
    ],
    [
        "COMPARE_OP",
        "us >= 1000000"
    ],
    [
        "LOAD_FAST",
        "us"
    ],
    [
        "COMPARE_OP",
        "us < 0"
    ],
    [
        "LOAD_FAST",
        "utc"
    ],
    [
        "LOAD_GLOBAL",
        "_time"
    ],
    [
        "LOAD_ATTR",
        "_time.gmtime"
    ],
    [
        "LOAD_GLOBAL",
        "_time"
    ],
    [
        "LOAD_ATTR",
        "_time.localtime"
    ],
    [
        "LOAD_FAST",
        "converter"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "CALL_FUNCTION",
        "converter(t)"
    ],
    [
        "LOAD_GLOBAL",
        "min"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "CALL_FUNCTION",
        "min(ss, 59)"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "hh"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "LOAD_FAST",
        "us"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "CALL_FUNCTION",
        "cls(y, m, d, hh, mm, ss, us, tz)"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "IS_OP",
        "tz is None"
    ],
    [
        "LOAD_FAST",
        "utc"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "max_fold_seconds"
    ],
    [
        "COMPARE_OP",
        "t < max_fold_seconds"
    ],
    [
        "LOAD_GLOBAL",
        "sys"
    ],
    [
        "LOAD_ATTR",
        "sys.platform"
    ],
    [
        "LOAD_METHOD",
        "sys.platform.startswith"
    ],
    [
        "CALL_METHOD",
        "sys.platform.startswith(\"win\")"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "converter"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "max_fold_seconds"
    ],
    [
        "BINARY_SUBTRACT",
        "t - max_fold_seconds"
    ],
    [
        "CALL_FUNCTION",
        "converter(t - max_fold_seconds)"
    ],
    [
        "BINARY_SUBSCR",
        "converter(t - max_fold_seconds)[:6]"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "hh"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "LOAD_FAST",
        "us"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "CALL_FUNCTION",
        "cls(y, m, d, hh, mm, ss, us, tz)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "probe1"
    ],
    [
        "BINARY_SUBTRACT",
        "result - probe1"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "max_fold_seconds"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0, max_fold_seconds)"
    ],
    [
        "BINARY_SUBTRACT",
        "result - probe1 - timedelta(0, max_fold_seconds)"
    ],
    [
        "LOAD_FAST",
        "trans"
    ],
    [
        "LOAD_ATTR",
        "trans.days"
    ],
    [
        "COMPARE_OP",
        "trans.days < 0"
    ],
    [
        "LOAD_FAST",
        "converter"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "trans"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0, 1)"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "trans // timedelta(0, 1)"
    ],
    [
        "BINARY_ADD",
        "t + trans // timedelta(0, 1)"
    ],
    [
        "CALL_FUNCTION",
        "converter(t + trans // timedelta(0, 1))"
    ],
    [
        "BINARY_SUBSCR",
        "converter(t + trans // timedelta(0, 1))[:6]"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "hh"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "LOAD_FAST",
        "us"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "CALL_FUNCTION",
        "cls(y, m, d, hh, mm, ss, us, tz)"
    ],
    [
        "LOAD_FAST",
        "probe2"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "COMPARE_OP",
        "probe2 == result"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "STORE_ATTR",
        "result._fold"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "IS_OP",
        "tz is not None"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "LOAD_METHOD",
        "tz.fromutc"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "CALL_METHOD",
        "tz.fromutc(result)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_GLOBAL",
        "_check_tzinfo_arg"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "CALL_FUNCTION",
        "_check_tzinfo_arg(tz)"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_METHOD",
        "cls._fromtimestamp"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "IS_OP",
        "tz is not None"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "CALL_METHOD",
        "cls._fromtimestamp(t, tz is not None, tz)"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_METHOD",
        "cls._fromtimestamp"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "CALL_METHOD",
        "cls._fromtimestamp(t, True, None)"
    ],
    [
        "LOAD_GLOBAL",
        "_time"
    ],
    [
        "LOAD_METHOD",
        "_time.time"
    ],
    [
        "CALL_METHOD",
        "_time.time()"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_METHOD",
        "cls.fromtimestamp"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "CALL_METHOD",
        "cls.fromtimestamp(t, tz)"
    ],
    [
        "LOAD_GLOBAL",
        "_time"
    ],
    [
        "LOAD_METHOD",
        "_time.time"
    ],
    [
        "CALL_METHOD",
        "_time.time()"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_METHOD",
        "cls.utcfromtimestamp"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "CALL_METHOD",
        "cls.utcfromtimestamp(t)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "date"
    ],
    [
        "LOAD_GLOBAL",
        "_date_class"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(date, _date_class)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"date argument must be a date instance\")"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "time"
    ],
    [
        "LOAD_GLOBAL",
        "_time_class"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(time, _time_class)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"time argument must be a time instance\")"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "IS_OP",
        "tzinfo is True"
    ],
    [
        "LOAD_FAST",
        "time"
    ],
    [
        "LOAD_ATTR",
        "time.tzinfo"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_FAST",
        "date"
    ],
    [
        "LOAD_ATTR",
        "date.year"
    ],
    [
        "LOAD_FAST",
        "date"
    ],
    [
        "LOAD_ATTR",
        "date.month"
    ],
    [
        "LOAD_FAST",
        "date"
    ],
    [
        "LOAD_ATTR",
        "date.day"
    ],
    [
        "LOAD_FAST",
        "time"
    ],
    [
        "LOAD_ATTR",
        "time.hour"
    ],
    [
        "LOAD_FAST",
        "time"
    ],
    [
        "LOAD_ATTR",
        "time.minute"
    ],
    [
        "LOAD_FAST",
        "time"
    ],
    [
        "LOAD_ATTR",
        "time.second"
    ],
    [
        "LOAD_FAST",
        "time"
    ],
    [
        "LOAD_ATTR",
        "time.microsecond"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "LOAD_FAST",
        "time"
    ],
    [
        "LOAD_ATTR",
        "time.fold"
    ],
    [
        "CALL_FUNCTION_KW",
        "cls(date.year, date.month, date.day,\n                   time.hour, time.minute, time.second, time.microsecond,\n                   tzinfo, fold=time.fold)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(date_string, str)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError('fromisoformat: argument must be str')"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "CALL_FUNCTION",
        "len(date_string)"
    ],
    [
        "COMPARE_OP",
        "len(date_string) < 7"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(f'Invalid isoformat string: {date_string!r}')"
    ],
    [
        "LOAD_GLOBAL",
        "_find_isoformat_datetime_separator"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "CALL_FUNCTION",
        "_find_isoformat_datetime_separator(date_string)"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "LOAD_FAST",
        "separator_location"
    ],
    [
        "BINARY_SUBSCR",
        "date_string[0:separator_location]"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "LOAD_FAST",
        "separator_location"
    ],
    [
        "BINARY_ADD",
        "separator_location+1"
    ],
    [
        "BINARY_SUBSCR",
        "date_string[(separator_location+1):]"
    ],
    [
        "LOAD_GLOBAL",
        "_parse_isoformat_date"
    ],
    [
        "LOAD_FAST",
        "dstr"
    ],
    [
        "CALL_FUNCTION",
        "_parse_isoformat_date(dstr)"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\n                f'Invalid isoformat string: {date_string!r}')"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "LOAD_GLOBAL",
        "_parse_isoformat_time"
    ],
    [
        "LOAD_FAST",
        "tstr"
    ],
    [
        "CALL_FUNCTION",
        "_parse_isoformat_time(tstr)"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\n                    f'Invalid isoformat string: {date_string!r}')"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_FAST",
        "date_components"
    ],
    [
        "LOAD_FAST",
        "time_components"
    ],
    [
        "BINARY_ADD",
        "date_components + time_components"
    ],
    [
        "CALL_FUNCTION_EX",
        "cls(*(date_components + time_components))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.dst"
    ],
    [
        "CALL_METHOD",
        "self.dst()"
    ],
    [
        "LOAD_FAST",
        "dst"
    ],
    [
        "IS_OP",
        "dst is None"
    ],
    [
        "LOAD_FAST",
        "dst"
    ],
    [
        "LOAD_GLOBAL",
        "_build_struct_time"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.second"
    ],
    [
        "LOAD_FAST",
        "dst"
    ],
    [
        "CALL_FUNCTION",
        "_build_struct_time(self.year, self.month, self.day,\n                                  self.hour, self.minute, self.second,\n                                  dst)"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "datetime(1970, 1, 1)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_DEREF",
        "epoch"
    ],
    [
        "BINARY_SUBTRACT",
        "self - epoch"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0, 1)"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "(self - epoch) // timedelta(0, 1)"
    ],
    [
        "LOAD_FAST",
        "local"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "CALL_FUNCTION",
        "local(t)"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "BINARY_SUBTRACT",
        "local(t) - t"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "BINARY_SUBTRACT",
        "t - a"
    ],
    [
        "LOAD_FAST",
        "local"
    ],
    [
        "LOAD_FAST",
        "u1"
    ],
    [
        "CALL_FUNCTION",
        "local(u1)"
    ],
    [
        "LOAD_FAST",
        "t1"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "COMPARE_OP",
        "t1 == t"
    ],
    [
        "LOAD_FAST",
        "u1"
    ],
    [
        "LOAD_FAST",
        "max_fold_seconds"
    ],
    [
        "UNARY_NEGATIVE",
        "-max_fold_seconds"
    ],
    [
        "LOAD_FAST",
        "max_fold_seconds"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.fold"
    ],
    [
        "BINARY_SUBSCR",
        "(-max_fold_seconds, max_fold_seconds)[self.fold]"
    ],
    [
        "BINARY_ADD",
        "u1 + (-max_fold_seconds, max_fold_seconds)[self.fold]"
    ],
    [
        "LOAD_FAST",
        "local"
    ],
    [
        "LOAD_FAST",
        "u2"
    ],
    [
        "CALL_FUNCTION",
        "local(u2)"
    ],
    [
        "LOAD_FAST",
        "u2"
    ],
    [
        "BINARY_SUBTRACT",
        "local(u2) - u2"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "COMPARE_OP",
        "a == b"
    ],
    [
        "LOAD_FAST",
        "u1"
    ],
    [
        "LOAD_FAST",
        "t1"
    ],
    [
        "LOAD_FAST",
        "u1"
    ],
    [
        "BINARY_SUBTRACT",
        "t1 - u1"
    ],
    [
        "LOAD_FAST",
        "a"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "COMPARE_OP",
        "a != b"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_FAST",
        "b"
    ],
    [
        "BINARY_SUBTRACT",
        "t - b"
    ],
    [
        "LOAD_FAST",
        "local"
    ],
    [
        "LOAD_FAST",
        "u2"
    ],
    [
        "CALL_FUNCTION",
        "local(u2)"
    ],
    [
        "LOAD_FAST",
        "t2"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "COMPARE_OP",
        "t2 == t"
    ],
    [
        "LOAD_FAST",
        "u2"
    ],
    [
        "LOAD_FAST",
        "t1"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "COMPARE_OP",
        "t1 == t"
    ],
    [
        "LOAD_FAST",
        "u1"
    ],
    [
        "LOAD_GLOBAL",
        "max"
    ],
    [
        "LOAD_GLOBAL",
        "min"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.fold"
    ],
    [
        "BINARY_SUBSCR",
        "(max, min)[self.fold]"
    ],
    [
        "LOAD_FAST",
        "u1"
    ],
    [
        "LOAD_FAST",
        "u2"
    ],
    [
        "CALL_FUNCTION",
        "(max, min)[self.fold](u1, u2)"
    ],
    [
        "LOAD_GLOBAL",
        "_time"
    ],
    [
        "LOAD_METHOD",
        "_time.localtime"
    ],
    [
        "LOAD_FAST",
        "u"
    ],
    [
        "CALL_METHOD",
        "_time.localtime(u)"
    ],
    [
        "BINARY_SUBSCR",
        "_time.localtime(u)[:6]"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "hh"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "CALL_FUNCTION",
        "datetime(y, m, d, hh, mm, ss)"
    ],
    [
        "LOAD_DEREF",
        "epoch"
    ],
    [
        "BINARY_SUBTRACT",
        "datetime(y, m, d, hh, mm, ss) - epoch"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0, 1)"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "(datetime(y, m, d, hh, mm, ss) - epoch) // timedelta(0, 1)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._mktime"
    ],
    [
        "CALL_METHOD",
        "self._mktime()"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.microsecond"
    ],
    [
        "BINARY_TRUE_DIVIDE",
        "self.microsecond / 1e6"
    ],
    [
        "BINARY_ADD",
        "s + self.microsecond / 1e6"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_GLOBAL",
        "_EPOCH"
    ],
    [
        "BINARY_SUBTRACT",
        "self - _EPOCH"
    ],
    [
        "LOAD_METHOD",
        "(self - _EPOCH).total_seconds"
    ],
    [
        "CALL_METHOD",
        "(self - _EPOCH).total_seconds()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.utcoffset"
    ],
    [
        "CALL_METHOD",
        "self.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.second"
    ],
    [
        "LOAD_GLOBAL",
        "_build_struct_time"
    ],
    [
        "LOAD_FAST",
        "y"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "hh"
    ],
    [
        "LOAD_FAST",
        "mm"
    ],
    [
        "LOAD_FAST",
        "ss"
    ],
    [
        "CALL_FUNCTION",
        "_build_struct_time(y, m, d, hh, mm, ss, 0)"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "CALL_FUNCTION",
        "date(self._year, self._month, self._day)"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.microsecond"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.fold"
    ],
    [
        "CALL_FUNCTION_KW",
        "time(self.hour, self.minute, self.second, self.microsecond, fold=self.fold)"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.microsecond"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.fold"
    ],
    [
        "CALL_FUNCTION_KW",
        "time(self.hour, self.minute, self.second, self.microsecond,\n                    self._tzinfo, fold=self.fold)"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "IS_OP",
        "year is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "IS_OP",
        "month is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.month"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "IS_OP",
        "day is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.day"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "IS_OP",
        "hour is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "IS_OP",
        "minute is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.minute"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "IS_OP",
        "second is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.second"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "IS_OP",
        "microsecond is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.microsecond"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "IS_OP",
        "tzinfo is True"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.tzinfo"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "IS_OP",
        "fold is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.fold"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "type(self)"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "LOAD_FAST",
        "month"
    ],
    [
        "LOAD_FAST",
        "day"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "LOAD_FAST",
        "microsecond"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "LOAD_FAST",
        "fold"
    ],
    [
        "CALL_FUNCTION_KW",
        "type(self)(year, month, day, hour, minute, second,\n                          microsecond, tzinfo, fold=fold)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.tzinfo"
    ],
    [
        "IS_OP",
        "self.tzinfo is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._mktime"
    ],
    [
        "CALL_METHOD",
        "self._mktime()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_GLOBAL",
        "_EPOCH"
    ],
    [
        "BINARY_SUBTRACT",
        "self - _EPOCH"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(seconds=1)"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "(self - _EPOCH) // timedelta(seconds=1)"
    ],
    [
        "LOAD_GLOBAL",
        "_time"
    ],
    [
        "LOAD_METHOD",
        "_time.localtime"
    ],
    [
        "LOAD_FAST",
        "ts"
    ],
    [
        "CALL_METHOD",
        "_time.localtime(ts)"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "LOAD_FAST",
        "localtm"
    ],
    [
        "BINARY_SUBSCR",
        "localtm[:6]"
    ],
    [
        "CALL_FUNCTION_EX",
        "datetime(*localtm[:6])"
    ],
    [
        "LOAD_FAST",
        "localtm"
    ],
    [
        "LOAD_ATTR",
        "localtm.tm_gmtoff"
    ],
    [
        "LOAD_FAST",
        "localtm"
    ],
    [
        "LOAD_ATTR",
        "localtm.tm_zone"
    ],
    [
        "LOAD_GLOBAL",
        "timezone"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "gmtoff"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(seconds=gmtoff)"
    ],
    [
        "LOAD_FAST",
        "zone"
    ],
    [
        "CALL_FUNCTION",
        "timezone(timedelta(seconds=gmtoff), zone)"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "IS_OP",
        "tz is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._local_timezone"
    ],
    [
        "CALL_METHOD",
        "self._local_timezone()"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "LOAD_GLOBAL",
        "tzinfo"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(tz, tzinfo)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"tz argument must be an instance of tzinfo\")"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.tzinfo"
    ],
    [
        "LOAD_FAST",
        "mytz"
    ],
    [
        "IS_OP",
        "mytz is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._local_timezone"
    ],
    [
        "CALL_METHOD",
        "self._local_timezone()"
    ],
    [
        "LOAD_FAST",
        "mytz"
    ],
    [
        "LOAD_METHOD",
        "mytz.utcoffset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "mytz.utcoffset(self)"
    ],
    [
        "LOAD_FAST",
        "mytz"
    ],
    [
        "LOAD_METHOD",
        "mytz.utcoffset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "mytz.utcoffset(self)"
    ],
    [
        "LOAD_FAST",
        "myoffset"
    ],
    [
        "IS_OP",
        "myoffset is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.replace"
    ],
    [
        "CALL_FUNCTION_KW",
        "self.replace(tzinfo=None)"
    ],
    [
        "LOAD_METHOD",
        "self.replace(tzinfo=None)._local_timezone"
    ],
    [
        "CALL_METHOD",
        "self.replace(tzinfo=None)._local_timezone()"
    ],
    [
        "LOAD_FAST",
        "mytz"
    ],
    [
        "LOAD_METHOD",
        "mytz.utcoffset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "mytz.utcoffset(self)"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "LOAD_FAST",
        "mytz"
    ],
    [
        "IS_OP",
        "tz is mytz"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "myoffset"
    ],
    [
        "BINARY_SUBTRACT",
        "self - myoffset"
    ],
    [
        "LOAD_ATTR",
        "(self - myoffset).replace"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "CALL_FUNCTION_KW",
        "(self - myoffset).replace(tzinfo=tz)"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "LOAD_METHOD",
        "tz.fromutc"
    ],
    [
        "LOAD_FAST",
        "utc"
    ],
    [
        "CALL_METHOD",
        "tz.fromutc(utc)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.toordinal"
    ],
    [
        "CALL_METHOD",
        "self.toordinal()"
    ],
    [
        "BINARY_MODULO",
        "self.toordinal() % 7"
    ],
    [
        "LOAD_GLOBAL",
        "_DAYNAMES"
    ],
    [
        "LOAD_FAST",
        "weekday"
    ],
    [
        "BINARY_SUBSCR",
        "_DAYNAMES[weekday]"
    ],
    [
        "LOAD_GLOBAL",
        "_MONTHNAMES"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "BINARY_SUBSCR",
        "_MONTHNAMES[self._month]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "BINARY_MODULO",
        "\"%s %s %2d %02d:%02d:%02d %04d\" % (\n            _DAYNAMES[weekday],\n            _MONTHNAMES[self._month],\n            self._day,\n            self._hour, self._minute, self._second,\n            self._year)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "sep"
    ],
    [
        "BINARY_MODULO",
        "\"%04d-%02d-%02d%c\" % (self._year, self._month, self._day, sep)"
    ],
    [
        "LOAD_GLOBAL",
        "_format_time"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "timespec"
    ],
    [
        "CALL_FUNCTION",
        "_format_time(self._hour, self._minute, self._second,\n                          self._microsecond, timespec)"
    ],
    [
        "BINARY_ADD",
        "\"%04d-%02d-%02d%c\" % (self._year, self._month, self._day, sep) +\n             _format_time(self._hour, self._minute, self._second,\n                          self._microsecond, timespec)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.utcoffset"
    ],
    [
        "CALL_METHOD",
        "self.utcoffset()"
    ],
    [
        "LOAD_GLOBAL",
        "_format_offset"
    ],
    [
        "LOAD_FAST",
        "off"
    ],
    [
        "CALL_FUNCTION",
        "_format_offset(off)"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "LOAD_FAST",
        "tz"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "L"
    ],
    [
        "BINARY_SUBSCR",
        "L[-1]"
    ],
    [
        "COMPARE_OP",
        "L[-1] == 0"
    ],
    [
        "LOAD_FAST",
        "L"
    ],
    [
        "LOAD_FAST",
        "L"
    ],
    [
        "BINARY_SUBSCR",
        "L[-1]"
    ],
    [
        "COMPARE_OP",
        "L[-1] == 0"
    ],
    [
        "LOAD_FAST",
        "L"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__module__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__qualname__"
    ],
    [
        "LOAD_METHOD",
        "\", \".join"
    ],
    [
        "LOAD_GLOBAL",
        "map"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "L"
    ],
    [
        "CALL_FUNCTION",
        "map(str, L)"
    ],
    [
        "CALL_METHOD",
        "\", \".join(map(str, L))"
    ],
    [
        "BINARY_MODULO",
        "\"%s.%s(%s)\" % (self.__class__.__module__,\n                           self.__class__.__qualname__,\n                           \", \".join(map(str, L)))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is not None"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_SUBSCR",
        "s[-1:]"
    ],
    [
        "COMPARE_OP",
        "s[-1:] == \")\""
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_SUBSCR",
        "s[:-1]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "BINARY_MODULO",
        "\", tzinfo=%r\" % self._tzinfo"
    ],
    [
        "BINARY_ADD",
        "s[:-1] + \", tzinfo=%r\" % self._tzinfo"
    ],
    [
        "BINARY_ADD",
        "s[:-1] + \", tzinfo=%r\" % self._tzinfo + \")\""
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._fold"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_SUBSCR",
        "s[-1:]"
    ],
    [
        "COMPARE_OP",
        "s[-1:] == \")\""
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "BINARY_SUBSCR",
        "s[:-1]"
    ],
    [
        "BINARY_ADD",
        "s[:-1] + \", fold=1)\""
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.isoformat"
    ],
    [
        "CALL_FUNCTION_KW",
        "self.isoformat(sep=' ')"
    ],
    [
        "LOAD_FAST",
        "_strptime"
    ],
    [
        "LOAD_METHOD",
        "_strptime._strptime_datetime"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_FAST",
        "date_string"
    ],
    [
        "LOAD_FAST",
        "format"
    ],
    [
        "CALL_METHOD",
        "_strptime._strptime_datetime(cls, date_string, format)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_METHOD",
        "self._tzinfo.utcoffset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "self._tzinfo.utcoffset(self)"
    ],
    [
        "LOAD_GLOBAL",
        "_check_utc_offset"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "CALL_FUNCTION",
        "_check_utc_offset(\"utcoffset\", offset)"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_METHOD",
        "self._tzinfo.tzname"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "self._tzinfo.tzname(self)"
    ],
    [
        "LOAD_GLOBAL",
        "_check_tzname"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "CALL_FUNCTION",
        "_check_tzname(name)"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_METHOD",
        "self._tzinfo.dst"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_METHOD",
        "self._tzinfo.dst(self)"
    ],
    [
        "LOAD_GLOBAL",
        "_check_utc_offset"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "CALL_FUNCTION",
        "_check_utc_offset(\"dst\", offset)"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, datetime)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_FUNCTION_KW",
        "self._cmp(other, allow_mixed=True)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other, allow_mixed=True) == 0"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, datetime)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) <= 0"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "_cmperror"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_FUNCTION",
        "_cmperror(self, other)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, datetime)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) < 0"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "_cmperror"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_FUNCTION",
        "_cmperror(self, other)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, datetime)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) >= 0"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "_cmperror"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_FUNCTION",
        "_cmperror(self, other)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, datetime)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._cmp"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_METHOD",
        "self._cmp(other)"
    ],
    [
        "COMPARE_OP",
        "self._cmp(other) > 0"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, date)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "_cmperror"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "CALL_FUNCTION",
        "_cmperror(self, other)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, datetime)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._tzinfo"
    ],
    [
        "LOAD_FAST",
        "mytz"
    ],
    [
        "LOAD_FAST",
        "ottz"
    ],
    [
        "IS_OP",
        "mytz is ottz"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.utcoffset"
    ],
    [
        "CALL_METHOD",
        "self.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other.utcoffset"
    ],
    [
        "CALL_METHOD",
        "other.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "allow_mixed"
    ],
    [
        "LOAD_FAST",
        "myoff"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.replace"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.fold"
    ],
    [
        "UNARY_NOT",
        "not self.fold"
    ],
    [
        "CALL_FUNCTION_KW",
        "self.replace(fold=not self.fold)"
    ],
    [
        "LOAD_METHOD",
        "self.replace(fold=not self.fold).utcoffset"
    ],
    [
        "CALL_METHOD",
        "self.replace(fold=not self.fold).utcoffset()"
    ],
    [
        "COMPARE_OP",
        "myoff != self.replace(fold=not self.fold).utcoffset()"
    ],
    [
        "LOAD_FAST",
        "otoff"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other.replace"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other.fold"
    ],
    [
        "UNARY_NOT",
        "not other.fold"
    ],
    [
        "CALL_FUNCTION_KW",
        "other.replace(fold=not other.fold)"
    ],
    [
        "LOAD_METHOD",
        "other.replace(fold=not other.fold).utcoffset"
    ],
    [
        "CALL_METHOD",
        "other.replace(fold=not other.fold).utcoffset()"
    ],
    [
        "COMPARE_OP",
        "otoff != other.replace(fold=not other.fold).utcoffset()"
    ],
    [
        "LOAD_FAST",
        "myoff"
    ],
    [
        "LOAD_FAST",
        "otoff"
    ],
    [
        "COMPARE_OP",
        "myoff == otoff"
    ],
    [
        "LOAD_FAST",
        "base_compare"
    ],
    [
        "LOAD_GLOBAL",
        "_cmp"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._year"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._month"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._day"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._hour"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._minute"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._second"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._microsecond"
    ],
    [
        "CALL_FUNCTION",
        "_cmp((self._year, self._month, self._day,\n                         self._hour, self._minute, self._second,\n                         self._microsecond),\n                        (other._year, other._month, other._day,\n                         other._hour, other._minute, other._second,\n                         other._microsecond))"
    ],
    [
        "LOAD_FAST",
        "myoff"
    ],
    [
        "IS_OP",
        "myoff is None"
    ],
    [
        "LOAD_FAST",
        "otoff"
    ],
    [
        "IS_OP",
        "otoff is None"
    ],
    [
        "LOAD_FAST",
        "allow_mixed"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"cannot compare naive and aware datetimes\")"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "BINARY_SUBTRACT",
        "self - other"
    ],
    [
        "LOAD_FAST",
        "diff"
    ],
    [
        "LOAD_ATTR",
        "diff.days"
    ],
    [
        "COMPARE_OP",
        "diff.days < 0"
    ],
    [
        "LOAD_FAST",
        "diff"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.toordinal"
    ],
    [
        "CALL_METHOD",
        "self.toordinal()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(self.toordinal(),\n                          hours=self._hour,\n                          minutes=self._minute,\n                          seconds=self._second,\n                          microseconds=self._microsecond)"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "delta"
    ],
    [
        "LOAD_ATTR",
        "delta.seconds"
    ],
    [
        "CALL_FUNCTION",
        "divmod(delta.seconds, 3600)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "rem"
    ],
    [
        "CALL_FUNCTION",
        "divmod(rem, 60)"
    ],
    [
        "LOAD_FAST",
        "delta"
    ],
    [
        "LOAD_ATTR",
        "delta.days"
    ],
    [
        "LOAD_GLOBAL",
        "_MAXORDINAL"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "type(self)"
    ],
    [
        "LOAD_METHOD",
        "type(self).combine"
    ],
    [
        "LOAD_GLOBAL",
        "date"
    ],
    [
        "LOAD_METHOD",
        "date.fromordinal"
    ],
    [
        "LOAD_FAST",
        "delta"
    ],
    [
        "LOAD_ATTR",
        "delta.days"
    ],
    [
        "CALL_METHOD",
        "date.fromordinal(delta.days)"
    ],
    [
        "LOAD_GLOBAL",
        "time"
    ],
    [
        "LOAD_FAST",
        "hour"
    ],
    [
        "LOAD_FAST",
        "minute"
    ],
    [
        "LOAD_FAST",
        "second"
    ],
    [
        "LOAD_FAST",
        "delta"
    ],
    [
        "LOAD_ATTR",
        "delta.microseconds"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "CALL_FUNCTION_KW",
        "time(hour, minute, second,\n                                           delta.microseconds,\n                                           tzinfo=self._tzinfo)"
    ],
    [
        "CALL_METHOD",
        "type(self).combine(date.fromordinal(delta.days),\n                                      time(hour, minute, second,\n                                           delta.microseconds,\n                                           tzinfo=self._tzinfo))"
    ],
    [
        "LOAD_GLOBAL",
        "OverflowError"
    ],
    [
        "CALL_FUNCTION",
        "OverflowError(\"result out of range\")"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, datetime)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timedelta)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "UNARY_NEGATIVE",
        "-other"
    ],
    [
        "BINARY_ADD",
        "self + -other"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.toordinal"
    ],
    [
        "CALL_METHOD",
        "self.toordinal()"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other.toordinal"
    ],
    [
        "CALL_METHOD",
        "other.toordinal()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "BINARY_MULTIPLY",
        "self._minute * 60"
    ],
    [
        "BINARY_ADD",
        "self._second + self._minute * 60"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "BINARY_MULTIPLY",
        "self._hour * 3600"
    ],
    [
        "BINARY_ADD",
        "self._second + self._minute * 60 + self._hour * 3600"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._second"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._minute"
    ],
    [
        "BINARY_MULTIPLY",
        "other._minute * 60"
    ],
    [
        "BINARY_ADD",
        "other._second + other._minute * 60"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._hour"
    ],
    [
        "BINARY_MULTIPLY",
        "other._hour * 3600"
    ],
    [
        "BINARY_ADD",
        "other._second + other._minute * 60 + other._hour * 3600"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "days1"
    ],
    [
        "LOAD_FAST",
        "days2"
    ],
    [
        "BINARY_SUBTRACT",
        "days1 - days2"
    ],
    [
        "LOAD_FAST",
        "secs1"
    ],
    [
        "LOAD_FAST",
        "secs2"
    ],
    [
        "BINARY_SUBTRACT",
        "secs1 - secs2"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._microsecond"
    ],
    [
        "BINARY_SUBTRACT",
        "self._microsecond - other._microsecond"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(days1 - days2,\n                         secs1 - secs2,\n                         self._microsecond - other._microsecond)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is other._tzinfo"
    ],
    [
        "LOAD_FAST",
        "base"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.utcoffset"
    ],
    [
        "CALL_METHOD",
        "self.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_METHOD",
        "other.utcoffset"
    ],
    [
        "CALL_METHOD",
        "other.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "myoff"
    ],
    [
        "LOAD_FAST",
        "otoff"
    ],
    [
        "COMPARE_OP",
        "myoff == otoff"
    ],
    [
        "LOAD_FAST",
        "base"
    ],
    [
        "LOAD_FAST",
        "myoff"
    ],
    [
        "IS_OP",
        "myoff is None"
    ],
    [
        "LOAD_FAST",
        "otoff"
    ],
    [
        "IS_OP",
        "otoff is None"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"cannot mix naive and timezone-aware time\")"
    ],
    [
        "LOAD_FAST",
        "base"
    ],
    [
        "LOAD_FAST",
        "otoff"
    ],
    [
        "BINARY_ADD",
        "base + otoff"
    ],
    [
        "LOAD_FAST",
        "myoff"
    ],
    [
        "BINARY_SUBTRACT",
        "base + otoff - myoff"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hashcode"
    ],
    [
        "COMPARE_OP",
        "self._hashcode == -1"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.fold"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.replace"
    ],
    [
        "CALL_FUNCTION_KW",
        "self.replace(fold=0)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_METHOD",
        "t.utcoffset"
    ],
    [
        "CALL_METHOD",
        "t.utcoffset()"
    ],
    [
        "LOAD_FAST",
        "tzoff"
    ],
    [
        "IS_OP",
        "tzoff is None"
    ],
    [
        "LOAD_GLOBAL",
        "hash"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "LOAD_METHOD",
        "t._getstate"
    ],
    [
        "CALL_METHOD",
        "t._getstate()"
    ],
    [
        "BINARY_SUBSCR",
        "t._getstate()[0]"
    ],
    [
        "CALL_FUNCTION",
        "hash(t._getstate()[0])"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_GLOBAL",
        "_ymd2ord"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.year"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.day"
    ],
    [
        "CALL_FUNCTION",
        "_ymd2ord(self.year, self.month, self.day)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.hour"
    ],
    [
        "BINARY_MULTIPLY",
        "self.hour * 3600"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.minute"
    ],
    [
        "BINARY_MULTIPLY",
        "self.minute * 60"
    ],
    [
        "BINARY_ADD",
        "self.hour * 3600 + self.minute * 60"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.second"
    ],
    [
        "BINARY_ADD",
        "self.hour * 3600 + self.minute * 60 + self.second"
    ],
    [
        "LOAD_GLOBAL",
        "hash"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "LOAD_FAST",
        "days"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.microsecond"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(days, seconds, self.microsecond)"
    ],
    [
        "LOAD_FAST",
        "tzoff"
    ],
    [
        "BINARY_SUBTRACT",
        "timedelta(days, seconds, self.microsecond) - tzoff"
    ],
    [
        "CALL_FUNCTION",
        "hash(timedelta(days, seconds, self.microsecond) - tzoff)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hashcode"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._year"
    ],
    [
        "CALL_FUNCTION",
        "divmod(self._year, 256)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._microsecond"
    ],
    [
        "CALL_FUNCTION",
        "divmod(self._microsecond, 256)"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "us2"
    ],
    [
        "CALL_FUNCTION",
        "divmod(us2, 256)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._fold"
    ],
    [
        "LOAD_FAST",
        "protocol"
    ],
    [
        "COMPARE_OP",
        "protocol > 3"
    ],
    [
        "LOAD_GLOBAL",
        "bytes"
    ],
    [
        "LOAD_FAST",
        "yhi"
    ],
    [
        "LOAD_FAST",
        "ylo"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "us1"
    ],
    [
        "LOAD_FAST",
        "us2"
    ],
    [
        "LOAD_FAST",
        "us3"
    ],
    [
        "CALL_FUNCTION",
        "bytes([yhi, ylo, m, self._day,\n                           self._hour, self._minute, self._second,\n                           us1, us2, us3])"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "IS_OP",
        "self._tzinfo is None"
    ],
    [
        "LOAD_FAST",
        "basestate"
    ],
    [
        "LOAD_FAST",
        "basestate"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "IS_OP",
        "tzinfo is not None"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "LOAD_GLOBAL",
        "_tzinfo_class"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(tzinfo, _tzinfo_class)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"bad tzinfo state arg\")"
    ],
    [
        "LOAD_FAST",
        "string"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._day"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._hour"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._minute"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._second"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "COMPARE_OP",
        "m > 127"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._fold"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "BINARY_SUBTRACT",
        "m - 128"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._fold"
    ],
    [
        "LOAD_FAST",
        "m"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._month"
    ],
    [
        "LOAD_FAST",
        "yhi"
    ],
    [
        "BINARY_MULTIPLY",
        "yhi * 256"
    ],
    [
        "LOAD_FAST",
        "ylo"
    ],
    [
        "BINARY_ADD",
        "yhi * 256 + ylo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._year"
    ],
    [
        "LOAD_FAST",
        "us1"
    ],
    [
        "BINARY_LSHIFT",
        "us1 << 8"
    ],
    [
        "LOAD_FAST",
        "us2"
    ],
    [
        "BINARY_OR",
        "(us1 << 8) | us2"
    ],
    [
        "BINARY_LSHIFT",
        "((us1 << 8) | us2) << 8"
    ],
    [
        "LOAD_FAST",
        "us3"
    ],
    [
        "BINARY_OR",
        "(((us1 << 8) | us2) << 8) | us3"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._microsecond"
    ],
    [
        "LOAD_FAST",
        "tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._getstate"
    ],
    [
        "LOAD_FAST",
        "protocol"
    ],
    [
        "CALL_METHOD",
        "self._getstate(protocol)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.__reduce_ex__"
    ],
    [
        "CALL_METHOD",
        "self.__reduce_ex__(2)"
    ],
    [
        "LOAD_GLOBAL",
        "_ymd2ord"
    ],
    [
        "LOAD_FAST",
        "year"
    ],
    [
        "CALL_FUNCTION",
        "_ymd2ord(year, 1, 1)"
    ],
    [
        "LOAD_FAST",
        "firstday"
    ],
    [
        "BINARY_ADD",
        "firstday + 6"
    ],
    [
        "BINARY_MODULO",
        "(firstday + 6) % 7"
    ],
    [
        "LOAD_FAST",
        "firstday"
    ],
    [
        "LOAD_FAST",
        "firstweekday"
    ],
    [
        "BINARY_SUBTRACT",
        "firstday - firstweekday"
    ],
    [
        "LOAD_FAST",
        "firstweekday"
    ],
    [
        "LOAD_FAST",
        "THURSDAY"
    ],
    [
        "COMPARE_OP",
        "firstweekday > THURSDAY"
    ],
    [
        "LOAD_FAST",
        "week1monday"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "CALL_FUNCTION",
        "object()"
    ],
    [
        "LOAD_NAME",
        "_Omitted"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(hours=24, microseconds=-1)"
    ],
    [
        "LOAD_NAME",
        "_maxoffset"
    ],
    [
        "UNARY_NEGATIVE",
        "-_maxoffset"
    ],
    [
        "LOAD_NAME",
        "staticmethod"
    ],
    [
        "CALL_FUNCTION",
        "staticmethod"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(offset, timedelta)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"offset must be a timedelta\")"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_ATTR",
        "cls._Omitted"
    ],
    [
        "IS_OP",
        "name is cls._Omitted"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_ATTR",
        "cls.utc"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(name, str)"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"name must be a string\")"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_ATTR",
        "cls._minoffset"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_ATTR",
        "cls._maxoffset"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"offset must be a timedelta \"\n                             \"strictly between -timedelta(hours=24) and \"\n                             \"timedelta(hours=24).\")"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_METHOD",
        "cls._create"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "CALL_METHOD",
        "cls._create(offset, name)"
    ],
    [
        "LOAD_GLOBAL",
        "tzinfo"
    ],
    [
        "LOAD_METHOD",
        "tzinfo.__new__"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "CALL_METHOD",
        "tzinfo.__new__(cls)"
    ],
    [
        "LOAD_FAST",
        "offset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._offset"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._name"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._name"
    ],
    [
        "IS_OP",
        "self._name is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._offset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._offset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._name"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_GLOBAL",
        "timezone"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(other, timezone)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._offset"
    ],
    [
        "LOAD_FAST",
        "other"
    ],
    [
        "LOAD_ATTR",
        "other._offset"
    ],
    [
        "COMPARE_OP",
        "self._offset == other._offset"
    ],
    [
        "LOAD_GLOBAL",
        "NotImplemented"
    ],
    [
        "LOAD_GLOBAL",
        "hash"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._offset"
    ],
    [
        "CALL_FUNCTION",
        "hash(self._offset)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.utc"
    ],
    [
        "IS_OP",
        "self is self.utc"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._name"
    ],
    [
        "IS_OP",
        "self._name is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__module__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__qualname__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._offset"
    ],
    [
        "BINARY_MODULO",
        "\"%s.%s(%r)\" % (self.__class__.__module__,\n                                  self.__class__.__qualname__,\n                                  self._offset)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__module__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.__class__"
    ],
    [
        "LOAD_ATTR",
        "self.__class__.__qualname__"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._offset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._name"
    ],
    [
        "BINARY_MODULO",
        "\"%s.%s(%r, %r)\" % (self.__class__.__module__,\n                                  self.__class__.__qualname__,\n                                  self._offset, self._name)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self.tzname"
    ],
    [
        "CALL_METHOD",
        "self.tzname(None)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(dt, datetime)"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "IS_OP",
        "dt is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._offset"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"utcoffset() argument must be a datetime instance\"\n                        \" or None\")"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(dt, datetime)"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "IS_OP",
        "dt is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._name"
    ],
    [
        "IS_OP",
        "self._name is None"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_METHOD",
        "self._name_from_offset"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._offset"
    ],
    [
        "CALL_METHOD",
        "self._name_from_offset(self._offset)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._name"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"tzname() argument must be a datetime instance\"\n                        \" or None\")"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(dt, datetime)"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "IS_OP",
        "dt is None"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"dst() argument must be a datetime instance\"\n                        \" or None\")"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_GLOBAL",
        "datetime"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(dt, datetime)"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_ATTR",
        "dt.tzinfo"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "IS_OP",
        "dt.tzinfo is not self"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError(\"fromutc: dt.tzinfo \"\n                                 \"is not self\")"
    ],
    [
        "LOAD_FAST",
        "dt"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._offset"
    ],
    [
        "BINARY_ADD",
        "dt + self._offset"
    ],
    [
        "LOAD_GLOBAL",
        "TypeError"
    ],
    [
        "CALL_FUNCTION",
        "TypeError(\"fromutc() argument must be a datetime instance\"\n                        \" or None\")"
    ],
    [
        "LOAD_FAST",
        "delta"
    ],
    [
        "LOAD_FAST",
        "delta"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION",
        "timedelta(0)"
    ],
    [
        "COMPARE_OP",
        "delta < timedelta(0)"
    ],
    [
        "LOAD_FAST",
        "delta"
    ],
    [
        "UNARY_NEGATIVE",
        "-delta"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "delta"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(hours=1)"
    ],
    [
        "CALL_FUNCTION",
        "divmod(delta, timedelta(hours=1))"
    ],
    [
        "LOAD_GLOBAL",
        "divmod"
    ],
    [
        "LOAD_FAST",
        "rest"
    ],
    [
        "LOAD_GLOBAL",
        "timedelta"
    ],
    [
        "CALL_FUNCTION_KW",
        "timedelta(minutes=1)"
    ],
    [
        "CALL_FUNCTION",
        "divmod(rest, timedelta(minutes=1))"
    ],
    [
        "LOAD_FAST",
        "rest"
    ],
    [
        "LOAD_ATTR",
        "rest.seconds"
    ],
    [
        "LOAD_FAST",
        "rest"
    ],
    [
        "LOAD_ATTR",
        "rest.microseconds"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "LOAD_FAST",
        "sign"
    ],
    [
        "LOAD_FAST",
        "hours"
    ],
    [
        "LOAD_FAST",
        "minutes"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "LOAD_FAST",
        "microseconds"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "LOAD_FAST",
        "sign"
    ],
    [
        "LOAD_FAST",
        "hours"
    ],
    [
        "LOAD_FAST",
        "minutes"
    ],
    [
        "LOAD_FAST",
        "seconds"
    ],
    [
        "LOAD_FAST",
        "sign"
    ],
    [
        "LOAD_FAST",
        "hours"
    ],
    [
        "LOAD_FAST",
        "minutes"
    ]
]