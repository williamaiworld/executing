[
    [
        "LOAD_NAME",
        "standard_library"
    ],
    [
        "LOAD_ATTR",
        "standard_library.install_aliases"
    ],
    [
        "CALL_FUNCTION",
        "standard_library.install_aliases()"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "LOAD_NAME",
        "ImportError"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "LOAD_NAME",
        "warn_if_outdated"
    ],
    [
        "LOAD_NAME",
        "__version__"
    ],
    [
        "CALL_FUNCTION",
        "warn_if_outdated('birdseye', __version__)"
    ],
    [
        "LOAD_NAME",
        "namedtuple"
    ],
    [
        "CALL_FUNCTION",
        "namedtuple('CodeInfo', 'db_func traced_file arg_names')"
    ],
    [
        "LOAD_NAME",
        "TreeTracerBase"
    ],
    [
        "LOAD_NAME",
        "BirdsEye"
    ],
    [
        "CALL_FUNCTION",
        "BirdsEye()"
    ],
    [
        "LOAD_NAME",
        "NamedTuple"
    ],
    [
        "LOAD_NAME",
        "int"
    ],
    [
        "LOAD_NAME",
        "bool"
    ],
    [
        "LOAD_NAME",
        "int"
    ],
    [
        "LOAD_NAME",
        "str"
    ],
    [
        "CALL_FUNCTION",
        "NamedTuple('HTMLPosition', [\n    ('index', int),\n    ('is_start', bool),\n    ('depth', int),\n    ('html', str),\n])"
    ],
    [
        "LOAD_NAME",
        "eye"
    ],
    [
        "LOAD_ATTR",
        "eye.enter_call"
    ],
    [
        "LOAD_ATTR",
        "eye.enter_call.__code__"
    ],
    [
        "LOAD_NAME",
        "eye"
    ],
    [
        "LOAD_ATTR",
        "eye.exit_call"
    ],
    [
        "LOAD_ATTR",
        "eye.exit_call.__code__"
    ],
    [
        "LOAD_NAME",
        "eye"
    ],
    [
        "LOAD_ATTR",
        "eye.after_expr"
    ],
    [
        "LOAD_ATTR",
        "eye.after_expr.__code__"
    ],
    [
        "LOAD_NAME",
        "eye"
    ],
    [
        "LOAD_ATTR",
        "eye.after_stmt"
    ],
    [
        "LOAD_ATTR",
        "eye.after_stmt.__code__"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "LOAD_NAME",
        "Iterable"
    ],
    [
        "LOAD_NAME",
        "Iteration"
    ],
    [
        "BINARY_SUBSCR",
        "Iterable[Iteration]"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "LOAD_NAME",
        "TypeRegistry"
    ],
    [
        "CALL_FUNCTION",
        "TypeRegistry()"
    ],
    [
        "LOAD_NAME",
        "object"
    ],
    [
        "LOAD_NAME",
        "try_register_repr"
    ],
    [
        "CALL_FUNCTION",
        "try_register_repr('pandas', 'Series')"
    ],
    [
        "CALL_FUNCTION",
        "try_register_repr('pandas', 'Series')"
    ],
    [
        "LOAD_NAME",
        "cached_property"
    ],
    [
        "CALL_FUNCTION",
        "cached_property"
    ],
    [
        "LOAD_NAME",
        "lru_cache"
    ],
    [
        "CALL_FUNCTION",
        "lru_cache()"
    ],
    [
        "CALL_FUNCTION",
        "lru_cache()"
    ],
    [
        "LOAD_NAME",
        "retry_db"
    ],
    [
        "CALL_FUNCTION",
        "retry_db"
    ],
    [
        "LOAD_GLOBAL",
        "super"
    ],
    [
        "LOAD_GLOBAL",
        "BirdsEye"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "super(BirdsEye, self)"
    ],
    [
        "LOAD_ATTR",
        "super(BirdsEye, self).__init__"
    ],
    [
        "CALL_FUNCTION",
        "super(BirdsEye, self).__init__()"
    ],
    [
        "LOAD_FAST",
        "db_uri"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._db_uri"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._code_infos"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._last_call_id"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._ipython_cell_value"
    ],
    [
        "LOAD_FAST",
        "num_samples"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(\n                attributes=50,\n                dict=50,\n                list=30,\n                set=30,\n                pandas_rows=20,\n                pandas_cols=100,\n            )"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(\n                attributes=50,\n                dict=10,\n                list=6,\n                set=6,\n                pandas_rows=6,\n                pandas_cols=10,\n            )"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(\n            big=dict(\n                attributes=50,\n                dict=50,\n                list=30,\n                set=30,\n                pandas_rows=20,\n                pandas_cols=100,\n            ),\n            small=dict(\n                attributes=50,\n                dict=10,\n                list=6,\n                set=6,\n                pandas_rows=6,\n                pandas_cols=10,\n            ),\n        )"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.num_samples"
    ],
    [
        "LOAD_GLOBAL",
        "Database"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._db_uri"
    ],
    [
        "CALL_FUNCTION",
        "Database(self._db_uri)"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.walk"
    ],
    [
        "LOAD_FAST",
        "root"
    ],
    [
        "CALL_FUNCTION",
        "ast.walk(root)"
    ],
    [
        "LOAD_GLOBAL",
        "tracer"
    ],
    [
        "LOAD_ATTR",
        "tracer.loops"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "tracer.loops(node)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "STORE_ATTR",
        "node._loops"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.expr"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.expr)"
    ],
    [
        "LOAD_GLOBAL",
        "is_interesting_expression"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "is_interesting_expression(node)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "STORE_ATTR",
        "node._is_interesting_expression"
    ],
    [
        "LOAD_GLOBAL",
        "super"
    ],
    [
        "LOAD_GLOBAL",
        "BirdsEye"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "super(BirdsEye, self)"
    ],
    [
        "LOAD_ATTR",
        "super(BirdsEye, self).compile"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_FAST",
        "flags"
    ],
    [
        "CALL_FUNCTION",
        "super(BirdsEye, self).compile(source, filename, flags)"
    ],
    [
        "LOAD_GLOBAL",
        "ASTTokens"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.root"
    ],
    [
        "CALL_FUNCTION_KW",
        "ASTTokens(source, tree=traced_file.root)"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "STORE_ATTR",
        "traced_file.tokens"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos"
    ],
    [
        "COMPARE_OP",
        "frame.f_code not in self._code_infos"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.For"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node.parent, ast.For)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_ATTR",
        "node.parent.body"
    ],
    [
        "BINARY_SUBSCR",
        "node.parent.body[0]"
    ],
    [
        "COMPARE_OP",
        "node is node.parent.body[0]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._add_iteration"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._loops"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "CALL_FUNCTION",
        "self._add_iteration(node._loops, frame)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.While"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node.parent, ast.While)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_ATTR",
        "node.parent.test"
    ],
    [
        "COMPARE_OP",
        "node is node.parent.test"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._add_iteration"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._loops"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "CALL_FUNCTION",
        "self._add_iteration(node._loops, frame)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.stack"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "BINARY_SUBSCR",
        "self.stack[frame]"
    ],
    [
        "LOAD_ATTR",
        "self.stack[frame].iteration"
    ],
    [
        "LOAD_GLOBAL",
        "enumerate"
    ],
    [
        "LOAD_FAST",
        "loops"
    ],
    [
        "CALL_FUNCTION",
        "enumerate(loops)"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "LOAD_ATTR",
        "iteration.loops"
    ],
    [
        "LOAD_FAST",
        "loop_node"
    ],
    [
        "LOAD_ATTR",
        "loop_node._tree_index"
    ],
    [
        "BINARY_SUBSCR",
        "iteration.loops[loop_node._tree_index]"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "loops"
    ],
    [
        "CALL_FUNCTION",
        "len(loops)"
    ],
    [
        "BINARY_SUBTRACT",
        "len(loops) - 1"
    ],
    [
        "COMPARE_OP",
        "i == len(loops) - 1"
    ],
    [
        "LOAD_FAST",
        "loop"
    ],
    [
        "LOAD_ATTR",
        "loop.append"
    ],
    [
        "LOAD_GLOBAL",
        "Iteration"
    ],
    [
        "CALL_FUNCTION",
        "Iteration()"
    ],
    [
        "CALL_FUNCTION",
        "loop.append(Iteration())"
    ],
    [
        "LOAD_FAST",
        "loop"
    ],
    [
        "LOAD_ATTR",
        "loop.last"
    ],
    [
        "CALL_FUNCTION",
        "loop.last()"
    ],
    [
        "LOAD_GLOBAL",
        "_tracing_recursively"
    ],
    [
        "LOAD_DEREF",
        "frame"
    ],
    [
        "CALL_FUNCTION",
        "_tracing_recursively(frame)"
    ],
    [
        "LOAD_DEREF",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos"
    ],
    [
        "COMPARE_OP",
        "frame.f_code not in self._code_infos"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._is_interesting_expression"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos"
    ],
    [
        "LOAD_DEREF",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "BINARY_SUBSCR",
        "self._code_infos[frame.f_code]"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos[frame.f_code].traced_file"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos[frame.f_code].traced_file.is_ipython_cell"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Expr"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node.parent, ast.Expr)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_ATTR",
        "node.parent.parent"
    ],
    [
        "LOAD_ATTR",
        "node.parent.parent.body"
    ],
    [
        "BINARY_SUBSCR",
        "node.parent.parent.body[-1]"
    ],
    [
        "COMPARE_OP",
        "node.parent is node.parent.parent.body[-1]"
    ],
    [
        "LOAD_DEREF",
        "value"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._ipython_cell_value"
    ],
    [
        "LOAD_GLOBAL",
        "is_obvious_builtin"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.stack"
    ],
    [
        "LOAD_DEREF",
        "frame"
    ],
    [
        "BINARY_SUBSCR",
        "self.stack[frame]"
    ],
    [
        "LOAD_ATTR",
        "self.stack[frame].expression_values"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "BINARY_SUBSCR",
        "self.stack[frame].expression_values[node]"
    ],
    [
        "CALL_FUNCTION",
        "is_obvious_builtin(node, self.stack[frame].expression_values[node])"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.stack"
    ],
    [
        "LOAD_DEREF",
        "frame"
    ],
    [
        "BINARY_SUBSCR",
        "self.stack[frame]"
    ],
    [
        "LOAD_FAST",
        "exc_value"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._exception_value"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_DEREF",
        "frame"
    ],
    [
        "LOAD_FAST",
        "exc_value"
    ],
    [
        "CALL_FUNCTION",
        "self._exception_value(node, frame, exc_value)"
    ],
    [
        "LOAD_GLOBAL",
        "NodeValue"
    ],
    [
        "LOAD_ATTR",
        "NodeValue.expression"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.num_samples"
    ],
    [
        "LOAD_DEREF",
        "value"
    ],
    [
        "LOAD_GLOBAL",
        "max"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._loops"
    ],
    [
        "CALL_FUNCTION",
        "len(node._loops)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._is_first_loop_iteration"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_DEREF",
        "frame"
    ],
    [
        "CALL_FUNCTION",
        "self._is_first_loop_iteration(node, frame)"
    ],
    [
        "UNARY_NOT",
        "not self._is_first_loop_iteration(node, frame)"
    ],
    [
        "BINARY_MULTIPLY",
        "len(node._loops) * (not self._is_first_loop_iteration(node, frame))"
    ],
    [
        "BINARY_SUBTRACT",
        "3 - len(node._loops) * (not self._is_first_loop_iteration(node, frame))"
    ],
    [
        "CALL_FUNCTION",
        "max(1, 3 - len(node._loops) * (not self._is_first_loop_iteration(node, frame)))"
    ],
    [
        "CALL_FUNCTION_KW",
        "NodeValue.expression(\n                    self.num_samples,\n                    value,\n                    level=max(1, 3 - len(node._loops) * (not self._is_first_loop_iteration(node, frame))),\n                )"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._set_node_value"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_DEREF",
        "frame"
    ],
    [
        "LOAD_FAST",
        "node_value"
    ],
    [
        "CALL_FUNCTION",
        "self._set_node_value(node, frame, node_value)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._check_inner_call"
    ],
    [
        "LOAD_FAST",
        "frame_info"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "node_value"
    ],
    [
        "CALL_FUNCTION",
        "self._check_inner_call(frame_info, node, node_value)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.comprehension"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node.parent, ast.comprehension)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_ATTR",
        "node.parent.iter"
    ],
    [
        "COMPARE_OP",
        "node is node.parent.iter"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_ATTR",
        "node.parent.parent"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.GeneratorExp"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node.parent.parent, ast.GeneratorExp)"
    ],
    [
        "UNARY_NOT",
        "not isinstance(node.parent.parent, ast.GeneratorExp)"
    ],
    [
        "LOAD_FAST",
        "is_special_comprehension_iter"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._set_node_value"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_DEREF",
        "frame"
    ],
    [
        "LOAD_GLOBAL",
        "NodeValue"
    ],
    [
        "LOAD_ATTR",
        "NodeValue.covered"
    ],
    [
        "CALL_FUNCTION",
        "NodeValue.covered()"
    ],
    [
        "CALL_FUNCTION",
        "self._set_node_value(node.parent, frame, NodeValue.covered())"
    ],
    [
        "LOAD_FAST",
        "exc_value"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._loops"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "BINARY_ADD",
        "node._loops + (node.parent,)"
    ],
    [
        "LOAD_GLOBAL",
        "ChangeValue"
    ],
    [
        "LOAD_FAST",
        "comprehension_iter_proxy"
    ],
    [
        "CALL_FUNCTION",
        "comprehension_iter_proxy()"
    ],
    [
        "CALL_FUNCTION",
        "ChangeValue(comprehension_iter_proxy())"
    ],
    [
        "LOAD_DEREF",
        "value"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._add_iteration"
    ],
    [
        "LOAD_DEREF",
        "loops"
    ],
    [
        "LOAD_DEREF",
        "frame"
    ],
    [
        "CALL_FUNCTION",
        "self._add_iteration(loops, frame)"
    ],
    [
        "LOAD_FAST",
        "item"
    ],
    [
        "LOAD_FAST",
        "frame_info"
    ],
    [
        "LOAD_ATTR",
        "frame_info.inner_calls"
    ],
    [
        "LOAD_ATTR",
        "frame_info.inner_calls.pop"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "frame_info.inner_calls.pop(node, None)"
    ],
    [
        "LOAD_FAST",
        "inner_calls"
    ],
    [
        "LOAD_FAST",
        "node_value"
    ],
    [
        "LOAD_ATTR",
        "node_value.set_meta"
    ],
    [
        "LOAD_FAST",
        "inner_calls"
    ],
    [
        "CALL_FUNCTION",
        "node_value.set_meta('inner_calls', inner_calls)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.stack"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "BINARY_SUBSCR",
        "self.stack[frame]"
    ],
    [
        "LOAD_ATTR",
        "self.stack[frame].iteration"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._loops"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "LOAD_ATTR",
        "iteration.loops"
    ],
    [
        "LOAD_FAST",
        "loop_node"
    ],
    [
        "LOAD_ATTR",
        "loop_node._tree_index"
    ],
    [
        "BINARY_SUBSCR",
        "iteration.loops[loop_node._tree_index]"
    ],
    [
        "LOAD_FAST",
        "loop"
    ],
    [
        "LOAD_ATTR",
        "loop.last"
    ],
    [
        "CALL_FUNCTION",
        "loop.last()"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "LOAD_ATTR",
        "iteration.index"
    ],
    [
        "COMPARE_OP",
        "iteration.index > 0"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.stack"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "BINARY_SUBSCR",
        "self.stack[frame]"
    ],
    [
        "LOAD_ATTR",
        "self.stack[frame].iteration"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._loops"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "LOAD_ATTR",
        "iteration.loops"
    ],
    [
        "LOAD_FAST",
        "loop_node"
    ],
    [
        "LOAD_ATTR",
        "loop_node._tree_index"
    ],
    [
        "BINARY_SUBSCR",
        "iteration.loops[loop_node._tree_index]"
    ],
    [
        "LOAD_FAST",
        "loop"
    ],
    [
        "LOAD_ATTR",
        "loop.recorded_node"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "loop.recorded_node(node)"
    ],
    [
        "LOAD_FAST",
        "loop"
    ],
    [
        "LOAD_ATTR",
        "loop.last"
    ],
    [
        "CALL_FUNCTION",
        "loop.last()"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "LOAD_ATTR",
        "iteration.vals"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._tree_index"
    ],
    [
        "STORE_SUBSCR",
        "iteration.vals[node._tree_index]"
    ],
    [
        "LOAD_GLOBAL",
        "NodeValue"
    ],
    [
        "LOAD_ATTR",
        "NodeValue.exception"
    ],
    [
        "LOAD_FAST",
        "exc_value"
    ],
    [
        "CALL_FUNCTION",
        "NodeValue.exception(exc_value)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._set_node_value"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "CALL_FUNCTION",
        "self._set_node_value(node, frame, value)"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos"
    ],
    [
        "COMPARE_OP",
        "frame.f_code not in self._code_infos"
    ],
    [
        "LOAD_GLOBAL",
        "_tracing_recursively"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "CALL_FUNCTION",
        "_tracing_recursively(frame)"
    ],
    [
        "LOAD_FAST",
        "exc_value"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "exc_node"
    ],
    [
        "COMPARE_OP",
        "node is exc_node"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._exception_value"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_FAST",
        "exc_value"
    ],
    [
        "CALL_FUNCTION",
        "self._exception_value(node, frame, exc_value)"
    ],
    [
        "LOAD_GLOBAL",
        "NodeValue"
    ],
    [
        "LOAD_ATTR",
        "NodeValue.covered"
    ],
    [
        "CALL_FUNCTION",
        "NodeValue.covered()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._set_node_value"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "CALL_FUNCTION",
        "self._set_node_value(node, frame, value)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._check_inner_call"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.stack"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "BINARY_SUBSCR",
        "self.stack[frame]"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "CALL_FUNCTION",
        "self._check_inner_call(self.stack[frame], node, value)"
    ],
    [
        "LOAD_FAST",
        "enter_info"
    ],
    [
        "LOAD_ATTR",
        "enter_info.current_frame"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos"
    ],
    [
        "COMPARE_OP",
        "frame.f_code not in self._code_infos"
    ],
    [
        "LOAD_GLOBAL",
        "_tracing_recursively"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "CALL_FUNCTION",
        "_tracing_recursively(frame)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.stack"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "BINARY_SUBSCR",
        "self.stack[frame]"
    ],
    [
        "LOAD_GLOBAL",
        "get_unfrozen_datetime"
    ],
    [
        "CALL_FUNCTION",
        "get_unfrozen_datetime()"
    ],
    [
        "LOAD_FAST",
        "frame_info"
    ],
    [
        "STORE_ATTR",
        "frame_info.start_time"
    ],
    [
        "LOAD_GLOBAL",
        "Iteration"
    ],
    [
        "CALL_FUNCTION",
        "Iteration()"
    ],
    [
        "LOAD_FAST",
        "frame_info"
    ],
    [
        "STORE_ATTR",
        "frame_info.iteration"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "BINARY_SUBSCR",
        "self._code_infos[frame.f_code]"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "enter_info"
    ],
    [
        "LOAD_ATTR",
        "enter_info.enter_node"
    ],
    [
        "LOAD_ATTR",
        "enter_info.enter_node.parent"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Module"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(enter_info.enter_node.parent, ast.Module)"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_locals"
    ],
    [
        "LOAD_ATTR",
        "frame.f_locals.copy"
    ],
    [
        "CALL_FUNCTION",
        "frame.f_locals.copy()"
    ],
    [
        "LOAD_FAST",
        "code_info"
    ],
    [
        "LOAD_ATTR",
        "code_info.arg_names"
    ],
    [
        "LOAD_DEREF",
        "f_locals"
    ],
    [
        "LOAD_ATTR",
        "f_locals.items"
    ],
    [
        "CALL_FUNCTION",
        "f_locals.items()"
    ],
    [
        "BINARY_ADD",
        "[(name, f_locals.pop(name))\n                         for name in code_info.arg_names\n                         if name] + [\n\n                            # Local variables other than actual arguments. These are variables from\n                            # the enclosing scope. It's handy to treat them like arguments in the UI\n                            it for it in f_locals.items()\n                            if it[0][0] != '.'  # Appears when using nested tuple arguments\n                        ]"
    ],
    [
        "LOAD_GLOBAL",
        "json"
    ],
    [
        "LOAD_ATTR",
        "json.dumps"
    ],
    [
        "LOAD_FAST",
        "arguments"
    ],
    [
        "CALL_FUNCTION",
        "json.dumps([[k, cheap_repr(v)] for k, v in arguments])"
    ],
    [
        "LOAD_FAST",
        "frame_info"
    ],
    [
        "STORE_ATTR",
        "frame_info.arguments"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._call_id"
    ],
    [
        "CALL_FUNCTION",
        "self._call_id()"
    ],
    [
        "LOAD_FAST",
        "frame_info"
    ],
    [
        "STORE_ATTR",
        "frame_info.call_id"
    ],
    [
        "LOAD_GLOBAL",
        "defaultdict"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "CALL_FUNCTION",
        "defaultdict(list)"
    ],
    [
        "LOAD_FAST",
        "frame_info"
    ],
    [
        "STORE_ATTR",
        "frame_info.inner_calls"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.stack"
    ],
    [
        "LOAD_ATTR",
        "self.stack.get"
    ],
    [
        "LOAD_FAST",
        "enter_info"
    ],
    [
        "LOAD_ATTR",
        "enter_info.caller_frame"
    ],
    [
        "CALL_FUNCTION",
        "self.stack.get(enter_info.caller_frame)"
    ],
    [
        "LOAD_FAST",
        "prev"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_FAST",
        "prev"
    ],
    [
        "CALL_FUNCTION",
        "getattr(prev, 'inner_calls', None)"
    ],
    [
        "LOAD_FAST",
        "inner_calls"
    ],
    [
        "COMPARE_OP",
        "inner_calls is not None"
    ],
    [
        "LOAD_FAST",
        "inner_calls"
    ],
    [
        "LOAD_FAST",
        "enter_info"
    ],
    [
        "LOAD_ATTR",
        "enter_info.call_node"
    ],
    [
        "BINARY_SUBSCR",
        "inner_calls[enter_info.call_node]"
    ],
    [
        "LOAD_ATTR",
        "inner_calls[enter_info.call_node].append"
    ],
    [
        "LOAD_FAST",
        "frame_info"
    ],
    [
        "LOAD_ATTR",
        "frame_info.call_id"
    ],
    [
        "CALL_FUNCTION",
        "inner_calls[enter_info.call_node].append(frame_info.call_id)"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_DEREF",
        "f_locals"
    ],
    [
        "LOAD_ATTR",
        "f_locals.pop"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "CALL_FUNCTION",
        "f_locals.pop(name)"
    ],
    [
        "LOAD_FAST",
        "it"
    ],
    [
        "BINARY_SUBSCR",
        "it[0]"
    ],
    [
        "BINARY_SUBSCR",
        "it[0][0]"
    ],
    [
        "COMPARE_OP",
        "it[0][0] != '.'"
    ],
    [
        "LOAD_FAST",
        "it"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "LOAD_GLOBAL",
        "cheap_repr"
    ],
    [
        "LOAD_FAST",
        "v"
    ],
    [
        "CALL_FUNCTION",
        "cheap_repr(v)"
    ],
    [
        "LOAD_GLOBAL",
        "uuid4"
    ],
    [
        "CALL_FUNCTION",
        "uuid4()"
    ],
    [
        "LOAD_ATTR",
        "uuid4().hex"
    ],
    [
        "LOAD_DEREF",
        "exit_info"
    ],
    [
        "LOAD_ATTR",
        "exit_info.current_frame"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos"
    ],
    [
        "COMPARE_OP",
        "frame.f_code not in self._code_infos"
    ],
    [
        "LOAD_GLOBAL",
        "_tracing_recursively"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "CALL_FUNCTION",
        "_tracing_recursively(frame)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.stack"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "BINARY_SUBSCR",
        "self.stack[frame]"
    ],
    [
        "LOAD_DEREF",
        "frame_info"
    ],
    [
        "LOAD_ATTR",
        "frame_info.iteration"
    ],
    [
        "LOAD_GLOBAL",
        "_deep_dict"
    ],
    [
        "CALL_FUNCTION",
        "_deep_dict()"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._extract_node_values"
    ],
    [
        "LOAD_DEREF",
        "top_iteration"
    ],
    [
        "LOAD_DEREF",
        "node_values"
    ],
    [
        "CALL_FUNCTION",
        "self._extract_node_values(top_iteration, (), node_values)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "BINARY_SUBSCR",
        "self._code_infos[frame.f_code]"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos[frame.f_code].db_func"
    ],
    [
        "LOAD_DEREF",
        "exit_info"
    ],
    [
        "LOAD_ATTR",
        "exit_info.exc_value"
    ],
    [
        "LOAD_FAST",
        "exc"
    ],
    [
        "LOAD_ATTR",
        "''.join"
    ],
    [
        "LOAD_GLOBAL",
        "traceback"
    ],
    [
        "LOAD_ATTR",
        "traceback.format_exception"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "exc"
    ],
    [
        "CALL_FUNCTION",
        "type(exc)"
    ],
    [
        "LOAD_FAST",
        "exc"
    ],
    [
        "LOAD_DEREF",
        "exit_info"
    ],
    [
        "LOAD_ATTR",
        "exit_info.exc_tb"
    ],
    [
        "CALL_FUNCTION",
        "traceback.format_exception(type(exc), exc, exit_info.exc_tb)"
    ],
    [
        "CALL_FUNCTION",
        "''.join(traceback.format_exception(type(exc), exc, exit_info.exc_tb))"
    ],
    [
        "LOAD_GLOBAL",
        "exception_string"
    ],
    [
        "LOAD_FAST",
        "exc"
    ],
    [
        "CALL_FUNCTION",
        "exception_string(exc)"
    ],
    [
        "LOAD_GLOBAL",
        "retry_db"
    ],
    [
        "CALL_FUNCTION",
        "retry_db"
    ],
    [
        "LOAD_FAST",
        "add_call"
    ],
    [
        "CALL_FUNCTION",
        "add_call()"
    ],
    [
        "LOAD_DEREF",
        "frame_info"
    ],
    [
        "LOAD_ATTR",
        "frame_info.call_id"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._last_call_id"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.db"
    ],
    [
        "LOAD_ATTR",
        "self.db.Call"
    ],
    [
        "LOAD_FAST",
        "Call"
    ],
    [
        "LOAD_DEREF",
        "frame_info"
    ],
    [
        "LOAD_ATTR",
        "frame_info.call_id"
    ],
    [
        "LOAD_DEREF",
        "db_func"
    ],
    [
        "LOAD_DEREF",
        "frame_info"
    ],
    [
        "LOAD_ATTR",
        "frame_info.arguments"
    ],
    [
        "LOAD_GLOBAL",
        "cheap_repr"
    ],
    [
        "LOAD_DEREF",
        "exit_info"
    ],
    [
        "LOAD_ATTR",
        "exit_info.return_value"
    ],
    [
        "CALL_FUNCTION",
        "cheap_repr(exit_info.return_value)"
    ],
    [
        "LOAD_DEREF",
        "exception"
    ],
    [
        "LOAD_DEREF",
        "traceback_str"
    ],
    [
        "LOAD_GLOBAL",
        "json"
    ],
    [
        "LOAD_ATTR",
        "json.dumps"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_DEREF",
        "node_values"
    ],
    [
        "LOAD_DEREF",
        "top_iteration"
    ],
    [
        "LOAD_ATTR",
        "top_iteration.extract_iterations"
    ],
    [
        "CALL_FUNCTION",
        "top_iteration.extract_iterations()"
    ],
    [
        "BINARY_SUBSCR",
        "top_iteration.extract_iterations()['loops']"
    ],
    [
        "LOAD_GLOBAL",
        "type_registry"
    ],
    [
        "LOAD_ATTR",
        "type_registry.names"
    ],
    [
        "CALL_FUNCTION",
        "type_registry.names()"
    ],
    [
        "LOAD_GLOBAL",
        "type_registry"
    ],
    [
        "LOAD_ATTR",
        "type_registry.num_special_types"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(\n                                node_values=node_values,\n                                loop_iterations=top_iteration.extract_iterations()['loops'],\n                                type_names=type_registry.names(),\n                                num_special_types=type_registry.num_special_types,\n                            )"
    ],
    [
        "LOAD_GLOBAL",
        "ProtocolEncoder"
    ],
    [
        "CALL_FUNCTION_KW",
        "json.dumps(\n                            dict(\n                                node_values=node_values,\n                                loop_iterations=top_iteration.extract_iterations()['loops'],\n                                type_names=type_registry.names(),\n                                num_special_types=type_registry.num_special_types,\n                            ),\n                            cls=ProtocolEncoder,\n                            separators=(',', ':')\n                        )"
    ],
    [
        "LOAD_DEREF",
        "frame_info"
    ],
    [
        "LOAD_ATTR",
        "frame_info.start_time"
    ],
    [
        "CALL_FUNCTION_KW",
        "Call(id=frame_info.call_id,\n                        function_id=db_func,\n                        arguments=frame_info.arguments,\n                        return_value=cheap_repr(exit_info.return_value),\n                        exception=exception,\n                        traceback=traceback_str,\n                        data=json.dumps(\n                            dict(\n                                node_values=node_values,\n                                loop_iterations=top_iteration.extract_iterations()['loops'],\n                                type_names=type_registry.names(),\n                                num_special_types=type_registry.num_special_types,\n                            ),\n                            cls=ProtocolEncoder,\n                            separators=(',', ':')\n                        ),\n                        start_time=frame_info.start_time)"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.db"
    ],
    [
        "LOAD_ATTR",
        "self.db.session_scope"
    ],
    [
        "CALL_FUNCTION",
        "self.db.session_scope()"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.add"
    ],
    [
        "LOAD_FAST",
        "call"
    ],
    [
        "CALL_FUNCTION",
        "session.add(call)"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "LOAD_ATTR",
        "iteration.vals"
    ],
    [
        "LOAD_ATTR",
        "iteration.vals.items"
    ],
    [
        "CALL_FUNCTION",
        "iteration.vals.items()"
    ],
    [
        "LOAD_FAST",
        "tree_index"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "BINARY_ADD",
        "(tree_index,) + path"
    ],
    [
        "LOAD_FAST",
        "node_values"
    ],
    [
        "LOAD_FAST",
        "full_path"
    ],
    [
        "BINARY_SUBSCR",
        "full_path[:-1]"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "path_k"
    ],
    [
        "BINARY_SUBSCR",
        "d[path_k]"
    ],
    [
        "LOAD_FAST",
        "node_value"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "full_path"
    ],
    [
        "BINARY_SUBSCR",
        "full_path[-1]"
    ],
    [
        "STORE_SUBSCR",
        "d[full_path[-1]]"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "LOAD_ATTR",
        "iteration.loops"
    ],
    [
        "LOAD_ATTR",
        "iteration.loops.values"
    ],
    [
        "CALL_FUNCTION",
        "iteration.loops.values()"
    ],
    [
        "LOAD_GLOBAL",
        "enumerate"
    ],
    [
        "LOAD_FAST",
        "loop"
    ],
    [
        "CALL_FUNCTION",
        "enumerate(loop)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._extract_node_values"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "LOAD_FAST",
        "path"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_ADD",
        "path + (i,)"
    ],
    [
        "LOAD_FAST",
        "node_values"
    ],
    [
        "CALL_FUNCTION",
        "self._extract_node_values(iteration, path + (i,), node_values)"
    ],
    [
        "LOAD_GLOBAL",
        "super"
    ],
    [
        "LOAD_GLOBAL",
        "BirdsEye"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "CALL_FUNCTION",
        "super(BirdsEye, self)"
    ],
    [
        "LOAD_ATTR",
        "super(BirdsEye, self).trace_function"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "CALL_FUNCTION",
        "super(BirdsEye, self).trace_function(func)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos.get"
    ],
    [
        "LOAD_FAST",
        "new_func"
    ],
    [
        "LOAD_ATTR",
        "new_func.__code__"
    ],
    [
        "CALL_FUNCTION",
        "self._code_infos.get(new_func.__code__)"
    ],
    [
        "LOAD_FAST",
        "code_info"
    ],
    [
        "LOAD_FAST",
        "new_func"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_ATTR",
        "inspect.getsourcelines"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "CALL_FUNCTION",
        "inspect.getsourcelines(func)"
    ],
    [
        "LOAD_FAST",
        "start_lineno"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "lines"
    ],
    [
        "CALL_FUNCTION",
        "len(lines)"
    ],
    [
        "BINARY_ADD",
        "start_lineno + len(lines)"
    ],
    [
        "LOAD_GLOBAL",
        "safe_qualname"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "CALL_FUNCTION",
        "safe_qualname(func)"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_ATTR",
        "inspect.getsourcefile"
    ],
    [
        "LOAD_FAST",
        "func"
    ],
    [
        "CALL_FUNCTION",
        "inspect.getsourcefile(func)"
    ],
    [
        "LOAD_FAST",
        "source_file"
    ],
    [
        "LOAD_ATTR",
        "source_file.startswith"
    ],
    [
        "CALL_FUNCTION",
        "source_file.startswith('<ipython-input')"
    ],
    [
        "LOAD_GLOBAL",
        "IPYTHON_FILE_PATH"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.path"
    ],
    [
        "LOAD_ATTR",
        "os.path.abspath"
    ],
    [
        "LOAD_FAST",
        "source_file"
    ],
    [
        "CALL_FUNCTION",
        "os.path.abspath(source_file)"
    ],
    [
        "LOAD_FAST",
        "new_func"
    ],
    [
        "LOAD_ATTR",
        "new_func.traced_file"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_ATTR",
        "inspect.getargs"
    ],
    [
        "LOAD_FAST",
        "new_func"
    ],
    [
        "LOAD_ATTR",
        "new_func.__code__"
    ],
    [
        "CALL_FUNCTION",
        "inspect.getargs(new_func.__code__)"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_GLOBAL",
        "chain"
    ],
    [
        "LOAD_GLOBAL",
        "flatten_list"
    ],
    [
        "LOAD_FAST",
        "arg_info"
    ],
    [
        "BINARY_SUBSCR",
        "arg_info[0]"
    ],
    [
        "CALL_FUNCTION",
        "flatten_list(arg_info[0])"
    ],
    [
        "LOAD_FAST",
        "arg_info"
    ],
    [
        "BINARY_SUBSCR",
        "arg_info[1:]"
    ],
    [
        "CALL_FUNCTION",
        "chain(flatten_list(arg_info[0]), arg_info[1:])"
    ],
    [
        "CALL_FUNCTION",
        "list(chain(flatten_list(arg_info[0]), arg_info[1:]))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._trace"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_FAST",
        "new_func"
    ],
    [
        "LOAD_ATTR",
        "new_func.__code__"
    ],
    [
        "LOAD_FAST",
        "start_lineno"
    ],
    [
        "LOAD_FAST",
        "end_lineno"
    ],
    [
        "LOAD_FAST",
        "arg_names"
    ],
    [
        "CALL_FUNCTION_KW",
        "self._trace(name, filename, traced_file, new_func.__code__, typ='function',\n                    start_lineno=start_lineno, end_lineno=end_lineno,\n                    arg_names=arg_names)"
    ],
    [
        "LOAD_FAST",
        "new_func"
    ],
    [
        "LOAD_FAST",
        "get_ipython"
    ],
    [
        "CALL_FUNCTION",
        "get_ipython()"
    ],
    [
        "LOAD_FAST",
        "shell"
    ],
    [
        "LOAD_ATTR",
        "shell.compile"
    ],
    [
        "LOAD_ATTR",
        "shell.compile.cache"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "CALL_FUNCTION",
        "shell.compile.cache(source)"
    ],
    [
        "LOAD_FAST",
        "shell"
    ],
    [
        "LOAD_ATTR",
        "shell.compile"
    ],
    [
        "LOAD_ATTR",
        "shell.compile.flags"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.compile"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_FAST",
        "flags"
    ],
    [
        "CALL_FUNCTION",
        "self.compile(source, filename, flags)"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "STORE_ATTR",
        "traced_file.is_ipython_cell"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.root"
    ],
    [
        "LOAD_ATTR",
        "traced_file.root.body"
    ],
    [
        "LOAD_GLOBAL",
        "is_future_import"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "is_future_import(node)"
    ],
    [
        "LOAD_GLOBAL",
        "ValueError"
    ],
    [
        "CALL_FUNCTION",
        "ValueError('from __future__ import ... statements '\n                                 'are not allowed in cells traced with %%eye')"
    ],
    [
        "LOAD_FAST",
        "shell"
    ],
    [
        "LOAD_ATTR",
        "shell.user_global_ns"
    ],
    [
        "LOAD_ATTR",
        "shell.user_global_ns.update"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._trace_methods_dict"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "CALL_FUNCTION",
        "self._trace_methods_dict(traced_file)"
    ],
    [
        "CALL_FUNCTION",
        "shell.user_global_ns.update(self._trace_methods_dict(traced_file))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._trace"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.code"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "CALL_FUNCTION",
        "self._trace(name, filename, traced_file, traced_file.code, 'module', source)"
    ],
    [
        "LOAD_FAST",
        "shell"
    ],
    [
        "LOAD_ATTR",
        "shell.ex"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.code"
    ],
    [
        "CALL_FUNCTION",
        "shell.ex(traced_file.code)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._ipython_cell_value"
    ],
    [
        "LOAD_FAST",
        "callback"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._last_call_id"
    ],
    [
        "CALL_FUNCTION",
        "callback(self._last_call_id)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self._ipython_cell_value"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_ATTR",
        "inspect.currentframe"
    ],
    [
        "CALL_FUNCTION",
        "inspect.currentframe()"
    ],
    [
        "LOAD_FAST",
        "context"
    ],
    [
        "COMPARE_OP",
        "context >= 0"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_back"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_ATTR",
        "inspect.getsourcefile"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "CALL_FUNCTION",
        "inspect.getsourcefile(frame)"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "COMPARE_OP",
        "filename is not None"
    ],
    [
        "LOAD_GLOBAL",
        "os"
    ],
    [
        "LOAD_ATTR",
        "os.path"
    ],
    [
        "LOAD_ATTR",
        "os.path.abspath"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "CALL_FUNCTION",
        "os.path.abspath(filename)"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_globals"
    ],
    [
        "LOAD_ATTR",
        "frame.f_globals.get"
    ],
    [
        "CALL_FUNCTION",
        "frame.f_globals.get('__name__')"
    ],
    [
        "COMPARE_OP",
        "frame.f_globals.get('__name__') != '__main__'"
    ],
    [
        "LOAD_GLOBAL",
        "PY3"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._treetrace_hidden_with_stmt"
    ],
    [
        "LOAD_ATTR",
        "self._treetrace_hidden_with_stmt.__name__"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_globals"
    ],
    [
        "COMPARE_OP",
        "self._treetrace_hidden_with_stmt.__name__ not in frame.f_globals"
    ],
    [
        "LOAD_GLOBAL",
        "RuntimeError"
    ],
    [
        "CALL_FUNCTION",
        "RuntimeError(\n                    'To trace an imported module, you must import birdseye before '\n                    'importing that module.')"
    ],
    [
        "LOAD_GLOBAL",
        "read_source_file"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "CALL_FUNCTION",
        "read_source_file(filename)"
    ],
    [
        "LOAD_ATTR",
        "read_source_file(filename).splitlines"
    ],
    [
        "CALL_FUNCTION",
        "read_source_file(filename).splitlines()"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_lineno"
    ],
    [
        "BINARY_MULTIPLY",
        "[''] * frame.f_lineno"
    ],
    [
        "LOAD_FAST",
        "lines"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_lineno"
    ],
    [
        "STORE_SUBSCR",
        "lines[:frame.f_lineno]"
    ],
    [
        "LOAD_ATTR",
        "'\\n'.join"
    ],
    [
        "LOAD_FAST",
        "lines"
    ],
    [
        "CALL_FUNCTION",
        "'\\n'.join(lines)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.exec_string"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_globals"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_locals"
    ],
    [
        "LOAD_FAST",
        "deep"
    ],
    [
        "CALL_FUNCTION",
        "self.exec_string(source, filename, frame.f_globals, frame.f_locals, deep)"
    ],
    [
        "LOAD_GLOBAL",
        "sys"
    ],
    [
        "LOAD_ATTR",
        "sys.exit"
    ],
    [
        "CALL_FUNCTION",
        "sys.exit(0)"
    ],
    [
        "LOAD_FAST",
        "globs"
    ],
    [
        "LOAD_FAST",
        "locs"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.compile"
    ],
    [
        "LOAD_DEREF",
        "source"
    ],
    [
        "LOAD_DEREF",
        "filename"
    ],
    [
        "CALL_FUNCTION",
        "self.compile(source, filename)"
    ],
    [
        "LOAD_FAST",
        "globs"
    ],
    [
        "LOAD_ATTR",
        "globs.update"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._trace_methods_dict"
    ],
    [
        "LOAD_DEREF",
        "traced_file"
    ],
    [
        "CALL_FUNCTION",
        "self._trace_methods_dict(traced_file)"
    ],
    [
        "CALL_FUNCTION",
        "globs.update(self._trace_methods_dict(traced_file))"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._trace"
    ],
    [
        "LOAD_GLOBAL",
        "FILE_SENTINEL_NAME"
    ],
    [
        "LOAD_DEREF",
        "filename"
    ],
    [
        "LOAD_DEREF",
        "traced_file"
    ],
    [
        "LOAD_DEREF",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.code"
    ],
    [
        "LOAD_DEREF",
        "source"
    ],
    [
        "CALL_FUNCTION",
        "self._trace(FILE_SENTINEL_NAME, filename, traced_file, traced_file.code, 'module', source)"
    ],
    [
        "LOAD_FAST",
        "deep"
    ],
    [
        "LOAD_DEREF",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.nodes"
    ],
    [
        "LOAD_DEREF",
        "find_code"
    ],
    [
        "LOAD_DEREF",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.code"
    ],
    [
        "CALL_FUNCTION",
        "find_code(traced_file.code)"
    ],
    [
        "LOAD_GLOBAL",
        "exec"
    ],
    [
        "LOAD_DEREF",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.code"
    ],
    [
        "LOAD_FAST",
        "globs"
    ],
    [
        "LOAD_FAST",
        "locs"
    ],
    [
        "CALL_FUNCTION",
        "exec(traced_file.code, globs, locs)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.FunctionDef"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.FunctionDef)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.lineno"
    ],
    [
        "LOAD_FAST",
        "root_code"
    ],
    [
        "LOAD_ATTR",
        "root_code.co_consts"
    ],
    [
        "LOAD_GLOBAL",
        "inspect"
    ],
    [
        "LOAD_ATTR",
        "inspect.iscode"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "CALL_FUNCTION",
        "inspect.iscode(code)"
    ],
    [
        "UNARY_NOT",
        "not inspect.iscode(code)"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "LOAD_ATTR",
        "code.co_name"
    ],
    [
        "LOAD_ATTR",
        "code.co_name.startswith"
    ],
    [
        "CALL_FUNCTION",
        "code.co_name.startswith('<')"
    ],
    [
        "LOAD_DEREF",
        "find_code"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "CALL_FUNCTION",
        "find_code(code)"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "LOAD_ATTR",
        "code.co_firstlineno"
    ],
    [
        "LOAD_DEREF",
        "nodes_by_lineno"
    ],
    [
        "LOAD_ATTR",
        "nodes_by_lineno.get"
    ],
    [
        "LOAD_FAST",
        "lineno"
    ],
    [
        "CALL_FUNCTION",
        "nodes_by_lineno.get(lineno)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._trace"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "LOAD_ATTR",
        "code.co_name"
    ],
    [
        "LOAD_DEREF",
        "filename"
    ],
    [
        "LOAD_DEREF",
        "traced_file"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "LOAD_DEREF",
        "source"
    ],
    [
        "LOAD_FAST",
        "lineno"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.last_token"
    ],
    [
        "LOAD_ATTR",
        "node.last_token.end"
    ],
    [
        "BINARY_SUBSCR",
        "node.last_token.end[0]"
    ],
    [
        "BINARY_ADD",
        "node.last_token.end[0] + 1"
    ],
    [
        "CALL_FUNCTION_KW",
        "self._trace(\n                        code.co_name, filename, traced_file, code,\n                        typ='function',\n                        source=source,\n                        start_lineno=lineno,\n                        end_lineno=node.last_token.end[0] + 1,\n                    )"
    ],
    [
        "LOAD_FAST",
        "end_lineno"
    ],
    [
        "LOAD_DEREF",
        "start_lineno"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_ATTR",
        "source.splitlines"
    ],
    [
        "CALL_FUNCTION",
        "source.splitlines()"
    ],
    [
        "CALL_FUNCTION",
        "len(source.splitlines())"
    ],
    [
        "BINARY_ADD",
        "start_lineno + len(source.splitlines())"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._nodes_of_interest"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_DEREF",
        "start_lineno"
    ],
    [
        "LOAD_FAST",
        "end_lineno"
    ],
    [
        "CALL_FUNCTION",
        "self._nodes_of_interest(traced_file, start_lineno, end_lineno)"
    ],
    [
        "CALL_FUNCTION",
        "list(self._nodes_of_interest(traced_file, start_lineno, end_lineno))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._nodes_html"
    ],
    [
        "LOAD_FAST",
        "nodes"
    ],
    [
        "LOAD_DEREF",
        "start_lineno"
    ],
    [
        "LOAD_FAST",
        "end_lineno"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "CALL_FUNCTION",
        "self._nodes_html(nodes, start_lineno, end_lineno, traced_file)"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "nodes"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(\n            # This maps each node to the loops enclosing that node\n            node_loops={\n                node._tree_index: [n._tree_index for n in node._loops]\n                for node, _ in nodes\n                if node._loops\n            },\n        )"
    ],
    [
        "LOAD_FAST",
        "typ"
    ],
    [
        "COMPARE_OP",
        "typ == 'function'"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.tokens"
    ],
    [
        "LOAD_GLOBAL",
        "only"
    ],
    [
        "LOAD_FAST",
        "nodes"
    ],
    [
        "CALL_FUNCTION",
        "only(node\n                             for node, _ in nodes\n                             if isinstance(node, ast.FunctionDef)\n                             and node.first_token.start[0] == start_lineno)"
    ],
    [
        "LOAD_GLOBAL",
        "source_without_decorators"
    ],
    [
        "LOAD_FAST",
        "tokens"
    ],
    [
        "LOAD_FAST",
        "func_node"
    ],
    [
        "CALL_FUNCTION",
        "source_without_decorators(tokens, func_node)"
    ],
    [
        "LOAD_FAST",
        "data_dict"
    ],
    [
        "LOAD_ATTR",
        "data_dict.update"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._node_ranges"
    ],
    [
        "LOAD_FAST",
        "nodes"
    ],
    [
        "LOAD_FAST",
        "tokens"
    ],
    [
        "LOAD_FAST",
        "func_startpos"
    ],
    [
        "CALL_FUNCTION",
        "self._node_ranges(nodes, tokens, func_startpos)"
    ],
    [
        "CALL_FUNCTION",
        "list(self._node_ranges(nodes, tokens, func_startpos))"
    ],
    [
        "LOAD_GLOBAL",
        "list"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._loop_ranges"
    ],
    [
        "LOAD_FAST",
        "nodes"
    ],
    [
        "LOAD_FAST",
        "tokens"
    ],
    [
        "LOAD_FAST",
        "func_startpos"
    ],
    [
        "CALL_FUNCTION",
        "self._loop_ranges(nodes, tokens, func_startpos)"
    ],
    [
        "CALL_FUNCTION",
        "list(self._loop_ranges(nodes, tokens, func_startpos))"
    ],
    [
        "CALL_FUNCTION_KW",
        "data_dict.update(\n                node_ranges=list(self._node_ranges(nodes, tokens, func_startpos)),\n                loop_ranges=list(self._loop_ranges(nodes, tokens, func_startpos)),\n            )"
    ],
    [
        "LOAD_GLOBAL",
        "json"
    ],
    [
        "LOAD_ATTR",
        "json.dumps"
    ],
    [
        "LOAD_FAST",
        "data_dict"
    ],
    [
        "CALL_FUNCTION_KW",
        "json.dumps(data_dict, sort_keys=True)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._db_func"
    ],
    [
        "LOAD_FAST",
        "data"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_FAST",
        "html_body"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_DEREF",
        "start_lineno"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "LOAD_FAST",
        "typ"
    ],
    [
        "CALL_FUNCTION",
        "self._db_func(data, filename, html_body, name, start_lineno, source, typ)"
    ],
    [
        "LOAD_GLOBAL",
        "CodeInfo"
    ],
    [
        "LOAD_FAST",
        "db_func"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_FAST",
        "arg_names"
    ],
    [
        "CALL_FUNCTION",
        "CodeInfo(db_func, traced_file, arg_names)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._code_infos"
    ],
    [
        "LOAD_FAST",
        "code"
    ],
    [
        "STORE_SUBSCR",
        "self._code_infos[code]"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._loops"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._loops"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._tree_index"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "LOAD_ATTR",
        "n._tree_index"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.FunctionDef"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.FunctionDef)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.first_token"
    ],
    [
        "LOAD_ATTR",
        "node.first_token.start"
    ],
    [
        "BINARY_SUBSCR",
        "node.first_token.start[0]"
    ],
    [
        "LOAD_DEREF",
        "start_lineno"
    ],
    [
        "COMPARE_OP",
        "node.first_token.start[0] == start_lineno"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "nodes"
    ],
    [
        "LOAD_FAST",
        "classes"
    ],
    [
        "COMPARE_OP",
        "'loop' not in classes"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.target"
    ],
    [
        "LOAD_GLOBAL",
        "AttributeError"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.test"
    ],
    [
        "LOAD_FAST",
        "tokens"
    ],
    [
        "LOAD_ATTR",
        "tokens.get_text_range"
    ],
    [
        "LOAD_FAST",
        "target"
    ],
    [
        "CALL_FUNCTION",
        "tokens.get_text_range(target)"
    ],
    [
        "LOAD_FAST",
        "func_start"
    ],
    [
        "LOAD_FAST",
        "func_start"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._tree_index"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "end"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(\n                tree_index=node._tree_index,\n                start=start,\n                end=end\n            )"
    ],
    [
        "LOAD_FAST",
        "nodes"
    ],
    [
        "LOAD_FAST",
        "tokens"
    ],
    [
        "LOAD_ATTR",
        "tokens.get_text_range"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "tokens.get_text_range(node)"
    ],
    [
        "LOAD_FAST",
        "func_start"
    ],
    [
        "LOAD_FAST",
        "func_start"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "COMPARE_OP",
        "start < 0"
    ],
    [
        "LOAD_FAST",
        "end"
    ],
    [
        "COMPARE_OP",
        "end < 0"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.FunctionDef"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.FunctionDef)"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._tree_index"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "end"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._depth"
    ],
    [
        "LOAD_FAST",
        "classes"
    ],
    [
        "CALL_FUNCTION_KW",
        "dict(\n                tree_index=node._tree_index,\n                start=start,\n                end=end,\n                depth=node._depth,\n                classes=classes,\n            )"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "BINARY_ADD",
        "filename + name"
    ],
    [
        "LOAD_FAST",
        "html_body"
    ],
    [
        "BINARY_ADD",
        "filename + name + html_body"
    ],
    [
        "LOAD_FAST",
        "data"
    ],
    [
        "BINARY_ADD",
        "filename + name + html_body + data"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "start_lineno"
    ],
    [
        "CALL_FUNCTION",
        "str(start_lineno)"
    ],
    [
        "BINARY_ADD",
        "filename + name + html_body + data + str(start_lineno)"
    ],
    [
        "CALL_FUNCTION",
        "h(filename + name + html_body + data + str(start_lineno))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.db"
    ],
    [
        "LOAD_ATTR",
        "self.db.Function"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.db"
    ],
    [
        "LOAD_ATTR",
        "self.db.session_scope"
    ],
    [
        "CALL_FUNCTION",
        "self.db.session_scope()"
    ],
    [
        "LOAD_GLOBAL",
        "one_or_none"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.query"
    ],
    [
        "LOAD_FAST",
        "Function"
    ],
    [
        "CALL_FUNCTION",
        "session.query(Function)"
    ],
    [
        "LOAD_ATTR",
        "session.query(Function).filter_by"
    ],
    [
        "LOAD_FAST",
        "function_hash"
    ],
    [
        "CALL_FUNCTION_KW",
        "session.query(Function).filter_by(hash=function_hash)"
    ],
    [
        "CALL_FUNCTION",
        "one_or_none(session.query(Function).filter_by(hash=function_hash))"
    ],
    [
        "LOAD_FAST",
        "db_func"
    ],
    [
        "LOAD_FAST",
        "Function"
    ],
    [
        "LOAD_FAST",
        "filename"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_FAST",
        "typ"
    ],
    [
        "LOAD_FAST",
        "html_body"
    ],
    [
        "LOAD_FAST",
        "start_lineno"
    ],
    [
        "LOAD_FAST",
        "data"
    ],
    [
        "LOAD_FAST",
        "h"
    ],
    [
        "LOAD_FAST",
        "source"
    ],
    [
        "CALL_FUNCTION",
        "h(source)"
    ],
    [
        "LOAD_FAST",
        "function_hash"
    ],
    [
        "CALL_FUNCTION_KW",
        "Function(file=filename,\n                                   name=name,\n                                   type=typ,\n                                   html_body=html_body,\n                                   lineno=start_lineno,\n                                   data=data,\n                                   body_hash=h(source),\n                                   hash=function_hash)"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.add"
    ],
    [
        "LOAD_FAST",
        "db_func"
    ],
    [
        "CALL_FUNCTION",
        "session.add(db_func)"
    ],
    [
        "LOAD_FAST",
        "session"
    ],
    [
        "LOAD_ATTR",
        "session.commit"
    ],
    [
        "CALL_FUNCTION",
        "session.commit()"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "db_func"
    ],
    [
        "LOAD_ATTR",
        "db_func.id"
    ],
    [
        "LOAD_GLOBAL",
        "int"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(db_func.id, int)"
    ],
    [
        "LOAD_FAST",
        "db_func"
    ],
    [
        "LOAD_ATTR",
        "db_func.id"
    ],
    [
        "LOAD_GLOBAL",
        "hashlib"
    ],
    [
        "LOAD_ATTR",
        "hashlib.sha256"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "LOAD_ATTR",
        "s.encode"
    ],
    [
        "CALL_FUNCTION",
        "s.encode('utf8')"
    ],
    [
        "CALL_FUNCTION",
        "hashlib.sha256(s.encode('utf8'))"
    ],
    [
        "LOAD_ATTR",
        "hashlib.sha256(s.encode('utf8')).hexdigest"
    ],
    [
        "CALL_FUNCTION",
        "hashlib.sha256(s.encode('utf8')).hexdigest()"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.nodes"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.While"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.For"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.comprehension"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, (ast.While, ast.For, ast.comprehension))"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.parent"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.GeneratorExp"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node.parent, ast.GeneratorExp)"
    ],
    [
        "UNARY_NOT",
        "not isinstance(node.parent, ast.GeneratorExp)"
    ],
    [
        "LOAD_FAST",
        "classes"
    ],
    [
        "LOAD_ATTR",
        "classes.append"
    ],
    [
        "CALL_FUNCTION",
        "classes.append('loop')"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.stmt"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.stmt)"
    ],
    [
        "LOAD_FAST",
        "classes"
    ],
    [
        "LOAD_ATTR",
        "classes.append"
    ],
    [
        "CALL_FUNCTION",
        "classes.append('stmt')"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.expr"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.expr)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._is_interesting_expression"
    ],
    [
        "LOAD_FAST",
        "classes"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.AST"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.AST)"
    ],
    [
        "LOAD_GLOBAL",
        "hasattr"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "hasattr(node, 'first_token')"
    ],
    [
        "LOAD_FAST",
        "start_lineno"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.first_token"
    ],
    [
        "LOAD_ATTR",
        "node.first_token.start"
    ],
    [
        "BINARY_SUBSCR",
        "node.first_token.start[0]"
    ],
    [
        "LOAD_FAST",
        "end_lineno"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.tokens"
    ],
    [
        "LOAD_ATTR",
        "traced_file.tokens.get_text_range"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "traced_file.tokens.get_text_range(node)"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "end"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_FAST",
        "classes"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "end"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.root"
    ],
    [
        "STORE_ATTR",
        "traced_file.root._depth"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.walk"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.root"
    ],
    [
        "CALL_FUNCTION",
        "ast.walk(traced_file.root)"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.iter_child_nodes"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "ast.iter_child_nodes(node)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._depth"
    ],
    [
        "BINARY_ADD",
        "node._depth + 1"
    ],
    [
        "LOAD_FAST",
        "child"
    ],
    [
        "STORE_ATTR",
        "child._depth"
    ],
    [
        "LOAD_FAST",
        "nodes"
    ],
    [
        "LOAD_FAST",
        "positions"
    ],
    [
        "LOAD_ATTR",
        "positions.extend"
    ],
    [
        "LOAD_GLOBAL",
        "map"
    ],
    [
        "LOAD_GLOBAL",
        "HTMLPosition"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "end"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._depth"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._depth"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node._tree_index"
    ],
    [
        "LOAD_ATTR",
        "' '.join"
    ],
    [
        "LOAD_FAST",
        "classes"
    ],
    [
        "CALL_FUNCTION",
        "' '.join(classes)"
    ],
    [
        "BINARY_MODULO",
        "'<span data-index=\"%s\" class=\"%s\">' % (node._tree_index, ' '.join(classes))"
    ],
    [
        "CALL_FUNCTION",
        "map(\n                HTMLPosition,\n                [start, end],\n                [True, False],  # is_start\n                [node._depth, node._depth],\n                ['<span data-index=\"%s\" class=\"%s\">' % (node._tree_index, ' '.join(classes)),\n                 '</span>'])"
    ],
    [
        "CALL_FUNCTION",
        "positions.extend(map(\n                HTMLPosition,\n                [start, end],\n                [True, False],  # is_start\n                [node._depth, node._depth],\n                ['<span data-index=\"%s\" class=\"%s\">' % (node._tree_index, ' '.join(classes)),\n                 '</span>']))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self._separate_comprehensions"
    ],
    [
        "LOAD_FAST",
        "nodes"
    ],
    [
        "LOAD_FAST",
        "end_lineno"
    ],
    [
        "LOAD_FAST",
        "positions"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "CALL_FUNCTION",
        "self._separate_comprehensions(\n            [n[0] for n in nodes],\n            end_lineno, positions, traced_file)"
    ],
    [
        "LOAD_FAST",
        "positions"
    ],
    [
        "LOAD_ATTR",
        "positions.append"
    ],
    [
        "LOAD_GLOBAL",
        "HTMLPosition"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.source"
    ],
    [
        "CALL_FUNCTION",
        "len(traced_file.source)"
    ],
    [
        "CALL_FUNCTION",
        "HTMLPosition(len(traced_file.source), False, 0, '')"
    ],
    [
        "CALL_FUNCTION",
        "positions.append(HTMLPosition(len(traced_file.source), False, 0, ''))"
    ],
    [
        "LOAD_FAST",
        "positions"
    ],
    [
        "LOAD_ATTR",
        "positions.sort"
    ],
    [
        "CALL_FUNCTION",
        "positions.sort()"
    ],
    [
        "LOAD_FAST",
        "positions"
    ],
    [
        "LOAD_FAST",
        "html_parts"
    ],
    [
        "LOAD_ATTR",
        "html_parts.append"
    ],
    [
        "LOAD_GLOBAL",
        "html"
    ],
    [
        "LOAD_ATTR",
        "html.escape"
    ],
    [
        "LOAD_FAST",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.source"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "position"
    ],
    [
        "LOAD_ATTR",
        "position.index"
    ],
    [
        "BINARY_SUBSCR",
        "traced_file.source[start:position.index]"
    ],
    [
        "CALL_FUNCTION",
        "html.escape(traced_file.source[start:position.index])"
    ],
    [
        "CALL_FUNCTION",
        "html_parts.append(html.escape(traced_file.source[start:position.index]))"
    ],
    [
        "LOAD_FAST",
        "html_parts"
    ],
    [
        "LOAD_ATTR",
        "html_parts.append"
    ],
    [
        "LOAD_FAST",
        "position"
    ],
    [
        "LOAD_ATTR",
        "position.html"
    ],
    [
        "CALL_FUNCTION",
        "html_parts.append(position.html)"
    ],
    [
        "LOAD_FAST",
        "position"
    ],
    [
        "LOAD_ATTR",
        "position.index"
    ],
    [
        "LOAD_ATTR",
        "''.join"
    ],
    [
        "LOAD_FAST",
        "html_parts"
    ],
    [
        "CALL_FUNCTION",
        "''.join(html_parts)"
    ],
    [
        "LOAD_ATTR",
        "'\\n'.join"
    ],
    [
        "LOAD_FAST",
        "html_body"
    ],
    [
        "LOAD_ATTR",
        "html_body.split"
    ],
    [
        "CALL_FUNCTION",
        "html_body.split('\\n')"
    ],
    [
        "LOAD_FAST",
        "start_lineno"
    ],
    [
        "BINARY_SUBTRACT",
        "start_lineno - 1"
    ],
    [
        "LOAD_FAST",
        "end_lineno"
    ],
    [
        "BINARY_SUBTRACT",
        "end_lineno - 1"
    ],
    [
        "BINARY_SUBSCR",
        "html_body.split('\\n')[start_lineno - 1:end_lineno - 1]"
    ],
    [
        "CALL_FUNCTION",
        "'\\n'.join(html_body.split('\\n')[start_lineno - 1:end_lineno - 1])"
    ],
    [
        "LOAD_FAST",
        "html_body"
    ],
    [
        "LOAD_ATTR",
        "html_body.strip"
    ],
    [
        "CALL_FUNCTION",
        "html_body.strip('\\n')"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "BINARY_SUBSCR",
        "n[0]"
    ],
    [
        "LOAD_GLOBAL",
        "group_by_key_func"
    ],
    [
        "LOAD_GLOBAL",
        "of_type"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.comprehension"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.While"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.For"
    ],
    [
        "LOAD_FAST",
        "nodes"
    ],
    [
        "CALL_FUNCTION",
        "of_type((ast.comprehension, ast.While, ast.For), nodes)"
    ],
    [
        "CALL_FUNCTION",
        "group_by_key_func(of_type((ast.comprehension, ast.While, ast.For), nodes),\n                                           lambda c: c.first_token.start[0]\n                                           )"
    ],
    [
        "LOAD_FAST",
        "comprehensions"
    ],
    [
        "LOAD_ATTR",
        "comprehensions.values"
    ],
    [
        "CALL_FUNCTION",
        "comprehensions.values()"
    ],
    [
        "LOAD_GLOBAL",
        "sorted"
    ],
    [
        "LOAD_FAST",
        "comp_list"
    ],
    [
        "CALL_FUNCTION_KW",
        "sorted(comp_list, key=lambda c: c.first_token.startpos)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "comp"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.comprehension"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(comp, ast.comprehension)"
    ],
    [
        "LOAD_FAST",
        "comp"
    ],
    [
        "LOAD_FAST",
        "comp"
    ],
    [
        "LOAD_ATTR",
        "comp.parent"
    ],
    [
        "LOAD_ATTR",
        "comp.parent.generators"
    ],
    [
        "BINARY_SUBSCR",
        "comp.parent.generators[0]"
    ],
    [
        "COMPARE_OP",
        "comp is comp.parent.generators[0]"
    ],
    [
        "LOAD_FAST",
        "get_start"
    ],
    [
        "LOAD_FAST",
        "comp"
    ],
    [
        "LOAD_ATTR",
        "comp.parent"
    ],
    [
        "CALL_FUNCTION",
        "get_start(comp.parent)"
    ],
    [
        "LOAD_FAST",
        "prev_start"
    ],
    [
        "COMPARE_OP",
        "prev_start is not None"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "prev_start"
    ],
    [
        "COMPARE_OP",
        "start < prev_start"
    ],
    [
        "LOAD_FAST",
        "get_start"
    ],
    [
        "LOAD_FAST",
        "comp"
    ],
    [
        "CALL_FUNCTION",
        "get_start(comp)"
    ],
    [
        "LOAD_FAST",
        "get_start"
    ],
    [
        "LOAD_FAST",
        "comp"
    ],
    [
        "CALL_FUNCTION",
        "get_start(comp)"
    ],
    [
        "LOAD_FAST",
        "prev_start"
    ],
    [
        "COMPARE_OP",
        "prev_start is not None"
    ],
    [
        "LOAD_FAST",
        "positions"
    ],
    [
        "LOAD_ATTR",
        "positions.append"
    ],
    [
        "LOAD_GLOBAL",
        "HTMLPosition"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "CALL_FUNCTION",
        "HTMLPosition(start, True, 0, '\\n ')"
    ],
    [
        "CALL_FUNCTION",
        "positions.append(HTMLPosition(start, True, 0, '\\n '))"
    ],
    [
        "LOAD_FAST",
        "start"
    ],
    [
        "LOAD_FAST",
        "end_lineno"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_ATTR",
        "c.first_token"
    ],
    [
        "LOAD_ATTR",
        "c.first_token.start"
    ],
    [
        "BINARY_SUBSCR",
        "c.first_token.start[0]"
    ],
    [
        "LOAD_DEREF",
        "traced_file"
    ],
    [
        "LOAD_ATTR",
        "traced_file.tokens"
    ],
    [
        "LOAD_ATTR",
        "traced_file.tokens.get_text_range"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "CALL_FUNCTION",
        "traced_file.tokens.get_text_range(n)"
    ],
    [
        "BINARY_SUBSCR",
        "traced_file.tokens.get_text_range(n)[0]"
    ],
    [
        "LOAD_FAST",
        "c"
    ],
    [
        "LOAD_ATTR",
        "c.first_token"
    ],
    [
        "LOAD_ATTR",
        "c.first_token.startpos"
    ],
    [
        "LOAD_GLOBAL",
        "defaultdict"
    ],
    [
        "LOAD_GLOBAL",
        "_deep_dict"
    ],
    [
        "CALL_FUNCTION",
        "defaultdict(_deep_dict)"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_code"
    ],
    [
        "LOAD_GLOBAL",
        "_bad_codes"
    ],
    [
        "COMPARE_OP",
        "frame.f_code in _bad_codes"
    ],
    [
        "LOAD_FAST",
        "frame"
    ],
    [
        "LOAD_ATTR",
        "frame.f_back"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.vals"
    ],
    [
        "LOAD_GLOBAL",
        "defaultdict"
    ],
    [
        "LOAD_GLOBAL",
        "IterationList"
    ],
    [
        "CALL_FUNCTION",
        "defaultdict(IterationList)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.loops"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.index"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.keep"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.index"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.loops"
    ],
    [
        "LOAD_ATTR",
        "self.loops.items"
    ],
    [
        "CALL_FUNCTION",
        "self.loops.items()"
    ],
    [
        "LOAD_FAST",
        "iteration_list"
    ],
    [
        "LOAD_FAST",
        "tree_index"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "LOAD_ATTR",
        "iteration.extract_iterations"
    ],
    [
        "CALL_FUNCTION",
        "iteration.extract_iterations()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.start"
    ],
    [
        "LOAD_GLOBAL",
        "deque"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.side_len"
    ],
    [
        "CALL_FUNCTION_KW",
        "deque(maxlen=self.side_len)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.end"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.length"
    ],
    [
        "LOAD_GLOBAL",
        "Counter"
    ],
    [
        "CALL_FUNCTION",
        "Counter()"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.recorded"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.length"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.side_len"
    ],
    [
        "COMPARE_OP",
        "self.length < self.side_len"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.start"
    ],
    [
        "LOAD_ATTR",
        "self.start.append"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "CALL_FUNCTION",
        "self.start.append(iteration)"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.end"
    ],
    [
        "CALL_FUNCTION",
        "len(self.end)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.side_len"
    ],
    [
        "COMPARE_OP",
        "len(self.end) >= self.side_len"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.end"
    ],
    [
        "BINARY_SUBSCR",
        "self.end[0]"
    ],
    [
        "LOAD_ATTR",
        "self.end[0].keep"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.start"
    ],
    [
        "LOAD_ATTR",
        "self.start.append"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.end"
    ],
    [
        "BINARY_SUBSCR",
        "self.end[0]"
    ],
    [
        "CALL_FUNCTION",
        "self.start.append(self.end[0])"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.end"
    ],
    [
        "LOAD_ATTR",
        "self.end.append"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "CALL_FUNCTION",
        "self.end.append(iteration)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.length"
    ],
    [
        "LOAD_FAST",
        "iteration"
    ],
    [
        "STORE_ATTR",
        "iteration.index"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.length"
    ],
    [
        "LOAD_GLOBAL",
        "chain"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.start"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.end"
    ],
    [
        "CALL_FUNCTION",
        "chain(self.start, self.end)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.end"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.end"
    ],
    [
        "BINARY_SUBSCR",
        "self.end[-1]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.start"
    ],
    [
        "BINARY_SUBSCR",
        "self.start[-1]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.recorded"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "BINARY_SUBSCR",
        "self.recorded[node]"
    ],
    [
        "COMPARE_OP",
        "self.recorded[node] >= 2"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.last"
    ],
    [
        "CALL_FUNCTION",
        "self.last()"
    ],
    [
        "STORE_ATTR",
        "self.last().keep"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.recorded"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "STORE_SUBSCR",
        "self.recorded[node]"
    ],
    [
        "LOAD_NAME",
        "type"
    ],
    [
        "CALL_FUNCTION",
        "type(None)"
    ],
    [
        "LOAD_NAME",
        "bool"
    ],
    [
        "LOAD_NAME",
        "int"
    ],
    [
        "LOAD_NAME",
        "float"
    ],
    [
        "LOAD_NAME",
        "complex"
    ],
    [
        "LOAD_NAME",
        "PY2"
    ],
    [
        "LOAD_NAME",
        "long"
    ],
    [
        "LOAD_NAME",
        "basic_types"
    ],
    [
        "LOAD_NAME",
        "list"
    ],
    [
        "LOAD_NAME",
        "dict"
    ],
    [
        "LOAD_NAME",
        "tuple"
    ],
    [
        "LOAD_NAME",
        "set"
    ],
    [
        "LOAD_NAME",
        "frozenset"
    ],
    [
        "LOAD_NAME",
        "str"
    ],
    [
        "BINARY_ADD",
        "basic_types + (list, dict, tuple, set, frozenset, str)"
    ],
    [
        "LOAD_NAME",
        "PY2"
    ],
    [
        "LOAD_NAME",
        "PY2"
    ],
    [
        "LOAD_NAME",
        "unicode"
    ],
    [
        "LOAD_NAME",
        "bytes"
    ],
    [
        "LOAD_NAME",
        "len"
    ],
    [
        "LOAD_NAME",
        "special_types"
    ],
    [
        "CALL_FUNCTION",
        "len(special_types)"
    ],
    [
        "LOAD_GLOBAL",
        "Lock"
    ],
    [
        "CALL_FUNCTION",
        "Lock()"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.lock"
    ],
    [
        "LOAD_GLOBAL",
        "defaultdict"
    ],
    [
        "CALL_FUNCTION",
        "defaultdict(lambda: len(self.data))"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.data"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.special_types"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.data"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "BINARY_SUBSCR",
        "self.data[t]"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_DEREF",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.data"
    ],
    [
        "CALL_FUNCTION",
        "len(self.data)"
    ],
    [
        "LOAD_GLOBAL",
        "correct_type"
    ],
    [
        "LOAD_FAST",
        "item"
    ],
    [
        "CALL_FUNCTION",
        "correct_type(item)"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.lock"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.data"
    ],
    [
        "LOAD_FAST",
        "t"
    ],
    [
        "BINARY_SUBSCR",
        "self.data[t]"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.data"
    ],
    [
        "LOAD_ATTR",
        "self.data.items"
    ],
    [
        "CALL_FUNCTION",
        "self.data.items()"
    ],
    [
        "CALL_FUNCTION",
        "dict((v, k) for k, v in self.data.items())"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_DEREF",
        "rev"
    ],
    [
        "CALL_FUNCTION",
        "len(rev)"
    ],
    [
        "CALL_FUNCTION",
        "range(len(rev))"
    ],
    [
        "LOAD_FAST",
        "v"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "LOAD_GLOBAL",
        "safe_qualname"
    ],
    [
        "LOAD_DEREF",
        "rev"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_SUBSCR",
        "rev[i]"
    ],
    [
        "CALL_FUNCTION",
        "safe_qualname(rev[i])"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_NAME",
        "classmethod"
    ],
    [
        "CALL_FUNCTION",
        "classmethod"
    ],
    [
        "LOAD_FAST",
        "val_repr"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.val_repr"
    ],
    [
        "LOAD_FAST",
        "type_index"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.type_index"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.meta"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.children"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.meta"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.meta"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.meta"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "STORE_SUBSCR",
        "self.meta[key]"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.children"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "STORE_ATTR",
        "self.children"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.children"
    ],
    [
        "LOAD_ATTR",
        "self.children.append"
    ],
    [
        "LOAD_FAST",
        "key"
    ],
    [
        "LOAD_GLOBAL",
        "NodeValue"
    ],
    [
        "LOAD_ATTR",
        "NodeValue.expression"
    ],
    [
        "LOAD_FAST",
        "samples"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "LOAD_FAST",
        "level"
    ],
    [
        "CALL_FUNCTION",
        "NodeValue.expression(samples, value, level)"
    ],
    [
        "CALL_FUNCTION",
        "self.children.append((key, NodeValue.expression(samples, value, level)))"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.val_repr"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.type_index"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.meta"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.children"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_ATTR",
        "result.extend"
    ],
    [
        "LOAD_FAST",
        "self"
    ],
    [
        "LOAD_ATTR",
        "self.children"
    ],
    [
        "CALL_FUNCTION",
        "result.extend(self.children)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "CALL_FUNCTION",
        "cls('', -2)"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_GLOBAL",
        "exception_string"
    ],
    [
        "LOAD_FAST",
        "exc_value"
    ],
    [
        "CALL_FUNCTION",
        "exception_string(exc_value)"
    ],
    [
        "CALL_FUNCTION",
        "cls(exception_string(exc_value), -1)"
    ],
    [
        "LOAD_FAST",
        "cls"
    ],
    [
        "LOAD_GLOBAL",
        "cheap_repr"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "CALL_FUNCTION",
        "cheap_repr(val)"
    ],
    [
        "LOAD_GLOBAL",
        "type_registry"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "BINARY_SUBSCR",
        "type_registry[val]"
    ],
    [
        "CALL_FUNCTION",
        "cls(cheap_repr(val), type_registry[val])"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "TypeRegistry"
    ],
    [
        "LOAD_ATTR",
        "TypeRegistry.basic_types"
    ],
    [
        "LOAD_GLOBAL",
        "BirdsEye"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, (TypeRegistry.basic_types, BirdsEye))"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "QuerySet"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, QuerySet)"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "CALL_FUNCTION",
        "len(val)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_ATTR",
        "result.set_meta"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "CALL_FUNCTION",
        "result.set_meta('len', length)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "ModuleType"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, ModuleType)"
    ],
    [
        "LOAD_GLOBAL",
        "min"
    ],
    [
        "LOAD_FAST",
        "level"
    ],
    [
        "CALL_FUNCTION",
        "min(level, 2)"
    ],
    [
        "LOAD_GLOBAL",
        "partial"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_ATTR",
        "result.add_child"
    ],
    [
        "LOAD_FAST",
        "samples"
    ],
    [
        "LOAD_FAST",
        "level"
    ],
    [
        "BINARY_SUBTRACT",
        "level - 1"
    ],
    [
        "CALL_FUNCTION",
        "partial(result.add_child, samples, level - 1)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "Series"
    ],
    [
        "LOAD_GLOBAL",
        "ndarray"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, (Series, ndarray))"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "ndarray"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, ndarray)"
    ],
    [
        "LOAD_FAST",
        "attrs"
    ],
    [
        "LOAD_ATTR",
        "attrs.append"
    ],
    [
        "CALL_FUNCTION",
        "attrs.append('shape')"
    ],
    [
        "LOAD_FAST",
        "attrs"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "CALL_FUNCTION",
        "getattr(val, name)"
    ],
    [
        "LOAD_GLOBAL",
        "AttributeError"
    ],
    [
        "LOAD_FAST",
        "add_child"
    ],
    [
        "LOAD_FAST",
        "name"
    ],
    [
        "LOAD_FAST",
        "attr"
    ],
    [
        "CALL_FUNCTION",
        "add_child(name, attr)"
    ],
    [
        "LOAD_FAST",
        "level"
    ],
    [
        "COMPARE_OP",
        "level >= 3"
    ],
    [
        "LOAD_FAST",
        "level"
    ],
    [
        "COMPARE_OP",
        "level >= 2"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "Series"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, Series)"
    ],
    [
        "LOAD_FAST",
        "samples"
    ],
    [
        "LOAD_FAST",
        "sample_type"
    ],
    [
        "BINARY_SUBSCR",
        "samples[sample_type]"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "DataFrame"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, DataFrame)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_ATTR",
        "result.set_meta"
    ],
    [
        "LOAD_FAST",
        "meta"
    ],
    [
        "CALL_FUNCTION",
        "result.set_meta('dataframe', meta)"
    ],
    [
        "LOAD_FAST",
        "samples"
    ],
    [
        "BINARY_SUBSCR",
        "samples['pandas_rows']"
    ],
    [
        "LOAD_FAST",
        "samples"
    ],
    [
        "BINARY_SUBSCR",
        "samples['pandas_cols']"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "LOAD_FAST",
        "max_rows"
    ],
    [
        "BINARY_ADD",
        "max_rows + 2"
    ],
    [
        "COMPARE_OP",
        "length > max_rows + 2"
    ],
    [
        "LOAD_FAST",
        "max_rows"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "max_rows // 2"
    ],
    [
        "LOAD_FAST",
        "meta"
    ],
    [
        "STORE_SUBSCR",
        "meta['row_break']"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_ATTR",
        "val.columns"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "columns"
    ],
    [
        "CALL_FUNCTION",
        "len(columns)"
    ],
    [
        "LOAD_FAST",
        "num_cols"
    ],
    [
        "LOAD_FAST",
        "max_cols"
    ],
    [
        "BINARY_ADD",
        "max_cols + 2"
    ],
    [
        "COMPARE_OP",
        "num_cols > max_cols + 2"
    ],
    [
        "LOAD_FAST",
        "max_cols"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "max_cols // 2"
    ],
    [
        "LOAD_FAST",
        "meta"
    ],
    [
        "STORE_SUBSCR",
        "meta['col_break']"
    ],
    [
        "LOAD_GLOBAL",
        "set"
    ],
    [
        "LOAD_GLOBAL",
        "_sample_indices"
    ],
    [
        "LOAD_FAST",
        "num_cols"
    ],
    [
        "LOAD_FAST",
        "max_cols"
    ],
    [
        "CALL_FUNCTION",
        "_sample_indices(num_cols, max_cols)"
    ],
    [
        "CALL_FUNCTION",
        "set(_sample_indices(num_cols, max_cols))"
    ],
    [
        "LOAD_GLOBAL",
        "enumerate"
    ],
    [
        "LOAD_GLOBAL",
        "zip"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_ATTR",
        "val.columns"
    ],
    [
        "LOAD_ATTR",
        "val.columns.format"
    ],
    [
        "CALL_FUNCTION_KW",
        "val.columns.format(sparsify=False)"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_ATTR",
        "val.columns"
    ],
    [
        "CALL_FUNCTION",
        "zip(val.columns.format(sparsify=False),\n                                                            val.columns)"
    ],
    [
        "CALL_FUNCTION",
        "enumerate(zip(val.columns.format(sparsify=False),\n                                                            val.columns))"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "LOAD_FAST",
        "indices"
    ],
    [
        "COMPARE_OP",
        "i in indices"
    ],
    [
        "LOAD_FAST",
        "add_child"
    ],
    [
        "LOAD_FAST",
        "formatted_name"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_FAST",
        "label"
    ],
    [
        "BINARY_SUBSCR",
        "val[label]"
    ],
    [
        "CALL_FUNCTION",
        "add_child(formatted_name, val[label])"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "Series"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, Series)"
    ],
    [
        "LOAD_GLOBAL",
        "_sample_indices"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "LOAD_FAST",
        "samples"
    ],
    [
        "BINARY_SUBSCR",
        "samples['pandas_rows']"
    ],
    [
        "CALL_FUNCTION",
        "_sample_indices(length, samples['pandas_rows'])"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_ATTR",
        "val.index"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_ADD",
        "i + 1"
    ],
    [
        "BINARY_SUBSCR",
        "val.index[i:i + 1]"
    ],
    [
        "LOAD_ATTR",
        "val.index[i:i + 1].format"
    ],
    [
        "CALL_FUNCTION_KW",
        "val.index[i:i + 1].format(sparsify=False)"
    ],
    [
        "BINARY_SUBSCR",
        "val.index[i:i + 1].format(sparsify=False)[0]"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_ATTR",
        "val.iloc"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_SUBSCR",
        "val.iloc[i]"
    ],
    [
        "LOAD_FAST",
        "add_child"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "LOAD_FAST",
        "v"
    ],
    [
        "CALL_FUNCTION",
        "add_child(k, v)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "level"
    ],
    [
        "COMPARE_OP",
        "level <= 0"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "PY3"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "bytes"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_GLOBAL",
        "unicode"
    ],
    [
        "LOAD_GLOBAL",
        "xrange"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val,\n                           (str, bytes, range)\n                           if PY3 else\n                           (str, unicode, xrange))"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "Sequence"
    ],
    [
        "LOAD_GLOBAL",
        "ndarray"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, (Sequence, ndarray))"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "COMPARE_OP",
        "length is not None"
    ],
    [
        "LOAD_GLOBAL",
        "_sample_indices"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "LOAD_FAST",
        "samples"
    ],
    [
        "BINARY_SUBSCR",
        "samples['list']"
    ],
    [
        "CALL_FUNCTION",
        "_sample_indices(length, samples['list'])"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_SUBSCR",
        "val[i]"
    ],
    [
        "LOAD_FAST",
        "add_child"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "CALL_FUNCTION",
        "str(i)"
    ],
    [
        "LOAD_FAST",
        "v"
    ],
    [
        "CALL_FUNCTION",
        "add_child(str(i), v)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "Mapping"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, Mapping)"
    ],
    [
        "LOAD_GLOBAL",
        "islice"
    ],
    [
        "LOAD_GLOBAL",
        "_safe_iter"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "iteritems"
    ],
    [
        "CALL_FUNCTION",
        "_safe_iter(val, iteritems)"
    ],
    [
        "LOAD_FAST",
        "samples"
    ],
    [
        "BINARY_SUBSCR",
        "samples['dict']"
    ],
    [
        "CALL_FUNCTION",
        "islice(_safe_iter(val, iteritems), samples['dict'])"
    ],
    [
        "LOAD_FAST",
        "add_child"
    ],
    [
        "LOAD_GLOBAL",
        "cheap_repr"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "CALL_FUNCTION",
        "cheap_repr(k)"
    ],
    [
        "LOAD_FAST",
        "v"
    ],
    [
        "CALL_FUNCTION",
        "add_child(cheap_repr(k), v)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_GLOBAL",
        "Set"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(val, Set)"
    ],
    [
        "LOAD_GLOBAL",
        "_safe_iter"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "CALL_FUNCTION",
        "_safe_iter(val)"
    ],
    [
        "LOAD_FAST",
        "samples"
    ],
    [
        "BINARY_SUBSCR",
        "samples['set']"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "COMPARE_OP",
        "length is None"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "LOAD_FAST",
        "num_items"
    ],
    [
        "BINARY_ADD",
        "num_items + 2"
    ],
    [
        "COMPARE_OP",
        "length > num_items + 2"
    ],
    [
        "LOAD_GLOBAL",
        "islice"
    ],
    [
        "LOAD_FAST",
        "vals"
    ],
    [
        "LOAD_FAST",
        "num_items"
    ],
    [
        "CALL_FUNCTION",
        "islice(vals, num_items)"
    ],
    [
        "LOAD_GLOBAL",
        "enumerate"
    ],
    [
        "LOAD_FAST",
        "vals"
    ],
    [
        "CALL_FUNCTION",
        "enumerate(vals)"
    ],
    [
        "LOAD_FAST",
        "add_child"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_MODULO",
        "'<%s>' % i"
    ],
    [
        "LOAD_FAST",
        "v"
    ],
    [
        "CALL_FUNCTION",
        "add_child('<%s>' % i, v)"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "CALL_FUNCTION",
        "getattr(val, '__dict__', None)"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_GLOBAL",
        "sorted"
    ],
    [
        "LOAD_GLOBAL",
        "islice"
    ],
    [
        "LOAD_GLOBAL",
        "_safe_iter"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "CALL_FUNCTION",
        "_safe_iter(d)"
    ],
    [
        "LOAD_FAST",
        "samples"
    ],
    [
        "BINARY_SUBSCR",
        "samples['attributes']"
    ],
    [
        "CALL_FUNCTION",
        "islice(_safe_iter(d),\n                                   samples['attributes'])"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "CALL_FUNCTION_KW",
        "sorted(islice(_safe_iter(d),\n                                   samples['attributes']),\n                            key=str)"
    ],
    [
        "LOAD_FAST",
        "d"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "BINARY_SUBSCR",
        "d[k]"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "v"
    ],
    [
        "LOAD_GLOBAL",
        "TracedFile"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(v, TracedFile)"
    ],
    [
        "LOAD_FAST",
        "add_child"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "CALL_FUNCTION",
        "str(k)"
    ],
    [
        "LOAD_FAST",
        "v"
    ],
    [
        "CALL_FUNCTION",
        "add_child(str(k), v)"
    ],
    [
        "LOAD_GLOBAL",
        "sorted"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_GLOBAL",
        "type"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "CALL_FUNCTION",
        "type(val)"
    ],
    [
        "CALL_FUNCTION",
        "getattr(type(val), '__slots__', None)"
    ],
    [
        "CALL_FUNCTION",
        "sorted(getattr(type(val), '__slots__', None) or ())"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "CALL_FUNCTION",
        "getattr(val, s)"
    ],
    [
        "LOAD_GLOBAL",
        "AttributeError"
    ],
    [
        "LOAD_FAST",
        "add_child"
    ],
    [
        "LOAD_GLOBAL",
        "str"
    ],
    [
        "LOAD_FAST",
        "s"
    ],
    [
        "CALL_FUNCTION",
        "str(s)"
    ],
    [
        "LOAD_FAST",
        "attr"
    ],
    [
        "CALL_FUNCTION",
        "add_child(str(s), attr)"
    ],
    [
        "LOAD_FAST",
        "result"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_FAST",
        "f"
    ],
    [
        "LOAD_FAST",
        "val"
    ],
    [
        "CALL_FUNCTION",
        "f(val)"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "LOAD_FAST",
        "max_length"
    ],
    [
        "BINARY_ADD",
        "max_length + 2"
    ],
    [
        "COMPARE_OP",
        "length <= max_length + 2"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "CALL_FUNCTION",
        "range(length)"
    ],
    [
        "LOAD_GLOBAL",
        "chain"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "LOAD_FAST",
        "max_length"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "max_length // 2"
    ],
    [
        "CALL_FUNCTION",
        "range(max_length // 2)"
    ],
    [
        "LOAD_GLOBAL",
        "range"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "LOAD_FAST",
        "max_length"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "max_length // 2"
    ],
    [
        "BINARY_SUBTRACT",
        "length - max_length // 2"
    ],
    [
        "LOAD_FAST",
        "length"
    ],
    [
        "CALL_FUNCTION",
        "range(length - max_length // 2,\n                           length)"
    ],
    [
        "CALL_FUNCTION",
        "chain(range(max_length // 2),\n                     range(length - max_length // 2,\n                           length))"
    ],
    [
        "LOAD_GLOBAL",
        "len"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "len(x)"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "COMPARE_OP",
        "n == 0"
    ],
    [
        "LOAD_GLOBAL",
        "repr"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "CALL_FUNCTION",
        "repr(x)"
    ],
    [
        "LOAD_FAST",
        "helper"
    ],
    [
        "LOAD_ATTR",
        "helper.level"
    ],
    [
        "BINARY_SUBTRACT",
        "helper.level - 1"
    ],
    [
        "LOAD_GLOBAL",
        "_repr_series_one_line"
    ],
    [
        "LOAD_ATTR",
        "_repr_series_one_line.maxparts"
    ],
    [
        "LOAD_GLOBAL",
        "_sample_indices"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "LOAD_FAST",
        "maxparts"
    ],
    [
        "CALL_FUNCTION",
        "_sample_indices(n, maxparts)"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_ATTR",
        "x.index"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_ADD",
        "i + 1"
    ],
    [
        "BINARY_SUBSCR",
        "x.index[i:i + 1]"
    ],
    [
        "LOAD_ATTR",
        "x.index[i:i + 1].format"
    ],
    [
        "CALL_FUNCTION_KW",
        "x.index[i:i + 1].format(sparsify=False)"
    ],
    [
        "BINARY_SUBSCR",
        "x.index[i:i + 1].format(sparsify=False)[0]"
    ],
    [
        "LOAD_FAST",
        "x"
    ],
    [
        "LOAD_ATTR",
        "x.iloc"
    ],
    [
        "LOAD_FAST",
        "i"
    ],
    [
        "BINARY_SUBSCR",
        "x.iloc[i]"
    ],
    [
        "LOAD_FAST",
        "pieces"
    ],
    [
        "LOAD_ATTR",
        "pieces.append"
    ],
    [
        "LOAD_FAST",
        "k"
    ],
    [
        "LOAD_GLOBAL",
        "cheap_repr"
    ],
    [
        "LOAD_FAST",
        "v"
    ],
    [
        "LOAD_FAST",
        "newlevel"
    ],
    [
        "CALL_FUNCTION",
        "cheap_repr(v, newlevel)"
    ],
    [
        "BINARY_MODULO",
        "'%s = %s' % (k, cheap_repr(v, newlevel))"
    ],
    [
        "CALL_FUNCTION",
        "pieces.append('%s = %s' % (k, cheap_repr(v, newlevel)))"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "LOAD_FAST",
        "maxparts"
    ],
    [
        "BINARY_ADD",
        "maxparts + 2"
    ],
    [
        "COMPARE_OP",
        "n > maxparts + 2"
    ],
    [
        "LOAD_FAST",
        "pieces"
    ],
    [
        "LOAD_ATTR",
        "pieces.insert"
    ],
    [
        "LOAD_FAST",
        "maxparts"
    ],
    [
        "BINARY_FLOOR_DIVIDE",
        "maxparts // 2"
    ],
    [
        "CALL_FUNCTION",
        "pieces.insert(maxparts // 2, '...')"
    ],
    [
        "LOAD_ATTR",
        "'; '.join"
    ],
    [
        "LOAD_FAST",
        "pieces"
    ],
    [
        "CALL_FUNCTION",
        "'; '.join(pieces)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.expr"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.expr)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Num"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Str"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "CALL_FUNCTION",
        "getattr(ast, 'NameConstant', ())"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, (ast.Num, ast.Str, getattr(ast, 'NameConstant', ())))"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "getattr(node, 'ctx', None)"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Store"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Del"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(getattr(node, 'ctx', None),\n                            (ast.Store, ast.Del))"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.UnaryOp"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.UnaryOp)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.op"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.UAdd"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.USub"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node.op, (ast.UAdd, ast.USub))"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.operand"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Num"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node.operand, ast.Num)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.List"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Tuple"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Dict"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, (ast.List, ast.Tuple, ast.Dict))"
    ],
    [
        "LOAD_GLOBAL",
        "any"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.iter_child_nodes"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "CALL_FUNCTION",
        "ast.iter_child_nodes(node)"
    ],
    [
        "CALL_FUNCTION",
        "any(is_interesting_expression(n) for n in ast.iter_child_nodes(node))"
    ],
    [
        "UNARY_NOT",
        "not any(is_interesting_expression(n) for n in ast.iter_child_nodes(node))"
    ],
    [
        "UNARY_NOT",
        "not (isinstance(node, (ast.Num, ast.Str, getattr(ast, 'NameConstant', ()))) or\n                 isinstance(getattr(node, 'ctx', None),\n                            (ast.Store, ast.Del)) or\n                 (isinstance(node, ast.UnaryOp) and\n                  isinstance(node.op, (ast.UAdd, ast.USub)) and\n                  isinstance(node.operand, ast.Num)) or\n                 (isinstance(node, (ast.List, ast.Tuple, ast.Dict)) and\n                  not any(is_interesting_expression(n) for n in ast.iter_child_nodes(node))))"
    ],
    [
        "LOAD_GLOBAL",
        "is_interesting_expression"
    ],
    [
        "LOAD_FAST",
        "n"
    ],
    [
        "CALL_FUNCTION",
        "is_interesting_expression(n)"
    ],
    [
        "LOAD_GLOBAL",
        "cast"
    ],
    [
        "LOAD_GLOBAL",
        "dict"
    ],
    [
        "LOAD_GLOBAL",
        "__builtins__"
    ],
    [
        "CALL_FUNCTION",
        "cast(dict, __builtins__)"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "LOAD_ATTR",
        "ast.Name"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, ast.Name)"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.id"
    ],
    [
        "LOAD_FAST",
        "builtins"
    ],
    [
        "COMPARE_OP",
        "node.id in builtins"
    ],
    [
        "LOAD_FAST",
        "builtins"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_ATTR",
        "node.id"
    ],
    [
        "BINARY_SUBSCR",
        "builtins[node.id]"
    ],
    [
        "LOAD_FAST",
        "value"
    ],
    [
        "COMPARE_OP",
        "builtins[node.id] is value"
    ],
    [
        "LOAD_GLOBAL",
        "isinstance"
    ],
    [
        "LOAD_FAST",
        "node"
    ],
    [
        "LOAD_GLOBAL",
        "getattr"
    ],
    [
        "LOAD_GLOBAL",
        "ast"
    ],
    [
        "CALL_FUNCTION",
        "getattr(ast, 'NameConstant', ())"
    ],
    [
        "CALL_FUNCTION",
        "isinstance(node, getattr(ast, 'NameConstant', ()))"
    ]
]