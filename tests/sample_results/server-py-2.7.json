[
    [
        "LOAD_NAME", 
        "standard_library"
    ], 
    [
        "LOAD_ATTR", 
        "standard_library.install_aliases"
    ], 
    [
        "CALL_FUNCTION", 
        "standard_library.install_aliases()"
    ], 
    [
        "LOAD_NAME", 
        "Flask"
    ], 
    [
        "CALL_FUNCTION", 
        "Flask('birdseye')"
    ], 
    [
        "LOAD_NAME", 
        "True"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.jinja_env"
    ], 
    [
        "STORE_ATTR", 
        "app.jinja_env.auto_reload"
    ], 
    [
        "LOAD_NAME", 
        "Humanize"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "CALL_FUNCTION", 
        "Humanize(app)"
    ], 
    [
        "LOAD_NAME", 
        "PathConverter"
    ], 
    [
        "LOAD_NAME", 
        "FileConverter"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.url_map"
    ], 
    [
        "LOAD_ATTR", 
        "app.url_map.converters"
    ], 
    [
        "STORE_SUBSCR", 
        "app.url_map.converters['file']"
    ], 
    [
        "LOAD_NAME", 
        "Database"
    ], 
    [
        "CALL_FUNCTION", 
        "Database()"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.Session"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.Function"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.Call"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/')"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/')"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/file/<file:path>')"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/file/<file:path>')"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/file/<file:path>/__function__/<func_name>')"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/file/<file:path>/__function__/<func_name>')"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/api/file/<file:path>/__function__/<func_name>/latest_call/')"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/api/file/<file:path>/__function__/<func_name>/latest_call/')"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "db.provide_session"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/call/<call_id>')"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/call/<call_id>')"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/ipython_call/<call_id>')"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/ipython_call/<call_id>')"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/ipython_iframe/<call_id>')"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/ipython_iframe/<call_id>')"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/kill', methods=['POST'])"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/kill', methods=['POST'])"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/api/call/<call_id>')"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/api/call/<call_id>')"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/api/calls_by_body_hash/<body_hash>')"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/api/calls_by_body_hash/<body_hash>')"
    ], 
    [
        "LOAD_NAME", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.route"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/api/body_hashes_present/', methods=['POST'])"
    ], 
    [
        "LOAD_NAME", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "db.provide_session"
    ], 
    [
        "CALL_FUNCTION", 
        "app.route('/api/body_hashes_present/', methods=['POST'])"
    ], 
    [
        "LOAD_NAME", 
        "sys"
    ], 
    [
        "LOAD_ATTR", 
        "sys.argv"
    ], 
    [
        "SLICE+1", 
        "sys.argv[1:]"
    ], 
    [
        "LOAD_NAME", 
        "__name__"
    ], 
    [
        "COMPARE_OP", 
        "__name__ == '__main__'"
    ], 
    [
        "LOAD_NAME", 
        "main"
    ], 
    [
        "CALL_FUNCTION", 
        "main()"
    ], 
    [
        "LOAD_GLOBAL", 
        "db"
    ], 
    [
        "LOAD_ATTR", 
        "db.all_file_paths"
    ], 
    [
        "CALL_FUNCTION", 
        "db.all_file_paths()"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "LOAD_ATTR", 
        "Call.basic_columns"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "LOAD_ATTR", 
        "Function.basic_columns"
    ], 
    [
        "BINARY_ADD", 
        "Call.basic_columns + Function.basic_columns"
    ], 
    [
        "CALL_FUNCTION_VAR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join(Function)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join(Function)\n                        .order_by"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "LOAD_ATTR", 
        "Call.start_time"
    ], 
    [
        "LOAD_ATTR", 
        "Call.start_time.desc"
    ], 
    [
        "CALL_FUNCTION", 
        "Call.start_time.desc()"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join(Function)\n                        .order_by(Call.start_time.desc())"
    ], 
    [
        "SLICE+2", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                        .join(Function)\n                        .order_by(Call.start_time.desc())[:100]"
    ], 
    [
        "LOAD_GLOBAL", 
        "OrderedDict"
    ], 
    [
        "CALL_FUNCTION", 
        "OrderedDict()"
    ], 
    [
        "LOAD_FAST", 
        "recent_calls"
    ], 
    [
        "LOAD_GLOBAL", 
        "is_ipython_cell"
    ], 
    [
        "LOAD_FAST", 
        "row"
    ], 
    [
        "LOAD_ATTR", 
        "row.file"
    ], 
    [
        "CALL_FUNCTION", 
        "is_ipython_cell(row.file)"
    ], 
    [
        "LOAD_FAST", 
        "files"
    ], 
    [
        "LOAD_ATTR", 
        "files.setdefault"
    ], 
    [
        "LOAD_FAST", 
        "row"
    ], 
    [
        "LOAD_ATTR", 
        "row.file"
    ], 
    [
        "LOAD_GLOBAL", 
        "OrderedDict"
    ], 
    [
        "CALL_FUNCTION", 
        "OrderedDict()"
    ], 
    [
        "CALL_FUNCTION", 
        "files.setdefault(\n            row.file, OrderedDict()\n        )"
    ], 
    [
        "LOAD_ATTR", 
        "files.setdefault(\n            row.file, OrderedDict()\n        ).setdefault"
    ], 
    [
        "LOAD_FAST", 
        "row"
    ], 
    [
        "LOAD_ATTR", 
        "row.name"
    ], 
    [
        "LOAD_FAST", 
        "row"
    ], 
    [
        "CALL_FUNCTION", 
        "files.setdefault(\n            row.file, OrderedDict()\n        ).setdefault(\n            row.name, row\n        )"
    ], 
    [
        "LOAD_FAST", 
        "all_paths"
    ], 
    [
        "LOAD_FAST", 
        "files"
    ], 
    [
        "LOAD_ATTR", 
        "files.setdefault"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "LOAD_GLOBAL", 
        "OrderedDict"
    ], 
    [
        "CALL_FUNCTION", 
        "OrderedDict()"
    ], 
    [
        "CALL_FUNCTION", 
        "files.setdefault(\n            path, OrderedDict()\n        )"
    ], 
    [
        "LOAD_GLOBAL", 
        "partial"
    ], 
    [
        "LOAD_GLOBAL", 
        "short_path"
    ], 
    [
        "LOAD_FAST", 
        "all_paths"
    ], 
    [
        "CALL_FUNCTION", 
        "partial(short_path, all_paths=all_paths)"
    ], 
    [
        "LOAD_GLOBAL", 
        "render_template"
    ], 
    [
        "LOAD_FAST", 
        "short"
    ], 
    [
        "LOAD_FAST", 
        "files"
    ], 
    [
        "CALL_FUNCTION", 
        "render_template('index.html',\n                           short=short,\n                           files=files)"
    ], 
    [
        "LOAD_GLOBAL", 
        "fix_abs_path"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "CALL_FUNCTION", 
        "fix_abs_path(path)"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "LOAD_ATTR", 
        "Call.basic_columns"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "LOAD_ATTR", 
        "Function.basic_columns"
    ], 
    [
        "BINARY_ADD", 
        "Call.basic_columns + Function.basic_columns"
    ], 
    [
        "CALL_FUNCTION_VAR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)\n                      .filter_by"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)\n                      .filter_by(file=path)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)\n                      .filter_by(file=path)\n                      .subquery"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                      .join(Function)\n                      .filter_by(file=path)\n                      .subquery('filtered_calls')"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_FAST", 
        "filtered_calls"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c.name"
    ], 
    [
        "LOAD_GLOBAL", 
        "sqlalchemy"
    ], 
    [
        "LOAD_ATTR", 
        "sqlalchemy.func"
    ], 
    [
        "LOAD_ATTR", 
        "sqlalchemy.func.max"
    ], 
    [
        "LOAD_FAST", 
        "filtered_calls"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c.start_time"
    ], 
    [
        "CALL_FUNCTION", 
        "sqlalchemy.func.max(filtered_calls.c.start_time)"
    ], 
    [
        "LOAD_ATTR", 
        "sqlalchemy.func.max(filtered_calls.c.start_time).label"
    ], 
    [
        "CALL_FUNCTION", 
        "sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    )"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    ).group_by"
    ], 
    [
        "LOAD_FAST", 
        "filtered_calls"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c.name"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    ).group_by(\n        filtered_calls.c.name,\n    )"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    ).group_by(\n        filtered_calls.c.name,\n    ).subquery"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(\n        filtered_calls.c.name,\n        sqlalchemy.func.max(filtered_calls.c.start_time).label('maxtime')\n    ).group_by(\n        filtered_calls.c.name,\n    ).subquery('latest_calls')"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_FAST", 
        "filtered_calls"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(filtered_calls)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(filtered_calls).join"
    ], 
    [
        "LOAD_FAST", 
        "latest_calls"
    ], 
    [
        "LOAD_GLOBAL", 
        "sqlalchemy"
    ], 
    [
        "LOAD_ATTR", 
        "sqlalchemy.and_"
    ], 
    [
        "LOAD_FAST", 
        "filtered_calls"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c.name"
    ], 
    [
        "LOAD_FAST", 
        "latest_calls"
    ], 
    [
        "LOAD_ATTR", 
        "latest_calls.c"
    ], 
    [
        "LOAD_ATTR", 
        "latest_calls.c.name"
    ], 
    [
        "COMPARE_OP", 
        "filtered_calls.c.name == latest_calls.c.name"
    ], 
    [
        "LOAD_FAST", 
        "filtered_calls"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c.start_time"
    ], 
    [
        "LOAD_FAST", 
        "latest_calls"
    ], 
    [
        "LOAD_ATTR", 
        "latest_calls.c"
    ], 
    [
        "LOAD_ATTR", 
        "latest_calls.c.maxtime"
    ], 
    [
        "COMPARE_OP", 
        "filtered_calls.c.start_time == latest_calls.c.maxtime"
    ], 
    [
        "CALL_FUNCTION", 
        "sqlalchemy.and_(\n            filtered_calls.c.name == latest_calls.c.name,\n            filtered_calls.c.start_time == latest_calls.c.maxtime,\n        )"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(filtered_calls).join(\n        latest_calls,\n        sqlalchemy.and_(\n            filtered_calls.c.name == latest_calls.c.name,\n            filtered_calls.c.start_time == latest_calls.c.maxtime,\n        )\n    )"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(filtered_calls).join(\n        latest_calls,\n        sqlalchemy.and_(\n            filtered_calls.c.name == latest_calls.c.name,\n            filtered_calls.c.start_time == latest_calls.c.maxtime,\n        )\n    ).order_by"
    ], 
    [
        "LOAD_FAST", 
        "filtered_calls"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c.start_time"
    ], 
    [
        "LOAD_ATTR", 
        "filtered_calls.c.start_time.desc"
    ], 
    [
        "CALL_FUNCTION", 
        "filtered_calls.c.start_time.desc()"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(filtered_calls).join(\n        latest_calls,\n        sqlalchemy.and_(\n            filtered_calls.c.name == latest_calls.c.name,\n            filtered_calls.c.start_time == latest_calls.c.maxtime,\n        )\n    ).order_by(filtered_calls.c.start_time.desc())"
    ], 
    [
        "LOAD_GLOBAL", 
        "group_by_attr"
    ], 
    [
        "LOAD_FAST", 
        "query"
    ], 
    [
        "CALL_FUNCTION", 
        "group_by_attr(query, 'type')"
    ], 
    [
        "LOAD_GLOBAL", 
        "sorted"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "LOAD_ATTR", 
        "Function.name"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "LOAD_ATTR", 
        "Function.type"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Function.name, Function.type)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(Function.name, Function.type)\n                       .filter_by"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Function.name, Function.type)\n                       .filter_by(file=path)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(Function.name, Function.type)\n                       .filter_by(file=path)\n                       .distinct"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Function.name, Function.type)\n                       .filter_by(file=path)\n                       .distinct()"
    ], 
    [
        "CALL_FUNCTION", 
        "sorted(session.query(Function.name, Function.type)\n                       .filter_by(file=path)\n                       .distinct())"
    ], 
    [
        "LOAD_FAST", 
        "query"
    ], 
    [
        "LOAD_FAST", 
        "all_funcs"
    ], 
    [
        "LOAD_FAST", 
        "func"
    ], 
    [
        "LOAD_ATTR", 
        "func.name"
    ], 
    [
        "LOAD_FAST", 
        "func_names"
    ], 
    [
        "COMPARE_OP", 
        "func.name not in func_names"
    ], 
    [
        "LOAD_FAST", 
        "funcs"
    ], 
    [
        "LOAD_FAST", 
        "func"
    ], 
    [
        "LOAD_ATTR", 
        "func.type"
    ], 
    [
        "BINARY_SUBSCR", 
        "funcs[func.type]"
    ], 
    [
        "LOAD_ATTR", 
        "funcs[func.type].append"
    ], 
    [
        "LOAD_FAST", 
        "func"
    ], 
    [
        "CALL_FUNCTION", 
        "funcs[func.type].append(func)"
    ], 
    [
        "LOAD_GLOBAL", 
        "render_template"
    ], 
    [
        "LOAD_FAST", 
        "funcs"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "LOAD_GLOBAL", 
        "IPYTHON_FILE_PATH"
    ], 
    [
        "COMPARE_OP", 
        "path == IPYTHON_FILE_PATH"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "LOAD_GLOBAL", 
        "basename"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "CALL_FUNCTION", 
        "basename(path)"
    ], 
    [
        "CALL_FUNCTION", 
        "render_template('file.html',\n                           funcs=funcs,\n                           is_ipython=path == IPYTHON_FILE_PATH,\n                           full_path=path,\n                           short_path=basename(path))"
    ], 
    [
        "LOAD_FAST", 
        "row"
    ], 
    [
        "LOAD_ATTR", 
        "row.name"
    ], 
    [
        "LOAD_GLOBAL", 
        "fix_abs_path"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "CALL_FUNCTION", 
        "fix_abs_path(path)"
    ], 
    [
        "LOAD_GLOBAL", 
        "get_calls"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "LOAD_FAST", 
        "func_name"
    ], 
    [
        "CALL_FUNCTION", 
        "get_calls(session, path, func_name, 200)"
    ], 
    [
        "LOAD_FAST", 
        "query"
    ], 
    [
        "LOAD_FAST", 
        "query"
    ], 
    [
        "BINARY_SUBSCR", 
        "query[0]"
    ], 
    [
        "LOAD_FAST", 
        "query"
    ], 
    [
        "LOAD_GLOBAL", 
        "withattrs"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "CALL_FUNCTION", 
        "Call()"
    ], 
    [
        "LOAD_FAST", 
        "row"
    ], 
    [
        "LOAD_ATTR", 
        "row._asdict"
    ], 
    [
        "CALL_FUNCTION", 
        "row._asdict()"
    ], 
    [
        "CALL_FUNCTION_KW", 
        "withattrs(Call(), **row._asdict())"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Function)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(Function).filter_by"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "LOAD_FAST", 
        "func_name"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Function).filter_by(file=path, name=func_name)"
    ], 
    [
        "BINARY_SUBSCR", 
        "session.query(Function).filter_by(file=path, name=func_name)[0]"
    ], 
    [
        "LOAD_GLOBAL", 
        "render_template"
    ], 
    [
        "LOAD_FAST", 
        "func"
    ], 
    [
        "LOAD_GLOBAL", 
        "basename"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "CALL_FUNCTION", 
        "basename(path)"
    ], 
    [
        "LOAD_FAST", 
        "calls"
    ], 
    [
        "CALL_FUNCTION", 
        "render_template('function.html',\n                           func=func,\n                           short_path=basename(path),\n                           calls=calls)"
    ], 
    [
        "LOAD_GLOBAL", 
        "fix_abs_path"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "CALL_FUNCTION", 
        "fix_abs_path(path)"
    ], 
    [
        "LOAD_GLOBAL", 
        "get_calls"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "LOAD_FAST", 
        "func_name"
    ], 
    [
        "CALL_FUNCTION", 
        "get_calls(session, path, func_name, 1)"
    ], 
    [
        "BINARY_SUBSCR", 
        "get_calls(session, path, func_name, 1)[0]"
    ], 
    [
        "LOAD_GLOBAL", 
        "jsonify"
    ], 
    [
        "LOAD_GLOBAL", 
        "dict"
    ], 
    [
        "LOAD_FAST", 
        "call"
    ], 
    [
        "LOAD_ATTR", 
        "call.id"
    ], 
    [
        "LOAD_GLOBAL", 
        "url_for"
    ], 
    [
        "LOAD_GLOBAL", 
        "call_view"
    ], 
    [
        "LOAD_ATTR", 
        "call_view.__name__"
    ], 
    [
        "LOAD_FAST", 
        "call"
    ], 
    [
        "LOAD_ATTR", 
        "call.id"
    ], 
    [
        "CALL_FUNCTION", 
        "url_for(call_view.__name__,\n                    call_id=call.id)"
    ], 
    [
        "CALL_FUNCTION", 
        "dict(\n        id=call.id,\n        url=url_for(call_view.__name__,\n                    call_id=call.id),\n    )"
    ], 
    [
        "CALL_FUNCTION", 
        "jsonify(dict(\n        id=call.id,\n        url=url_for(call_view.__name__,\n                    call_id=call.id),\n    ))"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "LOAD_ATTR", 
        "Call.basic_columns"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "LOAD_ATTR", 
        "Function.basic_columns"
    ], 
    [
        "BINARY_ADD", 
        "Call.basic_columns + Function.basic_columns"
    ], 
    [
        "CALL_FUNCTION_VAR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by"
    ], 
    [
        "LOAD_FAST", 
        "path"
    ], 
    [
        "LOAD_FAST", 
        "func_name"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by(file=path, name=func_name)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by(file=path, name=func_name)\n                .order_by"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "LOAD_ATTR", 
        "Call.start_time"
    ], 
    [
        "LOAD_ATTR", 
        "Call.start_time.desc"
    ], 
    [
        "CALL_FUNCTION", 
        "Call.start_time.desc()"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by(file=path, name=func_name)\n                .order_by(Call.start_time.desc())"
    ], 
    [
        "LOAD_FAST", 
        "limit"
    ], 
    [
        "SLICE+2", 
        "session.query(*(Call.basic_columns + Function.basic_columns))\n                .join(Function)\n                .filter_by(file=path, name=func_name)\n                .order_by(Call.start_time.desc())[:limit]"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Call)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(Call).filter_by"
    ], 
    [
        "LOAD_FAST", 
        "call_id"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Call).filter_by(id=call_id)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(Call).filter_by(id=call_id).one"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Call).filter_by(id=call_id).one()"
    ], 
    [
        "LOAD_FAST", 
        "call"
    ], 
    [
        "LOAD_ATTR", 
        "call.function"
    ], 
    [
        "LOAD_GLOBAL", 
        "render_template"
    ], 
    [
        "LOAD_FAST", 
        "template"
    ], 
    [
        "LOAD_GLOBAL", 
        "basename"
    ], 
    [
        "LOAD_FAST", 
        "func"
    ], 
    [
        "LOAD_ATTR", 
        "func.file"
    ], 
    [
        "CALL_FUNCTION", 
        "basename(func.file)"
    ], 
    [
        "LOAD_FAST", 
        "call"
    ], 
    [
        "LOAD_FAST", 
        "func"
    ], 
    [
        "CALL_FUNCTION", 
        "render_template(template,\n                           short_path=basename(func.file),\n                           call=call,\n                           func=func)"
    ], 
    [
        "LOAD_GLOBAL", 
        "base_call_view"
    ], 
    [
        "LOAD_FAST", 
        "call_id"
    ], 
    [
        "CALL_FUNCTION", 
        "base_call_view(call_id, 'call.html')"
    ], 
    [
        "LOAD_GLOBAL", 
        "base_call_view"
    ], 
    [
        "LOAD_FAST", 
        "call_id"
    ], 
    [
        "CALL_FUNCTION", 
        "base_call_view(call_id, 'ipython_call.html')"
    ], 
    [
        "LOAD_GLOBAL", 
        "render_template"
    ], 
    [
        "LOAD_FAST", 
        "call_id"
    ], 
    [
        "CALL_FUNCTION", 
        "render_template('ipython_iframe.html',\n                           container_id='1234',\n                           port=7777,\n                           call_id=call_id)"
    ], 
    [
        "LOAD_GLOBAL", 
        "request"
    ], 
    [
        "LOAD_ATTR", 
        "request.environ"
    ], 
    [
        "LOAD_ATTR", 
        "request.environ.get"
    ], 
    [
        "CALL_FUNCTION", 
        "request.environ.get('werkzeug.server.shutdown')"
    ], 
    [
        "LOAD_FAST", 
        "func"
    ], 
    [
        "COMPARE_OP", 
        "func is None"
    ], 
    [
        "LOAD_GLOBAL", 
        "RuntimeError"
    ], 
    [
        "CALL_FUNCTION", 
        "RuntimeError('Not running with the Werkzeug Server')"
    ], 
    [
        "LOAD_FAST", 
        "func"
    ], 
    [
        "CALL_FUNCTION", 
        "func()"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Call)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(Call).filter_by"
    ], 
    [
        "LOAD_FAST", 
        "call_id"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Call).filter_by(id=call_id)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(Call).filter_by(id=call_id).one"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Call).filter_by(id=call_id).one()"
    ], 
    [
        "LOAD_FAST", 
        "call"
    ], 
    [
        "LOAD_ATTR", 
        "call.function"
    ], 
    [
        "LOAD_GLOBAL", 
        "DecentJSONEncoder"
    ], 
    [
        "CALL_FUNCTION", 
        "DecentJSONEncoder()"
    ], 
    [
        "LOAD_ATTR", 
        "DecentJSONEncoder().encode"
    ], 
    [
        "LOAD_GLOBAL", 
        "dict"
    ], 
    [
        "LOAD_GLOBAL", 
        "dict"
    ], 
    [
        "LOAD_FAST", 
        "call"
    ], 
    [
        "LOAD_ATTR", 
        "call.parsed_data"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "LOAD_ATTR", 
        "Call.basic_dict"
    ], 
    [
        "LOAD_FAST", 
        "call"
    ], 
    [
        "CALL_FUNCTION", 
        "Call.basic_dict(call)"
    ], 
    [
        "CALL_FUNCTION_KW", 
        "dict(data=call.parsed_data, **Call.basic_dict(call))"
    ], 
    [
        "LOAD_GLOBAL", 
        "dict"
    ], 
    [
        "LOAD_FAST", 
        "func"
    ], 
    [
        "LOAD_ATTR", 
        "func.parsed_data"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "LOAD_ATTR", 
        "Function.basic_dict"
    ], 
    [
        "LOAD_FAST", 
        "func"
    ], 
    [
        "CALL_FUNCTION", 
        "Function.basic_dict(func)"
    ], 
    [
        "CALL_FUNCTION_KW", 
        "dict(data=func.parsed_data, **Function.basic_dict(func))"
    ], 
    [
        "CALL_FUNCTION", 
        "dict(\n        call=dict(data=call.parsed_data, **Call.basic_dict(call)),\n        function=dict(data=func.parsed_data, **Function.basic_dict(func)))"
    ], 
    [
        "CALL_FUNCTION", 
        "DecentJSONEncoder().encode(dict(\n        call=dict(data=call.parsed_data, **Call.basic_dict(call)),\n        function=dict(data=func.parsed_data, **Function.basic_dict(func))))"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "LOAD_ATTR", 
        "Call.basic_columns"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "LOAD_ATTR", 
        "Function.data"
    ], 
    [
        "BINARY_ADD", 
        "Call.basic_columns + (Function.data,)"
    ], 
    [
        "CALL_FUNCTION_VAR", 
        "session.query(*Call.basic_columns + (Function.data,))"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by"
    ], 
    [
        "LOAD_FAST", 
        "body_hash"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by(body_hash=body_hash)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by(body_hash=body_hash)\n                 .order_by"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "LOAD_ATTR", 
        "Call.start_time"
    ], 
    [
        "LOAD_ATTR", 
        "Call.start_time.desc"
    ], 
    [
        "CALL_FUNCTION", 
        "Call.start_time.desc()"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by(body_hash=body_hash)\n                 .order_by(Call.start_time.desc())"
    ], 
    [
        "SLICE+2", 
        "session.query(*Call.basic_columns + (Function.data,))\n                 .join(Function)\n                 .filter_by(body_hash=body_hash)\n                 .order_by(Call.start_time.desc())[:200]"
    ], 
    [
        "LOAD_FAST", 
        "query"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "LOAD_ATTR", 
        "Call.basic_dict"
    ], 
    [
        "LOAD_GLOBAL", 
        "withattrs"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "CALL_FUNCTION", 
        "Call()"
    ], 
    [
        "LOAD_FAST", 
        "row"
    ], 
    [
        "LOAD_ATTR", 
        "row._asdict"
    ], 
    [
        "CALL_FUNCTION", 
        "row._asdict()"
    ], 
    [
        "CALL_FUNCTION_KW", 
        "withattrs(Call(), **row._asdict())"
    ], 
    [
        "CALL_FUNCTION", 
        "Call.basic_dict(withattrs(Call(), **row._asdict()))"
    ], 
    [
        "LOAD_FAST", 
        "query"
    ], 
    [
        "LOAD_GLOBAL", 
        "set"
    ], 
    [
        "CALL_FUNCTION", 
        "set()"
    ], 
    [
        "LOAD_GLOBAL", 
        "set"
    ], 
    [
        "CALL_FUNCTION", 
        "set()"
    ], 
    [
        "LOAD_FAST", 
        "function_data_set"
    ], 
    [
        "LOAD_GLOBAL", 
        "json"
    ], 
    [
        "LOAD_ATTR", 
        "json.loads"
    ], 
    [
        "LOAD_DEREF", 
        "function_data"
    ], 
    [
        "CALL_FUNCTION", 
        "json.loads(function_data)"
    ], 
    [
        "LOAD_FAST", 
        "add"
    ], 
    [
        "LOAD_FAST", 
        "ranges"
    ], 
    [
        "CALL_FUNCTION", 
        "add('node_ranges', ranges)"
    ], 
    [
        "LOAD_GLOBAL", 
        "set"
    ], 
    [
        "CALL_FUNCTION", 
        "set()"
    ], 
    [
        "LOAD_FAST", 
        "add"
    ], 
    [
        "LOAD_FAST", 
        "current_loop_ranges"
    ], 
    [
        "CALL_FUNCTION", 
        "add('loop_ranges', current_loop_ranges)"
    ], 
    [
        "LOAD_FAST", 
        "loop_ranges"
    ], 
    [
        "LOAD_GLOBAL", 
        "set"
    ], 
    [
        "CALL_FUNCTION", 
        "set()"
    ], 
    [
        "LOAD_FAST", 
        "current_loop_ranges"
    ], 
    [
        "COMPARE_OP", 
        "loop_ranges in (set(), current_loop_ranges)"
    ], 
    [
        "LOAD_FAST", 
        "current_loop_ranges"
    ], 
    [
        "LOAD_FAST", 
        "ranges"
    ], 
    [
        "LOAD_GLOBAL", 
        "dict"
    ], 
    [
        "LOAD_FAST", 
        "start"
    ], 
    [
        "LOAD_FAST", 
        "end"
    ], 
    [
        "CALL_FUNCTION", 
        "dict(start=start, end=end)"
    ], 
    [
        "LOAD_FAST", 
        "loop_ranges"
    ], 
    [
        "LOAD_GLOBAL", 
        "dict"
    ], 
    [
        "LOAD_FAST", 
        "start"
    ], 
    [
        "LOAD_FAST", 
        "end"
    ], 
    [
        "CALL_FUNCTION", 
        "dict(start=start, end=end)"
    ], 
    [
        "LOAD_GLOBAL", 
        "DecentJSONEncoder"
    ], 
    [
        "CALL_FUNCTION", 
        "DecentJSONEncoder()"
    ], 
    [
        "LOAD_ATTR", 
        "DecentJSONEncoder().encode"
    ], 
    [
        "LOAD_GLOBAL", 
        "dict"
    ], 
    [
        "LOAD_FAST", 
        "calls"
    ], 
    [
        "LOAD_FAST", 
        "ranges"
    ], 
    [
        "LOAD_FAST", 
        "loop_ranges"
    ], 
    [
        "CALL_FUNCTION", 
        "dict(\n        calls=calls, ranges=ranges, loop_ranges=loop_ranges)"
    ], 
    [
        "CALL_FUNCTION", 
        "DecentJSONEncoder().encode(dict(\n        calls=calls, ranges=ranges, loop_ranges=loop_ranges))"
    ], 
    [
        "LOAD_FAST", 
        "row"
    ], 
    [
        "LOAD_ATTR", 
        "row.data"
    ], 
    [
        "LOAD_DEREF", 
        "function_data"
    ], 
    [
        "LOAD_FAST", 
        "key"
    ], 
    [
        "BINARY_SUBSCR", 
        "function_data[key]"
    ], 
    [
        "LOAD_FAST", 
        "ranges_set"
    ], 
    [
        "LOAD_ATTR", 
        "ranges_set.add"
    ], 
    [
        "LOAD_FAST", 
        "node"
    ], 
    [
        "BINARY_SUBSCR", 
        "node['start']"
    ], 
    [
        "LOAD_FAST", 
        "node"
    ], 
    [
        "BINARY_SUBSCR", 
        "node['end']"
    ], 
    [
        "CALL_FUNCTION", 
        "ranges_set.add((node['start'], node['end']))"
    ], 
    [
        "LOAD_GLOBAL", 
        "request"
    ], 
    [
        "LOAD_ATTR", 
        "request.get_json"
    ], 
    [
        "CALL_FUNCTION", 
        "request.get_json()"
    ], 
    [
        "LOAD_FAST", 
        "session"
    ], 
    [
        "LOAD_ATTR", 
        "session.query"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "LOAD_ATTR", 
        "Function.body_hash"
    ], 
    [
        "LOAD_GLOBAL", 
        "sqlalchemy"
    ], 
    [
        "LOAD_ATTR", 
        "sqlalchemy.func"
    ], 
    [
        "LOAD_ATTR", 
        "sqlalchemy.func.count"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "LOAD_ATTR", 
        "Call.id"
    ], 
    [
        "CALL_FUNCTION", 
        "sqlalchemy.func.count(Call.id)"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin"
    ], 
    [
        "LOAD_GLOBAL", 
        "Call"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)\n             .filter"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "LOAD_ATTR", 
        "Function.body_hash"
    ], 
    [
        "LOAD_ATTR", 
        "Function.body_hash.in_"
    ], 
    [
        "LOAD_FAST", 
        "hashes"
    ], 
    [
        "CALL_FUNCTION", 
        "Function.body_hash.in_(hashes)"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)\n             .filter(Function.body_hash.in_(hashes))"
    ], 
    [
        "LOAD_ATTR", 
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)\n             .filter(Function.body_hash.in_(hashes))\n             .group_by"
    ], 
    [
        "LOAD_GLOBAL", 
        "Function"
    ], 
    [
        "LOAD_ATTR", 
        "Function.body_hash"
    ], 
    [
        "CALL_FUNCTION", 
        "session.query(Function.body_hash, sqlalchemy.func.count(Call.id))\n             .outerjoin(Call)\n             .filter(Function.body_hash.in_(hashes))\n             .group_by(Function.body_hash)"
    ], 
    [
        "LOAD_GLOBAL", 
        "DecentJSONEncoder"
    ], 
    [
        "CALL_FUNCTION", 
        "DecentJSONEncoder()"
    ], 
    [
        "LOAD_ATTR", 
        "DecentJSONEncoder().encode"
    ], 
    [
        "LOAD_FAST", 
        "query"
    ], 
    [
        "LOAD_GLOBAL", 
        "dict"
    ], 
    [
        "LOAD_FAST", 
        "h"
    ], 
    [
        "LOAD_FAST", 
        "count"
    ], 
    [
        "CALL_FUNCTION", 
        "dict(hash=h, count=count)"
    ], 
    [
        "CALL_FUNCTION", 
        "DecentJSONEncoder().encode([\n        dict(hash=h, count=count)\n        for h, count in query\n    ])"
    ], 
    [
        "LOAD_GLOBAL", 
        "len"
    ], 
    [
        "LOAD_FAST", 
        "argv"
    ], 
    [
        "CALL_FUNCTION", 
        "len(argv)"
    ], 
    [
        "COMPARE_OP", 
        "len(argv) == 1"
    ], 
    [
        "LOAD_FAST", 
        "argv"
    ], 
    [
        "BINARY_SUBSCR", 
        "argv[0]"
    ], 
    [
        "LOAD_ATTR", 
        "argv[0].isdigit"
    ], 
    [
        "CALL_FUNCTION", 
        "argv[0].isdigit()"
    ], 
    [
        "LOAD_FAST", 
        "argv"
    ], 
    [
        "LOAD_ATTR", 
        "argv.insert"
    ], 
    [
        "CALL_FUNCTION", 
        "argv.insert(0, '--port')"
    ], 
    [
        "LOAD_GLOBAL", 
        "argparse"
    ], 
    [
        "LOAD_ATTR", 
        "argparse.ArgumentParser"
    ], 
    [
        "CALL_FUNCTION", 
        "argparse.ArgumentParser(description=\"Bird's Eye: A graphical Python debugger\")"
    ], 
    [
        "LOAD_FAST", 
        "parser"
    ], 
    [
        "LOAD_ATTR", 
        "parser.add_argument"
    ], 
    [
        "LOAD_GLOBAL", 
        "int"
    ], 
    [
        "CALL_FUNCTION", 
        "parser.add_argument('-p', '--port', help='HTTP port, default is 7777', default=7777, type=int)"
    ], 
    [
        "LOAD_FAST", 
        "parser"
    ], 
    [
        "LOAD_ATTR", 
        "parser.add_argument"
    ], 
    [
        "CALL_FUNCTION", 
        "parser.add_argument('--host', help=\"HTTP host, default is 'localhost'\", default='localhost')"
    ], 
    [
        "LOAD_FAST", 
        "parser"
    ], 
    [
        "LOAD_ATTR", 
        "parser.parse_args"
    ], 
    [
        "LOAD_FAST", 
        "argv"
    ], 
    [
        "CALL_FUNCTION", 
        "parser.parse_args(argv)"
    ], 
    [
        "LOAD_GLOBAL", 
        "app"
    ], 
    [
        "LOAD_ATTR", 
        "app.run"
    ], 
    [
        "LOAD_FAST", 
        "args"
    ], 
    [
        "LOAD_ATTR", 
        "args.port"
    ], 
    [
        "LOAD_FAST", 
        "args"
    ], 
    [
        "LOAD_ATTR", 
        "args.host"
    ], 
    [
        "LOAD_GLOBAL", 
        "os"
    ], 
    [
        "LOAD_ATTR", 
        "os.environ"
    ], 
    [
        "LOAD_ATTR", 
        "os.environ.get"
    ], 
    [
        "CALL_FUNCTION", 
        "os.environ.get('BIRDSEYE_RELOADER')"
    ], 
    [
        "COMPARE_OP", 
        "os.environ.get('BIRDSEYE_RELOADER') == '1'"
    ], 
    [
        "CALL_FUNCTION", 
        "app.run(\n        port=args.port,\n        host=args.host,\n        use_reloader=os.environ.get('BIRDSEYE_RELOADER') == '1',\n    )"
    ]
]